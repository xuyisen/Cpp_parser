int main ( ) { # ifdef WK freopen ( <LITERAL> , <LITERAL> , stdin ) ; # endif int n , L , x ; scanf ( <LITERAL> , & n , & L , & x ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] , & b [ i ] ) ; } a [ n + <LITERAL> ] = L ; int ans = a [ <LITERAL> ] / x ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int d = a [ i + <LITERAL> ] - ( a [ i ] + b [ i ] ) ; ans += d / x ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , L , a ; scanf ( <LITERAL> , & n , & L , & a ) ; int t [ n + <LITERAL> ] = { <LITERAL> } , l [ n + <LITERAL> ] = { <LITERAL> } , times = <LITERAL> ; int i ; for ( i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & t [ i ] , & l [ i ] ) ; } for ( i = <LITERAL> ; i <= n ; i ++ ) { times += ( t [ i ] - ( t [ i - <LITERAL> ] + l [ i - <LITERAL> ] ) ) / a ; } times += ( L - ( t [ n ] + l [ n ] ) ) / a ; printf ( <LITERAL> , times ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & L , & a ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) scanf ( <LITERAL> , & t [ i ] , & l [ i ] ) ; int ans = t [ <LITERAL> ] / a ; for ( int i = <LITERAL> ; i <= n ; ++ i ) ans += ( t [ i ] - t [ i - <LITERAL> ] - l [ i - <LITERAL> ] ) / a ; ans += ( L - t [ n ] - l [ n ] ) / a ; printf ( <LITERAL> , ans ) ; } 
int main ( ) { LL n , L , a , ans = <LITERAL> , t , l , bfe = <LITERAL> ; cin >> n >> L >> a ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( i != n ) cin >> t >> l ; else t = L ; if ( bfe < t ) { { ans += ( t - bfe ) / a ; } bfe = t + l ; } cout << ans ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; m = read ( ) ; a = read ( ) ; t [ n + <LITERAL> ] = m ; int now = <LITERAL> , ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + <LITERAL> ; i ++ ) { if ( i <= n ) t [ i ] = read ( ) , l [ i ] = read ( ) ; ans += ( t [ i ] - now ) / a ; now = t [ i ] + l [ i ] ; } printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { int n , t , p ; cin >> n >> t >> p ; int l = <LITERAL> ; int k = <LITERAL> ; while ( n -- ) { int x , y ; cin >> x >> y ; l += ( x - k ) / p ; k = x + y ; } t = t - k ; l += t / p ; cout << l << endl ; } 
int main ( ) { const int maxn = <LITERAL> ; long long n , L , a , t , l ; cin >> n >> L >> a ; int ans = <LITERAL> ; int arr1 [ maxn ] , arr2 [ maxn ] ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> t >> l ; arr1 [ i ] = t ; arr2 [ i ] = l ; } for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( ( arr1 [ j + <LITERAL> ] - arr1 [ j ] - arr2 [ j ] ) >= a ) { ans += ( arr1 [ j + <LITERAL> ] - arr1 [ j ] - arr2 [ j ] ) / a ; } } ans += arr1 [ <LITERAL> ] / a + ( L - arr1 [ n - <LITERAL> ] - arr2 [ n - <LITERAL> ] ) / a ; cout << ans << endl ; } 
int you ( my x , my y ) { return x . b < y . b ; } 
int main ( ) { int n , l , a , ans = <LITERAL> , now = <LITERAL> ; scanf ( <LITERAL> , & n , & l , & a ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int lon ; scanf ( <LITERAL> , & c [ i ] . b , & lon ) ; c [ i ] . e = c [ i ] . b + lon ; } sort ( c + <LITERAL> , c + <LITERAL> + n , you ) ; c [ <LITERAL> ] . e = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { ans += ( c [ i ] . b - c [ i - <LITERAL> ] . e ) / a ; if ( i == n ) { ans += ( l - c [ i ] . e ) / a ; } } if ( n == <LITERAL> ) ans = l / a ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , l , a ; scanf ( <LITERAL> , & n , & l , & a ) ; int sum = <LITERAL> , ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x , y ; scanf ( <LITERAL> , & x , & y ) ; ans += ( x - sum ) / a ; sum = x + y ; } printf ( <LITERAL> , ans + ( l - sum ) / a ) ; return <LITERAL> ; } 
int main ( ) { int n , L , a ; scanf ( <LITERAL> , & n , & L , & a ) ; int lastend = <LITERAL> , ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int t , l ; scanf ( <LITERAL> , & t , & l ) ; ans += ( t - lastend ) / a ; lastend = t + l ; } ans += ( L - lastend ) / a ; printf ( <LITERAL> , ans ) ; } 
int main ( ) { int n , L , a ; cin >> n >> L >> a ; int ans = <LITERAL> ; if ( n != <LITERAL> ) { int t [ n ] , l [ n ] ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> t [ i ] >> l [ i ] ; } if ( t [ <LITERAL> ] / a > <LITERAL> ) ans = ans + t [ <LITERAL> ] / a ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { int d = ( t [ i + <LITERAL> ] - t [ i ] - l [ i ] ) / a ; if ( d > <LITERAL> ) ans = ans + d ; } int f = ( L - t [ n - <LITERAL> ] - l [ n - <LITERAL> ] ) / a ; if ( f > <LITERAL> ) ans = ans + f ; } else { ans = L / a ; } cout << ans ; } 
int main ( ) { int n , L , l , r , a , now = <LITERAL> , ans = <LITERAL> ; scanf ( <LITERAL> , & n , & L , & a ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & l , & r ) ; ans += ( l - now ) / a , now = l + r ; } ans += ( L - now ) / a ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { cin >> n >> worktime >> breaktime ; if ( n == <LITERAL> ) { cout << worktime / breaktime ; return <LITERAL> ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; } for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( ( a [ i + <LITERAL> ] - a [ i ] - b [ i ] ) >= breaktime ) { tim [ t ] = a [ i + <LITERAL> ] - a [ i ] - b [ i ] ; t ++ ; } } if ( a [ <LITERAL> ] >= breaktime ) { tim [ t ] = a [ <LITERAL> ] ; t ++ ; } if ( ( worktime - a [ n - <LITERAL> ] - b [ n - <LITERAL> ] ) >= breaktime ) { tim [ t ] = worktime - a [ n - <LITERAL> ] - b [ n - <LITERAL> ] ; t ++ ; } for ( int i = <LITERAL> ; i < t ; i ++ ) { cont += tim [ i ] / breaktime ; } cout << cont ; return <LITERAL> ; } 
int main ( ) { int n , L , a , l = <LITERAL> , x , y , r = <LITERAL> ; scanf ( <LITERAL> , & n , & L , & a ) ; while ( n -- ) { scanf ( <LITERAL> , & x , & y ) ; r += ( x - l ) / a ; l = x + y ; } r += ( L - l ) / a ; printf ( <LITERAL> , r ) ; } 
int main ( ) { int n ; long long L , a ; cin >> n >> L >> a ; int t = <LITERAL> ; long long h , l ; if ( n == <LITERAL> ) { cout << L / a ; return <LITERAL> ; } else { while ( t < n ) { cin >> h >> l ; time [ t ] = h ; T [ t ] = l ; t ++ ; } long long count = <LITERAL> ; for ( int i = <LITERAL> ; i < t ; i ++ ) { if ( i == t - <LITERAL> ) { if ( time [ i ] + T [ i ] + a <= L ) { count += ( L - time [ i ] - T [ i ] ) / a ; } } else { if ( time [ i ] + T [ i ] + a <= time [ i + <LITERAL> ] ) { count += ( time [ i + <LITERAL> ] - time [ i ] - T [ i ] ) / a ; } } if ( i == <LITERAL> ) { if ( time [ i ] >= a ) { count += time [ i ] / a ; } } } cout << count ; } } 
int main ( ) { scanf ( <LITERAL> , & n , & l , & a ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & from [ i ] , & to [ i ] ) ; to [ i ] += from [ i ] ; } from [ <LITERAL> ] = <LITERAL> ; to [ <LITERAL> ] = <LITERAL> ; from [ n + <LITERAL> ] = l ; to [ n + <LITERAL> ] = l ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { ans += ( from [ i + <LITERAL> ] - to [ i ] ) / a ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , L , a ; int count = <LITERAL> ; scanf ( <LITERAL> , & n , & L , & a ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & s [ i ] , & l [ i ] ) ; } count += s [ <LITERAL> ] / a ; if ( n ) count += ( L - s [ n - <LITERAL> ] - l [ n - <LITERAL> ] ) / a ; else count += L / a ; for ( int i = <LITERAL> ; i < n ; i ++ ) { count += ( s [ i ] - s [ i - <LITERAL> ] - l [ i - <LITERAL> ] ) / a ; } printf ( <LITERAL> , count ) ; } 
int main ( ) { scanf ( <LITERAL> , & n , & l , & a ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & b [ i ] , & c [ i ] ) ; b [ n + <LITERAL> ] = l ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { long long t = b [ i + <LITERAL> ] - b [ i ] - c [ i ] ; ans += t / a ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & l , & a ) ; while ( n -- ) { scanf ( <LITERAL> , & start , & t ) ; ans += ( start - cur ) / a ; cur = start + t ; } ans += ( l - cur ) / a ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n , & len , & a ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int st , ti ; scanf ( <LITERAL> , & st , & ti ) ; ans += ( st - nowt ) / a ; nowt = st + ti ; } ans += ( len - nowt ) / a ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { scanf ( <LITERAL> , & n , & L , & a ) ; rep ( i , <LITERAL> , n ) { scanf ( <LITERAL> , & t , & l ) ; ans += ( t - last ) / a ; last = t + l ; } ans += ( L - last ) / a ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , l , a ; cin >> n >> l >> a ; int ans = <LITERAL> ; int t1 , l1 ; if ( n == <LITERAL> ) { cout << l / a << endl ; return <LITERAL> ; } cin >> x [ <LITERAL> ] >> y [ <LITERAL> ] ; ans += x [ <LITERAL> ] / a ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> x [ i ] >> y [ i ] ; ans += ( ( x [ i ] - ( x [ i - <LITERAL> ] + y [ i - <LITERAL> ] ) ) / a ) ; } ans += ( ( l - ( x [ n - <LITERAL> ] + y [ n - <LITERAL> ] ) ) / a ) ; cout << ans << endl ; return <LITERAL> ; } 
bool comp ( inv a , inv b ) { return a . l < b . l ; } 
int main ( ) { int n , m , k , cnt = <LITERAL> , f = <LITERAL> ; scanf ( <LITERAL> , & n , & m , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & arr [ i ] . l , & arr [ i ] . r ) ; arr [ i ] . r += arr [ i ] . l ; } std :: sort ( arr , arr + n , comp ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cnt += ( arr [ i ] . l - f ) / k ; f = arr [ i ] . r ; } cnt += ( m - f ) / k ; printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
int main ( void ) { int customer ; int k = <LITERAL> ; long long work ; long long smoke ; scanf ( <LITERAL> , & customer , & work , & smoke ) ; long long * arrive = ( long long * ) malloc ( sizeof ( long long ) * ( customer + <LITERAL> ) ) ; long long * cost = ( long long * ) malloc ( sizeof ( long long ) * ( customer + <LITERAL> ) ) ; arrive [ <LITERAL> ] = <LITERAL> ; cost [ <LITERAL> ] = <LITERAL> ; arrive [ customer + <LITERAL> ] = work ; cost [ customer + <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < customer + <LITERAL> ; i ++ ) { scanf ( <LITERAL> , & arrive [ i ] , & cost [ i ] ) ; k += ( arrive [ i ] - arrive [ i - <LITERAL> ] - cost [ i - <LITERAL> ] ) / smoke ; } k += ( arrive [ customer + <LITERAL> ] - arrive [ customer ] - cost [ customer ] ) / smoke ; printf ( <LITERAL> , k ) ; free ( arrive ) ; free ( cost ) ; } 
int main ( ) { int n , L , a , i , ans ; node cos [ <LITERAL> ] ; cin >> n >> L >> a ; for ( i = <LITERAL> ; i < n ; i ++ ) { cin >> cos [ i ] . t >> cos [ i ] . l ; } if ( n == <LITERAL> ) cout << L / a << endl ; else { ans = <LITERAL> ; ans += cos [ <LITERAL> ] . t / a ; for ( i = <LITERAL> ; i < n ; i ++ ) { ans += ( cos [ i ] . t - cos [ i - <LITERAL> ] . t - cos [ i - <LITERAL> ] . l ) / a ; } ans += ( L - cos [ n - <LITERAL> ] . t - cos [ n - <LITERAL> ] . l ) / a ; cout << ans << endl ; } } 
bool judge ( int x , int y ) { for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) if ( a [ x + dx [ i ] ] [ y + dy [ i ] ] != <LITERAL> ) return false ; return true ; } 
void work ( int x , int y ) { for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) map [ x + dx [ i ] ] [ y + dy [ i ] ] = <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , a [ i ] + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = <LITERAL> ; j <= m ; j ++ ) map [ i ] [ j ] = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) for ( int j = <LITERAL> ; j < m ; j ++ ) if ( judge ( i , j ) ) work ( i , j ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = <LITERAL> ; j <= m ; j ++ ) if ( a [ i ] [ j ] != map [ i ] [ j ] ) return printf ( <LITERAL> ) , <LITERAL> ; printf ( <LITERAL> ) ; return <LITERAL> ; } 
bool chk ( int x , int y ) { for ( int i = - <LITERAL> ; i <= <LITERAL> ; i ++ ) { for ( int j = - <LITERAL> ; j <= <LITERAL> ; j ++ ) { if ( i == <LITERAL> && j == <LITERAL> ) continue ; if ( ! store [ x + i ] [ y + j ] ) return false ; } } return true ; } 
int main ( ) { int n , m ; scanf ( <LITERAL> , & n , & m ) ; char ch ; scanf ( <LITERAL> , & ch ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j <= m ; j ++ ) { scanf ( <LITERAL> , & ch ) ; if ( ch == <LITERAL> ) store [ i ] [ j ] = true ; } } for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < m - <LITERAL> ; j ++ ) { if ( chk ( i , j ) ) { for ( int p = - <LITERAL> ; p <= <LITERAL> ; p ++ ) for ( int q = - <LITERAL> ; q <= <LITERAL> ; q ++ ) if ( ! ( p == <LITERAL> && q == <LITERAL> ) ) store_cp [ i + p ] [ j + q ] = true ; } } } } for ( int i = <LITERAL> ; i < n ; i ++ ) for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( ! store [ i ] [ j ] == store_cp [ i ] [ j ] ) { printf ( <LITERAL> ) ; return <LITERAL> ; } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
void color ( int x , int y ) { b [ x - <LITERAL> ] [ y - <LITERAL> ] = <LITERAL> ; b [ x - <LITERAL> ] [ y ] = <LITERAL> ; b [ x - <LITERAL> ] [ y + <LITERAL> ] = <LITERAL> ; b [ x ] [ y - <LITERAL> ] = <LITERAL> ; b [ x ] [ y + <LITERAL> ] = <LITERAL> ; b [ x + <LITERAL> ] [ y - <LITERAL> ] = <LITERAL> ; b [ x + <LITERAL> ] [ y ] = <LITERAL> ; b [ x + <LITERAL> ] [ y + <LITERAL> ] = <LITERAL> ; } 
bool check ( int x , int y ) { if ( x + <LITERAL> > n || y + <LITERAL> > m ) return false ; if ( a [ x - <LITERAL> ] [ y - <LITERAL> ] == <LITERAL> ) return false ; if ( a [ x - <LITERAL> ] [ y ] == <LITERAL> ) return false ; if ( a [ x - <LITERAL> ] [ y + <LITERAL> ] == <LITERAL> ) return false ; if ( a [ x ] [ y - <LITERAL> ] == <LITERAL> ) return false ; if ( a [ x ] [ y + <LITERAL> ] == <LITERAL> ) return false ; if ( a [ x + <LITERAL> ] [ y - <LITERAL> ] == <LITERAL> ) return false ; if ( a [ x + <LITERAL> ] [ y ] == <LITERAL> ) return false ; if ( a [ x + <LITERAL> ] [ y + <LITERAL> ] == <LITERAL> ) return false ; return true ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = m ; j >= <LITERAL> ; j -- ) a [ i ] [ j ] = a [ i ] [ j - <LITERAL> ] ; for ( int i = <LITERAL> ; i <= max ( n , m ) ; i ++ ) { a [ i ] [ <LITERAL> ] = <LITERAL> , a [ <LITERAL> ] [ i ] = <LITERAL> ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = <LITERAL> ; j <= m ; j ++ ) if ( check ( i , j ) ) color ( i , j ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = <LITERAL> ; j <= m ; j ++ ) { if ( a [ i ] [ j ] == <LITERAL> && b [ i ] [ j ] == <LITERAL> ) { printf ( <LITERAL> ) ; return <LITERAL> ; } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
bool check ( int x , int y ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { if ( i == <LITERAL> && j == <LITERAL> ) continue ; if ( i + x > n || j + y > m ) return <LITERAL> ; if ( ! f [ i + x ] [ j + y ] ) return <LITERAL> ; } } return <LITERAL> ; } 
void mark ( int x , int y ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { if ( i == <LITERAL> && j == <LITERAL> ) continue ; g [ x + i ] [ y + j ] = <LITERAL> ; } } } 
int main ( ) { # ifdef WK freopen ( <LITERAL> , <LITERAL> , stdin ) ; # endif scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , ch + <LITERAL> ) ; for ( int j = <LITERAL> ; j <= m ; j ++ ) { f [ i ] [ j ] = ( ch [ j ] == <LITERAL> ) ; } } for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= m ; j ++ ) { if ( check ( i , j ) ) mark ( i , j ) ; } } for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= m ; j ++ ) { if ( f [ i ] [ j ] != g [ i ] [ j ] ) { printf ( <LITERAL> ) ; return <LITERAL> ; } } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
bool check ( int i , int j ) { if ( s [ i ] [ j ] != <LITERAL> || s [ i ] [ j + <LITERAL> ] != <LITERAL> || s [ i ] [ j + <LITERAL> ] != <LITERAL> ) return <LITERAL> ; if ( s [ i + <LITERAL> ] [ j ] != <LITERAL> || s [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> ) return <LITERAL> ; if ( s [ i + <LITERAL> ] [ j ] != <LITERAL> || s [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> || s [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> ) return <LITERAL> ; return <LITERAL> ; } 
void solve ( ) { n = read ( ) ; m = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , s [ i ] + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j <= m - <LITERAL> ; j ++ ) { if ( ! check ( i , j ) ) continue ; vis [ i ] [ j ] = vis [ i ] [ j + <LITERAL> ] = vis [ i ] [ j + <LITERAL> ] = <LITERAL> ; vis [ i + <LITERAL> ] [ j ] = vis [ i + <LITERAL> ] [ j + <LITERAL> ] = <LITERAL> ; vis [ i + <LITERAL> ] [ j ] = vis [ i + <LITERAL> ] [ j + <LITERAL> ] = vis [ i + <LITERAL> ] [ j + <LITERAL> ] = <LITERAL> ; } } bool flag = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= m ; j ++ ) { if ( s [ i ] [ j ] == <LITERAL> && ! vis [ i ] [ j ] ) flag = <LITERAL> ; } } printf ( <LITERAL> , flag ? <LITERAL> : <LITERAL> ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
void BFS ( int x , int y ) { if ( x + <LITERAL> > n || y + <LITERAL> > m || x + <LITERAL> > n || y + <LITERAL> > m ) { return ; } if ( a [ x ] [ y ] == <LITERAL> || a [ x + <LITERAL> ] [ y ] == <LITERAL> || a [ x + <LITERAL> ] [ y ] == <LITERAL> || a [ x ] [ y + <LITERAL> ] == <LITERAL> || a [ x ] [ y + <LITERAL> ] == <LITERAL> || a [ x + <LITERAL> ] [ y + <LITERAL> ] == <LITERAL> || a [ x + <LITERAL> ] [ y + <LITERAL> ] == <LITERAL> || a [ x + <LITERAL> ] [ y + <LITERAL> ] == <LITERAL> ) { return ; } p [ x ] [ y ] = p [ x + <LITERAL> ] [ y ] = p [ x + <LITERAL> ] [ y ] = p [ x ] [ y + <LITERAL> ] = p [ x ] [ y + <LITERAL> ] = p [ x + <LITERAL> ] [ y + <LITERAL> ] = p [ x + <LITERAL> ] [ y + <LITERAL> ] = p [ x + <LITERAL> ] [ y + <LITERAL> ] = <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; for ( register int i = <LITERAL> ; i <= n ; ++ i ) for ( register int j = <LITERAL> ; j <= m ; ++ j ) cin >> a [ i ] [ j ] ; for ( register int i = <LITERAL> ; i <= n ; ++ i ) for ( register int j = <LITERAL> ; j <= m ; ++ j ) if ( a [ i ] [ j ] == <LITERAL> ) BFS ( i , j ) ; for ( register int i = <LITERAL> ; i <= n ; ++ i ) for ( register int j = <LITERAL> ; j <= m ; ++ j ) if ( a [ i ] [ j ] == <LITERAL> && ! p [ i ] [ j ] ) { cout << <LITERAL> << endl ; return <LITERAL> ; } puts ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , m , i , j ; cin >> n >> m ; for ( i = <LITERAL> ; i <= n ; i ++ ) { for ( j = <LITERAL> ; j <= m ; j ++ ) { char ch ; cin >> ch ; if ( ch == <LITERAL> ) map [ i ] [ j ] = <LITERAL> ; else map [ i ] [ j ] = <LITERAL> ; if ( map [ i ] [ j ] == <LITERAL> ) { if ( i - <LITERAL> > <LITERAL> ) can [ i - <LITERAL> ] [ j ] = <LITERAL> ; if ( i + <LITERAL> < n ) can [ i + <LITERAL> ] [ j ] = <LITERAL> ; if ( j - <LITERAL> > <LITERAL> ) can [ i ] [ j - <LITERAL> ] = <LITERAL> ; if ( j + <LITERAL> < m ) can [ i ] [ j + <LITERAL> ] = <LITERAL> ; if ( i - <LITERAL> > <LITERAL> && j - <LITERAL> > <LITERAL> ) can [ i - <LITERAL> ] [ j - <LITERAL> ] = <LITERAL> ; if ( i + <LITERAL> < n && j - <LITERAL> > <LITERAL> ) can [ i + <LITERAL> ] [ j - <LITERAL> ] = <LITERAL> ; if ( i - <LITERAL> > <LITERAL> && j + <LITERAL> < m ) can [ i - <LITERAL> ] [ j + <LITERAL> ] = <LITERAL> ; if ( i + <LITERAL> < n && j + <LITERAL> < m ) can [ i + <LITERAL> ] [ j + <LITERAL> ] = <LITERAL> ; } } } bool flag = true ; for ( i = <LITERAL> ; i <= n ; i ++ ) { for ( j = <LITERAL> ; j <= m ; j ++ ) { if ( map [ i ] [ j ] == <LITERAL> ) { if ( i - <LITERAL> > <LITERAL> && can [ i - <LITERAL> ] [ j ] == <LITERAL> ) continue ; if ( i + <LITERAL> < n && can [ i + <LITERAL> ] [ j ] == <LITERAL> ) continue ; if ( j - <LITERAL> > <LITERAL> && can [ i ] [ j - <LITERAL> ] == <LITERAL> ) continue ; if ( j + <LITERAL> < m && can [ i ] [ j + <LITERAL> ] == <LITERAL> ) continue ; if ( i - <LITERAL> > <LITERAL> && j - <LITERAL> > <LITERAL> && can [ i - <LITERAL> ] [ j - <LITERAL> ] == <LITERAL> ) continue ; if ( i + <LITERAL> < n && j - <LITERAL> > <LITERAL> && can [ i + <LITERAL> ] [ j - <LITERAL> ] == <LITERAL> ) continue ; if ( i - <LITERAL> > <LITERAL> && j + <LITERAL> < m && can [ i - <LITERAL> ] [ j + <LITERAL> ] == <LITERAL> ) continue ; if ( i + <LITERAL> < n && j + <LITERAL> < m && can [ i + <LITERAL> ] [ j + <LITERAL> ] == <LITERAL> ) continue ; flag = false ; break ; } if ( flag == false ) break ; } } if ( flag == true ) cout << <LITERAL> << endl ; else cout << <LITERAL> << endl ; } 
int main ( ) { cin >> n >> m ; for ( int i = <LITERAL> ; i <= n ; ++ i ) scanf ( <LITERAL> , s [ i ] + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) for ( int j = <LITERAL> ; j <= m ; ++ j ) if ( s [ i + <LITERAL> ] [ j ] == <LITERAL> && s [ i ] [ j + <LITERAL> ] == <LITERAL> && s [ i + <LITERAL> ] [ j - <LITERAL> ] == <LITERAL> && s [ i - <LITERAL> ] [ j ] == <LITERAL> && s [ i ] [ j - <LITERAL> ] == <LITERAL> && s [ i + <LITERAL> ] [ j + <LITERAL> ] == <LITERAL> && s [ i - <LITERAL> ] [ j + <LITERAL> ] == <LITERAL> && s [ i - <LITERAL> ] [ j - <LITERAL> ] == <LITERAL> ) { vis [ i + <LITERAL> ] [ j ] = true ; vis [ i ] [ j + <LITERAL> ] = true ; vis [ i + <LITERAL> ] [ j - <LITERAL> ] = true ; vis [ i - <LITERAL> ] [ j ] = true ; vis [ i ] [ j - <LITERAL> ] = true ; vis [ i + <LITERAL> ] [ j + <LITERAL> ] = true ; vis [ i - <LITERAL> ] [ j + <LITERAL> ] = true ; vis [ i - <LITERAL> ] [ j - <LITERAL> ] = true ; } bool flag = true ; for ( int i = <LITERAL> ; i <= n ; ++ i ) for ( int j = <LITERAL> ; j <= m ; ++ j ) if ( s [ i ] [ j ] == <LITERAL> && ! vis [ i ] [ j ] ) flag = false ; if ( flag ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; rep ( i , <LITERAL> , n ) scanf ( <LITERAL> , a [ i ] + <LITERAL> ) ; rep ( i , <LITERAL> , n ) { rep ( j , <LITERAL> , m ) { if ( i >= <LITERAL> && i <= n - <LITERAL> && j >= <LITERAL> && j <= m - <LITERAL> ) { if ( a [ i - <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> ) continue ; if ( a [ i - <LITERAL> ] [ j ] != <LITERAL> ) continue ; if ( a [ i - <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> ) continue ; if ( a [ i ] [ j - <LITERAL> ] != <LITERAL> ) continue ; if ( a [ i ] [ j + <LITERAL> ] != <LITERAL> ) continue ; if ( a [ i + <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> ) continue ; if ( a [ i + <LITERAL> ] [ j ] != <LITERAL> ) continue ; if ( a [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> ) continue ; vis [ i - <LITERAL> ] [ j - <LITERAL> ] = <LITERAL> ; vis [ i - <LITERAL> ] [ j ] = <LITERAL> ; vis [ i - <LITERAL> ] [ j + <LITERAL> ] = <LITERAL> ; vis [ i ] [ j - <LITERAL> ] = <LITERAL> ; vis [ i ] [ j + <LITERAL> ] = <LITERAL> ; vis [ i + <LITERAL> ] [ j - <LITERAL> ] = <LITERAL> ; vis [ i + <LITERAL> ] [ j ] = <LITERAL> ; vis [ i + <LITERAL> ] [ j + <LITERAL> ] = <LITERAL> ; } } } rep ( i , <LITERAL> , n ) rep ( j , <LITERAL> , m ) { if ( a [ i ] [ j ] == <LITERAL> && vis [ i ] [ j ] == <LITERAL> ) flag = <LITERAL> ; } if ( flag ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , m ; scanf ( <LITERAL> , & m , & n ) ; for ( int i = <LITERAL> ; i < m ; i ++ ) { scanf ( <LITERAL> , board [ i ] ) ; } for ( int i = <LITERAL> ; i < m ; i ++ ) { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( board [ i ] [ j ] == <LITERAL> ) { if ( i > <LITERAL> && j > <LITERAL> && board [ i - <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j ] != <LITERAL> && board [ i - <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j ] != <LITERAL> && board [ i ] [ j - <LITERAL> ] != <LITERAL> && board [ i ] [ j - <LITERAL> ] != <LITERAL> && board [ i ] [ j ] != <LITERAL> ) { board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j ] = board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j ] = board [ i ] [ j - <LITERAL> ] = board [ i ] [ j - <LITERAL> ] = board [ i ] [ j ] = <LITERAL> ; } else if ( i > <LITERAL> && i < m - <LITERAL> && j > <LITERAL> && board [ i - <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j ] != <LITERAL> && board [ i ] [ j - <LITERAL> ] != <LITERAL> && board [ i ] [ j ] != <LITERAL> && board [ i + <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j ] != <LITERAL> ) { board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j ] = board [ i ] [ j - <LITERAL> ] = board [ i ] [ j ] = board [ i + <LITERAL> ] [ j - <LITERAL> ] = board [ i + <LITERAL> ] [ j - <LITERAL> ] = board [ i + <LITERAL> ] [ j ] = <LITERAL> ; } else if ( i < m - <LITERAL> && j > <LITERAL> && board [ i ] [ j - <LITERAL> ] != <LITERAL> && board [ i ] [ j - <LITERAL> ] != <LITERAL> && board [ i ] [ j ] != <LITERAL> && board [ i + <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j ] != <LITERAL> && board [ i + <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j ] != <LITERAL> ) { board [ i ] [ j - <LITERAL> ] = board [ i ] [ j - <LITERAL> ] = board [ i ] [ j ] = board [ i + <LITERAL> ] [ j - <LITERAL> ] = board [ i + <LITERAL> ] [ j ] = board [ i + <LITERAL> ] [ j - <LITERAL> ] = board [ i + <LITERAL> ] [ j - <LITERAL> ] = board [ i + <LITERAL> ] [ j ] = <LITERAL> ; } else if ( i > <LITERAL> && j < n - <LITERAL> && board [ i - <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j ] != <LITERAL> && board [ i - <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j ] != <LITERAL> && board [ i ] [ j + <LITERAL> ] != <LITERAL> && board [ i ] [ j + <LITERAL> ] != <LITERAL> && board [ i ] [ j ] != <LITERAL> ) { board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j ] = board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j ] = board [ i ] [ j - <LITERAL> ] = board [ i ] [ j - <LITERAL> ] = board [ i ] [ j ] = <LITERAL> ; } else if ( i > <LITERAL> && i < m - <LITERAL> && j < n - <LITERAL> && board [ i - <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j ] != <LITERAL> && board [ i ] [ j + <LITERAL> ] != <LITERAL> && board [ i ] [ j ] != <LITERAL> && board [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j ] != <LITERAL> ) { board [ i - <LITERAL> ] [ j + <LITERAL> ] = board [ i - <LITERAL> ] [ j + <LITERAL> ] = board [ i - <LITERAL> ] [ j ] = board [ i ] [ j + <LITERAL> ] = board [ i ] [ j ] = board [ i + <LITERAL> ] [ j + <LITERAL> ] = board [ i + <LITERAL> ] [ j + <LITERAL> ] = board [ i + <LITERAL> ] [ j ] = <LITERAL> ; } else if ( i < m - <LITERAL> && j < n - <LITERAL> && board [ i ] [ j + <LITERAL> ] != <LITERAL> && board [ i ] [ j + <LITERAL> ] != <LITERAL> && board [ i ] [ j ] != <LITERAL> && board [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j ] != <LITERAL> && board [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j ] != <LITERAL> ) { board [ i ] [ j + <LITERAL> ] = board [ i ] [ j + <LITERAL> ] = board [ i ] [ j ] = board [ i + <LITERAL> ] [ j + <LITERAL> ] = board [ i + <LITERAL> ] [ j ] = board [ i + <LITERAL> ] [ j + <LITERAL> ] = board [ i + <LITERAL> ] [ j + <LITERAL> ] = board [ i + <LITERAL> ] [ j ] = <LITERAL> ; } else if ( i > <LITERAL> && j > <LITERAL> && j < n - <LITERAL> && board [ i - <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j ] != <LITERAL> && board [ i - <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i - <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i ] [ j - <LITERAL> ] != <LITERAL> && board [ i ] [ j ] != <LITERAL> && board [ i ] [ j + <LITERAL> ] != <LITERAL> ) { board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j ] = board [ i - <LITERAL> ] [ j + <LITERAL> ] = board [ i - <LITERAL> ] [ j - <LITERAL> ] = board [ i - <LITERAL> ] [ j + <LITERAL> ] = board [ i ] [ j - <LITERAL> ] = board [ i ] [ j ] = board [ i ] [ j + <LITERAL> ] = <LITERAL> ; } else if ( i < m - <LITERAL> && j > <LITERAL> && j < n - <LITERAL> && board [ i ] [ j - <LITERAL> ] != <LITERAL> && board [ i ] [ j ] != <LITERAL> && board [ i ] [ j + <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j - <LITERAL> ] != <LITERAL> && board [ i + <LITERAL> ] [ j ] != <LITERAL> && board [ i + <LITERAL> ] [ j + <LITERAL> ] != <LITERAL> ) { board [ i ] [ j - <LITERAL> ] = board [ i ] [ j ] = board [ i ] [ j + <LITERAL> ] = board [ i + <LITERAL> ] [ j - <LITERAL> ] = board [ i + <LITERAL> ] [ j + <LITERAL> ] = board [ i + <LITERAL> ] [ j - <LITERAL> ] = board [ i + <LITERAL> ] [ j ] = board [ i + <LITERAL> ] [ j + <LITERAL> ] = <LITERAL> ; } else { printf ( <LITERAL> ) ; return <LITERAL> ; } } } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , m ; scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , s [ i ] ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( s [ i ] [ j ] == <LITERAL> ) { bool w = <LITERAL> ; for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) { bool fl = <LITERAL> ; for ( int l = <LITERAL> ; l < <LITERAL> ; l ++ ) { int x = a [ l ] [ <LITERAL> ] + i - a [ k ] [ <LITERAL> ] , y = a [ l ] [ <LITERAL> ] + j - a [ k ] [ <LITERAL> ] ; if ( x >= n || y >= m || x < <LITERAL> || y < <LITERAL> || s [ x ] [ y ] != <LITERAL> ) { fl = <LITERAL> ; break ; } } if ( fl ) { w = <LITERAL> ; break ; } } if ( ! w ) return puts ( <LITERAL> ) , <LITERAL> ; } } } puts ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( void ) { int m , n ; scanf ( <LITERAL> , & m , & n ) ; for ( int i = <LITERAL> ; i <= m ; i ++ ) { for ( int j = <LITERAL> ; j <= n ; j ++ ) map [ i ] [ j ] = getchar ( ) ; getchar ( ) ; } for ( int i = <LITERAL> ; i <= m ; i ++ ) for ( int j = <LITERAL> ; j <= n ; j ++ ) { print_map [ i ] [ j ] = <LITERAL> ; if ( map [ i ] [ j ] == <LITERAL> ) for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) flag [ i + dx [ k ] ] [ j + dy [ k ] ] = <LITERAL> ; } for ( int i = <LITERAL> ; i < m ; i ++ ) for ( int j = <LITERAL> ; j < n ; j ++ ) if ( ! flag [ i ] [ j ] ) for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) print_map [ i + dx [ k ] ] [ j + dy [ k ] ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= m ; i ++ ) for ( int j = <LITERAL> ; j <= n ; j ++ ) if ( print_map [ i ] [ j ] != map [ i ] [ j ] ) { printf ( <LITERAL> ) ; return <LITERAL> ; } printf ( <LITERAL> ) ; return <LITERAL> ; } 
bool check ( int x , int y ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( mp [ x + drx [ i ] ] [ y + dry [ i ] ] != <LITERAL> ) return <LITERAL> ; } return <LITERAL> ; } 
void change ( int x , int y ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { mp2 [ x + drx [ i ] ] [ y + dry [ i ] ] = <LITERAL> ; } } 
bool check2 ( int n , int m ) { for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= m ; j ++ ) { if ( mp [ i ] [ j ] == <LITERAL> ) { if ( mp2 [ i ] [ j ] != <LITERAL> ) return <LITERAL> ; } else { if ( mp2 [ i ] [ j ] == <LITERAL> ) return <LITERAL> ; } } } return <LITERAL> ; } 
int main ( ) { int n , m ; scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= m ; j ++ ) scanf ( <LITERAL> , & mp [ i ] [ j ] ) ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( check ( i , j ) ) { change ( i , j ) ; } } } if ( check2 ( n , m ) ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { cin >> n ; int n1 = n ; while ( n -- ) { cin >> a >> b >> c >> d ; res [ n ] += a / d ; res [ n ] += ( res [ n ] / b ) * c ; } for ( int i = n1 - <LITERAL> ; i >= <LITERAL> ; i -- ) { cout << res [ i ] << endl ; } return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { scanf ( <LITERAL> , & s , & a , & b , & c ) ; int num = s / c ; printf ( <LITERAL> , num / a * ( a + b ) + num % a ) ; } return <LITERAL> ; } 
void work ( ) { int s , a , b , c ; long long d ; scanf ( <LITERAL> , & s , & a , & b , & c ) ; d = s / c ; d += ( d / a ) * b ; printf ( <LITERAL> , d ) ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) work ( ) ; return <LITERAL> ; } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { long long int s , a , b , c , l , l1 , l2 , ans ; cin >> s >> a >> b >> c ; l = s / c ; if ( l < a ) { ans = l ; } else { l1 = l / a ; l2 = l1 * b ; ans = l2 + l ; } cout << ans << endl ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { long long s , a , b , c ; scanf ( <LITERAL> , & s , & a , & b , & c ) ; long long num = s / c ; long long maxget = ( num / a ) * b ; long long tot = maxget + num ; printf ( <LITERAL> , tot ) ; } return <LITERAL> ; } 
int main ( ) { long long t , s , a , b , c ; cin >> t ; while ( t -- ) { cin >> s >> a >> b >> c ; long long tt = a * c ; if ( s < tt ) { { cout << s / c << endl ; } else { long long ttt = ( s / tt ) * ( a + b ) + ( s % tt ) / c ; cout << ttt << endl ; } } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i < t ; i ++ ) { scanf ( <LITERAL> , & s , & a , & b , & c ) ; long long ans = s / c + ( ( s / c ) / a ) * b ; printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
int main ( ) { int t ; cin >> t ; for ( int i = <LITERAL> ; i < t ; i ++ ) { int alm , mbl , prl , dj ; cin >> alm >> mbl >> prl >> dj ; long long int zz ; long long int zl ; zl = int ( alm / dj ) ; long long int tl ; tl = int ( zl / mbl ) ; zz = zl + tl * prl ; cout << zz << endl ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { long long s , a , b , c , ans = <LITERAL> , buy , free ; scanf ( <LITERAL> , & s , & a , & b , & c ) ; buy = s / c ; free = ( buy / a ) * b ; ans = buy + free ; printf ( <LITERAL> , ans ) ; } } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { long long s , a , b , c ; scanf ( <LITERAL> , & s , & a , & b , & c ) ; long long num = s / c ; long long maxget = ( num / a ) * b ; long long tot = maxget + num ; printf ( <LITERAL> , tot ) ; } return <LITERAL> ; } 
int main ( ) { long long t , s , a , b , c ; cin >> t ; long long arr [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < t ; i ++ ) { cin >> s >> a >> b >> c ; long long temp1 = s / ( a * c ) * b ; long long temp2 = s / c + temp1 ; arr [ i ] = temp2 ; } for ( int j = <LITERAL> ; j < t ; j ++ ) cout << arr [ j ] << endl ; } 
int main ( ) { int n ; cin >> n ; int t = <LITERAL> ; long long s , a , b , c ; while ( t < n ) { long long count ; cin >> s >> a >> b >> c ; long long buy = s / c ; long long free = buy / a ; count = free * b + buy ; cout << count ; if ( t != n - <LITERAL> ) { cout << endl ; } t ++ ; } } 
int main ( ) { int t , i ; cin >> t ; for ( int i = <LITERAL> ; i < t ; i ++ ) { long long int s , a , b , c , j , m , n , ans ; cin >> s >> a >> b >> c ; j = s / c ; if ( j < a ) { ans = j ; } else { m = j / a ; n = m * b ; ans = n + j ; } cout << ans << endl ; } return <LITERAL> ; } 
int main ( ) { long long n , s , a , b , c ; scanf ( <LITERAL> , & n ) ; while ( n -- ) { scanf ( <LITERAL> , & s , & a , & b , & c ) ; printf ( <LITERAL> , s / c / a * b + s / c ) ; } return <LITERAL> ; } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { long long s , a , b , c ; scanf ( <LITERAL> , & s , & a , & b , & c ) ; printf ( <LITERAL> , s / c + s / a / c * b ) ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { long long s , a , b , c ; scanf ( <LITERAL> , & s , & a , & b , & c ) ; long long ans = s / ( a * c ) * ( a + b ) ; ans += s % ( a * c ) / c ; printf ( <LITERAL> , ans ) ; } } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { long long int s , a , b , c , m , n ; cin >> s >> a >> b >> c ; m = s / c ; n = ( m / a ) * b ; cout << m + n << endl ; } } 
int main ( ) { # ifdef WK freopen ( <LITERAL> , <LITERAL> , stdin ) ; # endif int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { LL s , b , c , a ; scanf ( <LITERAL> , & s , & a , & b , & c ) ; LL t = ( s / c ) ; LL u = ( t / a ) * b ; printf ( <LITERAL> , t + u ) ; } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; int i ; long long int num [ n + <LITERAL> ] , sum [ n + <LITERAL> ] , s [ n + <LITERAL> ] , a [ n + <LITERAL> ] , b [ n + <LITERAL> ] , c [ n + <LITERAL> ] ; for ( i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & s [ i ] , & a [ i ] , & b [ i ] , & c [ i ] ) ; num [ i ] = s [ i ] / c [ i ] ; if ( num [ i ] % a [ i ] == <LITERAL> ) sum [ i ] = ( num [ i ] / a [ i ] ) * ( a [ i ] + b [ i ] ) ; else sum [ i ] = ( num [ i ] / a [ i ] ) * ( a [ i ] + b [ i ] ) + num [ i ] - ( num [ i ] / a [ i ] ) * a [ i ] ; printf ( <LITERAL> , sum [ i ] ) ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { long long n , a , b , c ; scanf ( <LITERAL> , & n , & a , & b , & c ) ; long long num = n / ( a * c ) * a + b * ( n / ( a * c ) ) + ( n - ( n / ( c * a ) * a * c ) ) / c ; ; printf ( <LITERAL> , num ) ; } return <LITERAL> ; } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { long long s , a , b , c ; scanf ( <LITERAL> , & s , & a , & b , & c ) ; long long ans = s / ( a * c ) * b ; ans += s / c ; printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { s = read ( ) ; a = read ( ) ; b = read ( ) ; c = read ( ) ; ll t = s / ( a * c ) , p = s % ( a * c ) , ans = t * ( a + b ) ; ans += p / c ; printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = read ( ) ; while ( T -- ) solve ( ) ; } 
int main ( ) { long long t , s , a , b , c , i ; cin >> t ; for ( i = <LITERAL> ; i < t ; i ++ ) { cin >> s >> a >> b >> c ; int buy , free ; long long ans ; buy = s / c ; free = buy / a ; ans = buy + free * b ; cout << ans << endl ; } } 
int main ( void ) { long long k , t ; int n ; scanf ( <LITERAL> , & n ) ; long long * money = ( long long * ) malloc ( sizeof ( long long ) * n ) ; long long * num = ( long long * ) malloc ( sizeof ( long long ) * n ) ; long long * _free = ( long long * ) malloc ( sizeof ( long long ) * n ) ; long long * price = ( long long * ) malloc ( sizeof ( long long ) * n ) ; long long * sum = ( long long * ) malloc ( sizeof ( long long ) * n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & money [ i ] , & num [ i ] , & _free [ i ] , & price [ i ] ) ; k = money [ i ] / price [ i ] ; t = k / num [ i ] * _free [ i ] ; sum [ i ] = k + t ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { printf ( <LITERAL> , sum [ i ] ) ; } free ( money ) ; free ( num ) ; free ( _free ) ; free ( price ) ; free ( sum ) ; } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { long long a , b , c , s ; long long cnt = <LITERAL> ; scanf ( <LITERAL> , & s , & a , & b , & c ) ; while ( s >= a * c ) { cnt += s / ( a * c ) * ( a + b ) ; s = s - s / ( a * c ) * ( a * c ) ; } cnt += s / c ; printf ( <LITERAL> , cnt ) ; } } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & s , & a , & b , & c ) ; long long ans = <LITERAL> ; ans += s / c / a * b ; ans += s / c ; printf ( <LITERAL> , ans ) ; } } 
int main ( ) { int t ; long long s , a , b , p , ans = <LITERAL> ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { cin >> s >> a >> b >> p ; ans = ( s / p ) + ( s / p ) / a * b ; cout << ans << endl ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , & s , & a , & b , & c ) ; printf ( <LITERAL> , s / c + s / c / a * b ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & s , & a , & b , & c ) ; long long int tmp = s / c ; printf ( <LITERAL> , tmp + tmp / a * b ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; minheight = MAXN ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & height [ i ] ) ; maxheight = std :: max ( maxheight , height [ i ] ) ; minheight = std :: min ( minheight , height [ i ] ) ; ++ num [ <LITERAL> ] ; -- num [ height [ i ] + <LITERAL> ] ; } for ( int i = <LITERAL> ; i <= maxheight ; ++ i ) { num [ i ] += num [ i - <LITERAL> ] ; } for ( int i = maxheight ; i > minheight ; -- i ) { if ( sum + num [ i ] > k ) { ++ ans ; sum = num [ i ] ; } else { sum += num [ i ] ; } } ans += ( sum != <LITERAL> ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
bool check ( int x ) { LL sum = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) if ( h [ i ] > x ) sum += h [ i ] - x ; return sum <= k ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; mi = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , h + i ) , mi = min ( h [ i ] , mi ) , num [ h [ i ] ] ++ ; for ( int i = <LITERAL> ; i ; i -- ) num [ i ] += num [ i + <LITERAL> ] ; for ( int i = <LITERAL> ; i > mi ; i -- ) { if ( remain >= num [ i ] ) remain -= num [ i ] ; else remain = k - num [ i ] , ans ++ ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
bool cmp ( ll a , ll b ) { return a < b ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; rep ( i , <LITERAL> , n ) { scanf ( <LITERAL> , & h [ i ] ) ; maxx = max ( maxx , h [ i ] ) ; minn = min ( minn , h [ i ] ) ; } sort ( h + <LITERAL> , h + <LITERAL> + n , cmp ) ; for ( ll l = maxx - <LITERAL> ; l >= minn ; l -- ) { ll t = n - ( upper_bound ( h + <LITERAL> , h + <LITERAL> + n , l ) - h ) + <LITERAL> ; if ( s + t > k ) { ans ++ ; s = t ; } else s += t ; } if ( s ) ans ++ ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; int k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> h [ i ] ; } sort ( h , h + n ) ; ll mn = h [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < n ; i ++ ) { h [ i ] -= mn ; } ll cnt = <LITERAL> ; ll height = h [ n - <LITERAL> ] ; ll ret = <LITERAL> ; int num = n ; while ( height > <LITERAL> && num > <LITERAL> ) { ll sum = n - num ; int id = num - <LITERAL> ; height -- ; while ( id >= <LITERAL> && h [ id ] > height ) { sum ++ ; id -- ; } id ++ ; if ( sum + ret <= k ) { ret += sum ; num = id ; } else { cnt ++ ; ret = sum ; num = id ; } } if ( ret > <LITERAL> ) cnt ++ ; cout << cnt << endl ; return <LITERAL> ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; int minnum = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & height [ i ] ) ; minnum = min ( minnum , height [ i ] ) ; cnth [ height [ i ] ] ++ ; } block [ <LITERAL> ] = n ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { block [ i ] = block [ i - <LITERAL> ] - cnth [ i ] ; } } int tot = <LITERAL> ; int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i >= minnum ; i -- ) { if ( cnt + block [ i ] > k ) { { tot ++ ; cnt = <LITERAL> ; } cnt += block [ i ] ; } if ( cnt ) tot ++ ; printf ( <LITERAL> , tot ) ; return <LITERAL> ; } 
int main ( ) { int n , k ; int maxH = <LITERAL> , minH = <LITERAL> ; cin >> n >> k ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> towers [ i ] ; maxH = MAX ( maxH , towers [ i ] ) ; minH = MIN ( minH , towers [ i ] ) ; b [ towers [ i ] ] ++ ; ; } int cnt = <LITERAL> , m = <LITERAL> ; ; for ( int i = maxH ; i > minH ; i -- ) { m += b [ i ] ; ; ; b [ i - <LITERAL> ] += b [ i ] ; if ( m > k ) { b [ i - <LITERAL> ] -= b [ i ] ; ; i ++ ; m = <LITERAL> ; cnt ++ ; } } } if ( m > <LITERAL> ) ) cnt ++ ; printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
bool cmp ( int a , int b ) { return a > b ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , h + i ) ; std :: sort ( h + <LITERAL> , h + n + <LITERAL> , cmp ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) h [ i ] -= h [ n ] ; h [ <LITERAL> ] = h [ <LITERAL> ] ; int cost = <LITERAL> , ans = <LITERAL> , hnow = h [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int cost0 = cost ; cost += ( i - <LITERAL> ) * ( hnow - h [ i ] ) ; if ( cost <= k ) { hnow = h [ i ] ; ; continue ; } else { if ( cost0 ) { i -- ; int delta = ( k - cost0 ) / i ; hnow = h [ i ] - delta ; ans ++ ; cost = <LITERAL> ; ; } else { i -- ; int delta = k / i ; int steps = ( hnow - h [ i + <LITERAL> ] ) / delta ; hnow -= delta * steps ; ans += steps ; cost = <LITERAL> ; ; } } } if ( cost ) ans ++ ; printf ( <LITERAL> , ans ) ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; k = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { h [ i ] = read ( ) ; m = max ( m , h [ i ] ) ; mi = min ( mi , h [ i ] ) ; } m -= mi ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { h [ i ] -= mi ; if ( h [ i ] ) c [ <LITERAL> ] ++ , c [ h [ i ] + <LITERAL> ] -- ; } for ( int i = <LITERAL> ; i <= m ; i ++ ) { c [ i ] += c [ i - <LITERAL> ] ; ; } int ans = <LITERAL> ; ll now = <LITERAL> ; for ( int i = m ; i >= <LITERAL> ; i -- ) { if ( now + c [ i ] <= k ) now += c [ i ] ; else now = c [ i ] , ans ++ ; } if ( now ) ans ++ ; printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
bool comp ( int a , int b ) { return a > b ; } 
int main ( ) { long long n , k , h , cnt = <LITERAL> , acc = <LITERAL> ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & arr [ i ] ) ; } std :: sort ( arr , arr + n , comp ) ; h = arr [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( acc + ( h - arr [ i ] ) * i >= k ) { h -= ( k - acc ) / i ; cnt += ( ( h - arr [ i ] ) * i ) / ( k / i * i ) + <LITERAL> ; acc = ( ( h - arr [ i ] ) * i ) % ( k / i * i ) ; } else { acc += ( h - arr [ i ] ) * i ; } h = arr [ i ] ; } if ( acc ) { cnt ++ ; } printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
int main ( ) { # ifdef WK freopen ( <LITERAL> , <LITERAL> , stdin ) ; # endif scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) , cnt [ a [ i ] ] ++ ; int ans = <LITERAL> , nowd = <LITERAL> ; for ( int i = N - <LITERAL> ; cnt [ i ] < n ; i -- ) { while ( nowd + cnt [ i ] > m ) { nowd -= m ; nowd = max ( <LITERAL> , nowd ) ; ans ++ ; } nowd += cnt [ i ] ; cnt [ i - <LITERAL> ] += cnt [ i ] ; if ( cnt [ i - <LITERAL> ] == n ) { if ( ! nowd ) break ; ans += ( nowd - <LITERAL> ) / m + <LITERAL> ; break ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; maxx = max ( maxx , a [ i ] ) ; sum [ a [ i ] ] ++ ; } for ( int i = maxx ; i ; i -- ) sum [ i ] += sum [ i + <LITERAL> ] ; int res = <LITERAL> , ans = <LITERAL> ; for ( int i = maxx ; i ; i -- ) { if ( sum [ i ] == n ) { printf ( <LITERAL> , ans ) ; return <LITERAL> ; } if ( res < sum [ i ] ) ans ++ , res = k - sum [ i ] ; else res -= sum [ i ] ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
long long # define cin ( x ) scanf ( <LITERAL> , & x ) # define cout ( x ) printf ( <LITERAL> , x ) # define rep ( i , k , n ) for ( ll i = k ; i <= n ; i ++ ) # define mst ( a , k ) memset ( a , k , sizeof ( a ) ) ; const ll INF = <LITERAL> + <LITERAL> ; inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } ll n ; ll dfs ( ll x , ll t ) { if ( x == <LITERAL> ) { printf ( <LITERAL> , t ) ; return <LITERAL> ; } if ( x == <LITERAL> ) { printf ( <LITERAL> , t , t * <LITERAL> ) ; return <LITERAL> ; } if ( x == <LITERAL> ) { printf ( <LITERAL> , t , t , t * <LITERAL> ) ; return <LITERAL> ; } rep ( i , <LITERAL> , x - x / <LITERAL> ) printf ( <LITERAL> , t ) ; dfs ( x / <LITERAL> , t * <LITERAL> ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; dfs ( n , <LITERAL> ) ; return <LITERAL> ; } 
void deal ( int l , int r ) { if ( l == r ) { a [ l ] = <LITERAL> ; return ; } else if ( r - l + <LITERAL> == <LITERAL> ) { a [ l ] = <LITERAL> ; a [ l + <LITERAL> ] = <LITERAL> ; a [ l + <LITERAL> ] = <LITERAL> ; return ; } int len = r - l + <LITERAL> ; int mid = l - <LITERAL> + ( len - <LITERAL> ) / <LITERAL> + <LITERAL> ; for ( int i = l ; i <= mid ; i ++ ) a [ i ] = <LITERAL> ; deal ( mid + <LITERAL> , r ) ; for ( int i = mid + <LITERAL> ; i <= r ; i ++ ) a [ i ] *= <LITERAL> ; } 
int main ( ) { # ifdef WK freopen ( <LITERAL> , <LITERAL> , stdin ) ; # endif scanf ( <LITERAL> , & n ) ; deal ( <LITERAL> , n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; return <LITERAL> ; } 
void dfs ( ) { for ( int i = nowkind ; i <= n ; i += <LITERAL> * nowkind ) { if ( ! exist [ i ] ) { printf ( <LITERAL> , nowkind ) ; cnt ++ ; } exist [ i ] = <LITERAL> ; if ( cnt == n ) return ; } return ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; while ( cnt < n ) { if ( n - cnt == <LITERAL> ) { printf ( <LITERAL> , nowkind , nowkind , nowkind * <LITERAL> ) ; return <LITERAL> ; } dfs ( ) ; nowkind <<= <LITERAL> ; } printf ( <LITERAL> ) ; return <LITERAL> ; } 
void fun ( int n , int t ) { if ( n == <LITERAL> ) { ans [ c ++ ] = t ; return ; } if ( n == <LITERAL> ) { ans [ c ++ ] = t , ans [ c ++ ] = t * <LITERAL> ; return ; } if ( n == <LITERAL> ) { ans [ c ++ ] = t , ans [ c ++ ] = t ; ans [ c ++ ] = t * <LITERAL> ; return ; } for ( int i = <LITERAL> ; i < n ; i ++ ) if ( ( a [ i ] / t ) & <LITERAL> ) ans [ c ++ ] = t ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) a [ i ] = a [ <LITERAL> * i + <LITERAL> ] ; fun ( n / <LITERAL> , t * <LITERAL> ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) a [ i ] = i + <LITERAL> ; fun ( n , <LITERAL> ) ; for ( int i = <LITERAL> ; i < c ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; res [ ++ cnt ] . num = <LITERAL> ; res [ cnt ] . cnt = n ; cur = <LITERAL> ; choose = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + choose ; i += choose ) { if ( n / i != n / cur ) { choose = i - choose ; res [ ++ cnt ] . num = choose ; res [ cnt ] . cnt = n / choose ; cur = choose << <LITERAL> ; i = choose ; } } } cur = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { printf ( <LITERAL> , res [ cur ] . num ) ; if ( i + res [ cur + <LITERAL> ] . cnt == n ) { ++ cur ; } } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void calc ( int m , int k ) { if ( m == <LITERAL> ) { ans [ cnt ++ ] = k ; tot = <LITERAL> ; return ; } int mx = <LITERAL> , pos = <LITERAL> ; for ( int i = <LITERAL> ; i <= m ; i ++ ) { int num = m - m / i ; if ( num <= mx ) mx = num , pos = i ; } for ( int i = <LITERAL> ; i <= m ; i ++ ) { if ( i % pos ) ans [ cnt ++ ] = k ; } tot = m - mx ; p *= pos ; } 
void solve ( ) { n = read ( ) ; tot = n ; p = <LITERAL> ; while ( tot >= <LITERAL> ) calc ( tot , p ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; int ans = <LITERAL> ; while ( n ) { if ( n == <LITERAL> ) { printf ( <LITERAL> , ans , ans , ans * <LITERAL> ) ; break ; } for ( int i = <LITERAL> ; i < ( n + <LITERAL> ) / <LITERAL> ; i ++ ) { printf ( <LITERAL> , ans ) ; } n /= <LITERAL> ; ans *= <LITERAL> ; } } 
void work ( int st , int n ) { if ( n <= <LITERAL> ) { if ( n == <LITERAL> ) printf ( <LITERAL> , st ) ; else if ( n == <LITERAL> ) printf ( <LITERAL> , st , st * <LITERAL> ) ; else printf ( <LITERAL> , st , st , st * <LITERAL> ) ; return ; } for ( int i = n - n / <LITERAL> ; i ; i -- ) printf ( <LITERAL> , st ) ; work ( st * <LITERAL> , n / <LITERAL> ) ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; work ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( ) { long long n , m ; scanf ( <LITERAL> , & n , & m ) ; long long minn = max ( n - m * <LITERAL> , <LITERAL> ) , maxx ; if ( ! m ) maxx = n ; else { long long now = <LITERAL> ; while ( m > <LITERAL> ) { m -= now ; now ++ ; } maxx = n - now ; } printf ( <LITERAL> , minn , maxx ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { cin >> n >> m ; ll ans0 = <LITERAL> , ans1 = <LITERAL> ; if ( m == <LITERAL> ) { printf ( <LITERAL> , n , n ) ; return ; } ans0 = max ( <LITERAL> , n - m * <LITERAL> ) ; ll s = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { s += i ; if ( s >= m ) { ans1 = n - i - <LITERAL> ; break ; } } printf ( <LITERAL> , ans0 , ans1 ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { long long n , m ; cin >> n >> m ; long long max = <LITERAL> , min = <LITERAL> ; if ( m == <LITERAL> ) { cout << n << <LITERAL> << n ; return <LITERAL> ; } for ( long long i = n ; i >= <LITERAL> ; i -- ) { if ( m > ( i * ( i - <LITERAL> ) / <LITERAL> ) ) { max = n - i - <LITERAL> ; break ; } if ( m == ( i * ( i - <LITERAL> ) / <LITERAL> ) ) { max = n - i ; break ; } } if ( m * <LITERAL> >= n ) min = <LITERAL> ; else min = n - m * <LITERAL> ; cout << min << <LITERAL> << max ; } 
int main ( ) { # ifdef WK freopen ( <LITERAL> , <LITERAL> , stdin ) ; # endif scanf ( <LITERAL> , & n , & m ) ; int ans1 = max ( <LITERAL> , n - m * <LITERAL> ) , ans2 ; for ( int i = <LITERAL> ; ; i ++ ) { if ( <LITERAL> * i * ( i - <LITERAL> ) / <LITERAL> >= m ) { ans2 = i ; break ; } } ans2 = n - ans2 ; printf ( <LITERAL> , ans1 , ans2 ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; if ( n > m * <LITERAL> ) ans = n - m * <LITERAL> ; else ans = <LITERAL> ; if ( m == <LITERAL> ) l = <LITERAL> ; else for ( l = <LITERAL> ; l * ( l - <LITERAL> ) < m * <LITERAL> ; l ++ ) ; printf ( <LITERAL> , ans , n - l ) ; return <LITERAL> ; } 
int main ( ) { long long v , e ; scanf ( <LITERAL> , & v , & e ) ; if ( e == <LITERAL> ) { printf ( <LITERAL> , v , v ) ; return <LITERAL> ; } double x = ( <LITERAL> + sqrt ( <LITERAL> * e + <LITERAL> ) ) / <LITERAL> ; int me = ceil ( x ) ; printf ( <LITERAL> , std :: max ( ( long long ) <LITERAL> , v - <LITERAL> * e ) , v - me ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; min = std :: max ( n - ( m << <LITERAL> ) , <LITERAL> * <LITERAL> ) ; for ( i = <LITERAL> ; ; ++ i ) { tmp += i ; if ( tmp >= m ) { break ; } } max = n - ( i + <LITERAL> ) ; if ( m == <LITERAL> ) { max = n ; } printf ( <LITERAL> , min , max ) ; return <LITERAL> ; } 
int main ( ) { cin >> n >> m ; long long maxn , minn ; if ( n <= m * <LITERAL> ) minn = <LITERAL> ; else minn = n - <LITERAL> * m ; long long i = <LITERAL> ; while ( i * ( i - <LITERAL> ) / <LITERAL> <= m ) ++ i ; -- i ; if ( i * ( i - <LITERAL> ) / <LITERAL> == m ) maxn = n - i ; else maxn = n - i - <LITERAL> ; if ( m == <LITERAL> ) maxn = n ; cout << minn << <LITERAL> << maxn ; } 
long long maxx ( long long n , long long m ) { if ( m == <LITERAL> ) return n ; if ( m == <LITERAL> ) return n - <LITERAL> ; long long ans = <LITERAL> , sum = <LITERAL> ; while ( sum + ans < m ) { sum += ans ; ans ++ ; } return n - ans - <LITERAL> ; } 
int main ( ) { long long n , m ; scanf ( <LITERAL> , & n , & m ) ; printf ( <LITERAL> , max ( ( long long ) <LITERAL> , n - m - m ) , maxx ( n , m ) ) ; return <LITERAL> ; } 
int main ( ) { long long n , m ; scanf ( <LITERAL> , & n , & m ) ; ; printf ( <LITERAL> , MAX ( n - <LITERAL> * m , <LITERAL> ) ) ; ; if ( m == <LITERAL> ) { printf ( <LITERAL> , n ) ; return <LITERAL> ; } } double ans = <LITERAL> + sqrt ( <LITERAL> + <LITERAL> * m ) / <LITERAL> ; long long cast = ans ; cast ++ ; ; while ( cast * ( cast - <LITERAL> ) >= m * <LITERAL> ) ) { cast -- ; } cast ++ ; printf ( <LITERAL> , n - cast ) ; return <LITERAL> ; } 
void getmin ( ) { if ( m * <LITERAL> >= n ) printf ( <LITERAL> ) ; else printf ( <LITERAL> , n - m * <LITERAL> ) ; } 
void getmax ( ) { long long alr = <LITERAL> ; while ( m > <LITERAL> ) { m -= alr ; alr ++ ; } n -= alr ; printf ( <LITERAL> , n ) ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; if ( m == <LITERAL> ) { printf ( <LITERAL> , n , n ) ; return <LITERAL> ; } getmin ( ) ; getmax ( ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n , & m ) ; if ( n - <LITERAL> * m > <LITERAL> ) minn = n - <LITERAL> * m ; else minn = <LITERAL> ; long long k = <LITERAL> ; while ( k * ( k - <LITERAL> ) / <LITERAL> < m ) k ++ ; maxn = n - k ; printf ( <LITERAL> , minn , maxn ) ; return <LITERAL> ; } 
int main ( ) { long long n , m , a , b ; cin >> n >> m ; a = n - <LITERAL> * m ; if ( n - <LITERAL> * m < <LITERAL> ) a = <LITERAL> ; b = n - ( <LITERAL> + sqrt ( <LITERAL> + <LITERAL> * m ) ) / <LITERAL> ; if ( m == <LITERAL> ) a = b = n ; cout << a << <LITERAL> << b ; return <LITERAL> ; } 
int main ( ) { LL n , m , mi , ma ; scanf ( <LITERAL> , & n , & m ) ; mi = max ( <LITERAL> , n - m * <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( m <= <LITERAL> * i * ( i - <LITERAL> ) / <LITERAL> ) { ma = n - i ; break ; } } if ( ! m ) ma = n ; printf ( <LITERAL> , mi , ma ) ; return <LITERAL> ; } 
int main ( ) { long long n , m , p ; scanf ( <LITERAL> , & n , & m ) ; double w = <LITERAL> + sqrt ( <LITERAL> + <LITERAL> * m ) / <LITERAL> ; if ( fabs ( w - ( long long ) w ) < <LITERAL> ) p = ( long long ) w ; else p = ceil ( w ) ; if ( m == <LITERAL> ) p = <LITERAL> ; long long max = n - p ; if ( max < <LITERAL> ) max = <LITERAL> ; long long min = n - m * <LITERAL> ; if ( min < <LITERAL> ) min = <LITERAL> ; printf ( <LITERAL> , min , max ) ; } 
int main ( ) { long long n , m , max , min , pair ; long long i , temp ; cin >> n >> m ; if ( m == <LITERAL> ) { cout << n << <LITERAL> << n << endl ; exit ( <LITERAL> ) ; } for ( i = <LITERAL> ; i <= n ; i ++ ) { temp = ( i * ( i - <LITERAL> ) ) / <LITERAL> ; if ( temp >= m ) break ; } max = n - i ; pair = m * <LITERAL> ; if ( pair >= n ) min = <LITERAL> ; else min = n - pair ; cout << min << <LITERAL> << max << endl ; } 
int sgn ( int x ) { if ( x > <LITERAL> ) return x ; return - x ; } 
bool check ( long double k ) { long double l = - <LITERAL> , r = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( p [ i ] . y - k * <LITERAL> > EPS ) return false ; long double t = p [ i ] . dis ( k ) ; l = max ( l , p [ i ] . x - t ) ; r = min ( r , p [ i ] . x + t ) ; } return r - l > EPS ; } 
int main ( ) { int x , y , c1 = <LITERAL> , c2 = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; if ( y > <LITERAL> ) ++ c1 ; else ++ c2 ; p [ i ] = Point ( x , sgn ( y ) ) ; } if ( c1 && c2 ) return <LITERAL> * puts ( <LITERAL> ) ; long double l = <LITERAL> , r = <LITERAL> , mid ; while ( abs ( ( l - r ) / r ) > EPS ) { mid = ( l + r ) / <LITERAL> ; if ( check ( mid ) ) r = mid ; else l = mid ; } printf ( <LITERAL> , mid ) ; return <LITERAL> ; } 
int check ( double r ) { double L = - <LITERAL> , R = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { double dy = P [ i ] . y - r ; if ( dy > r ) return <LITERAL> ; double dx = sqrt ( r * r - dy * dy ) ; double ll = P [ i ] . x - dx ; double rr = P [ i ] . x + dx ; L = max ( L , ll ) ; R = min ( R , rr ) ; } return L <= R ; } 
double solve ( ) { double l = <LITERAL> , r = <LITERAL> , rtn = <LITERAL> ; int cnt = <LITERAL> ; while ( cnt < <LITERAL> && r - l > <LITERAL> ) { cnt ++ ; double mid = ( l + r ) / <LITERAL> ; if ( check ( mid ) ) { rtn = mid ; r = mid ; } else l = mid ; } return rtn ; } 
int main ( ) { # ifdef WK freopen ( <LITERAL> , <LITERAL> , stdin ) ; # endif scanf ( <LITERAL> , & n ) ; int flag = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int aa , bb ; scanf ( <LITERAL> , & aa , & bb ) ; if ( ! flag ) { if ( bb < <LITERAL> ) flag = - <LITERAL> ; else flag = <LITERAL> ; } else { if ( <LITERAL> * flag * bb < <LITERAL> ) { printf ( <LITERAL> ) ; return <LITERAL> ; } } if ( bb < <LITERAL> ) bb = - bb ; P [ i ] = Point ( aa , bb ) ; } double ans = solve ( ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int sgn ( int x ) { if ( x > <LITERAL> ) return x ; return - x ; } 
bool check ( long double k ) { long double l = - <LITERAL> , r = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( p [ i ] . y - k * <LITERAL> > EPS ) return false ; long double t = p [ i ] . dis ( k ) ; l = max ( l , p [ i ] . x - t ) ; r = min ( r , p [ i ] . x + t ) ; } return r - l > EPS ; } 
int main ( ) { int x , y , c1 = <LITERAL> , c2 = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; if ( y > <LITERAL> ) ++ c1 ; else ++ c2 ; p [ i ] = Point ( x , sgn ( y ) ) ; } if ( c1 && c2 ) return <LITERAL> * puts ( <LITERAL> ) ; long double l = <LITERAL> , r = <LITERAL> , mid , cnt = <LITERAL> ; while ( cnt <= <LITERAL> ) { mid = ( l + r ) / <LITERAL> ; if ( check ( mid ) ) r = mid ; else l = mid ; ++ cnt ; } printf ( <LITERAL> , mid ) ; return <LITERAL> ; } 
int sgn ( int x ) { if ( x > <LITERAL> ) return x ; return - x ; } 
bool check ( long double k ) { long double l = - <LITERAL> , r = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( p [ i ] . y - k * <LITERAL> > EPS ) return false ; long double t = p [ i ] . dis ( k ) ; l = max ( l , p [ i ] . x - t ) ; r = min ( r , p [ i ] . x + t ) ; } return r - l > EPS ; } 
int main ( ) { int x , y , c1 = <LITERAL> , c2 = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; if ( y > <LITERAL> ) ++ c1 ; else ++ c2 ; p [ i ] = Point ( x , sgn ( y ) ) ; } if ( c1 && c2 ) return <LITERAL> * puts ( <LITERAL> ) ; long double l = <LITERAL> , r = <LITERAL> , mid , cnt = <LITERAL> ; while ( cnt <= <LITERAL> ) { mid = ( l + r ) / <LITERAL> ; if ( check ( mid ) ) r = mid ; else l = mid ; ++ cnt ; } printf ( <LITERAL> , mid ) ; return <LITERAL> ; } 
int sgn ( int x ) { if ( x > <LITERAL> ) return x ; return - x ; } 
bool check ( long double k ) { long double l = - <LITERAL> , r = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( p [ i ] . y - k * <LITERAL> > EPS ) return false ; long double t = p [ i ] . dis ( k ) ; l = max ( l , p [ i ] . x - t ) ; r = min ( r , p [ i ] . x + t ) ; } return r - l > EPS ; } 
int main ( ) { int x , y , c1 = <LITERAL> , c2 = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; if ( y > <LITERAL> ) ++ c1 ; else ++ c2 ; p [ i ] = Point ( x , sgn ( y ) ) ; } if ( c1 && c2 ) return <LITERAL> * puts ( <LITERAL> ) ; long double l = <LITERAL> , r = <LITERAL> , mid , cnt = <LITERAL> ; while ( cnt <= <LITERAL> ) { mid = ( l + r ) / <LITERAL> ; if ( check ( mid ) ) r = mid ; else l = mid ; ++ cnt ; } printf ( <LITERAL> , mid ) ; return <LITERAL> ; } 
int sgn ( int x ) { if ( x > <LITERAL> ) return x ; return - x ; } 
bool check ( long double k ) { long double l = - <LITERAL> , r = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( p [ i ] . y - k * <LITERAL> > EPS ) return false ; long double t = p [ i ] . dis ( k ) ; l = max ( l , p [ i ] . x - t ) ; r = min ( r , p [ i ] . x + t ) ; } return r - l > EPS ; } 
int main ( ) { int x , y , c1 = <LITERAL> , c2 = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; if ( y > <LITERAL> ) ++ c1 ; else ++ c2 ; p [ i ] = Point ( x , sgn ( y ) ) ; } if ( c1 && c2 ) return <LITERAL> * puts ( <LITERAL> ) ; long double l = <LITERAL> , r = <LITERAL> , mid ; while ( abs ( ( l - r ) / r ) > <LITERAL> ) { mid = ( l + r ) / <LITERAL> ; if ( check ( mid ) ) r = mid ; else l = mid ; } printf ( <LITERAL> , mid ) ; return <LITERAL> ; } 
signed main ( ) { { { int n , k , x , m = <LITERAL> , s = <LITERAL> ; cin >> n >> k ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> x ; a [ x ] ++ ; m = max ( m , a [ x ] ) ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) s += ( bool ) a [ i ] ; int j ; for ( j = m ; j % k != <LITERAL> ; j ++ ) ; cout << s * j - n << endl ; return <LITERAL> ; } 
int main ( void ) { int n , people ; scanf ( <LITERAL> , & n , & people ) ; int * p = ( int * ) malloc ( sizeof ( int ) * n ) ; int can [ <LITERAL> ] = { <LITERAL> } ; int dish ; int max = <LITERAL> ; int ut = <LITERAL> ; int sto ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & p [ i ] ) ; can [ p [ i ] - <LITERAL> ] ++ ; } for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( can [ i ] ) ut ++ ; if ( can [ i ] > max ) max = can [ i ] ; } dish = max / people + ( max % people > <LITERAL> ? <LITERAL> : <LITERAL> ) ; sto = dish * people * ut - n ; printf ( <LITERAL> , sto ) ; free ( p ) ; } 
int main ( ) { int n , k , x , ma = <LITERAL> , ans = <LITERAL> ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & x ) , a [ x ] ++ ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) ma = max ( ma , a [ i ] ) ; ma += k - ( ma - <LITERAL> ) % k - <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) if ( a [ i ] ) ans += ma - a [ i ] ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; int MAX = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int t ; scanf ( <LITERAL> , & t ) ; a [ t ] ++ ; MAX = max ( MAX , a [ t ] ) ; } int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) cnt += ( a [ i ] != <LITERAL> ) ; while ( MAX % m != <LITERAL> ) MAX ++ ; printf ( <LITERAL> , cnt * MAX - n ) ; return <LITERAL> ; } 
int max ( int a , int b ) { return a > b ? a : b ; } 
int main ( ) { scanf ( <LITERAL> , & N , & k ) ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { int x ; scanf ( <LITERAL> , & x ) ; if ( ! type [ x ] ) types ++ ; type [ x ] ++ ; type_max = max ( type_max , type [ x ] ) ; } if ( type_max % k == <LITERAL> ) m = type_max ; else m = ( type_max / k ) * k + k ; printf ( <LITERAL> , m * types - N ) ; return <LITERAL> ; } 
int main ( ) { int n , k , a [ <LITERAL> ] , m [ <LITERAL> ] = { <LITERAL> } ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; m [ a [ i ] ] ++ ; } int max = <LITERAL> , num = <LITERAL> , t ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( m [ i ] > max ) { max = m [ i ] ; } if ( m [ i ] != <LITERAL> ) num ++ ; } if ( max % k == <LITERAL> ) t = max / k ; else t = max / k + <LITERAL> ; printf ( <LITERAL> , k * num * t - n ) ; return <LITERAL> ; } 
int main ( ) { int n , dish , num , ans , temp1 ; double x , temp2 ; cin >> n >> x ; memset ( a , <LITERAL> , sizeof ( a ) ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> temp1 ; a [ temp1 ] ++ ; } dish = num = ans = <LITERAL> ; temp2 = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( a [ i ] != <LITERAL> ) { num ++ ; temp2 = ceil ( a [ i ] / x ) ; if ( temp2 > dish ) dish = temp2 ; temp2 = <LITERAL> ; } else continue ; } ans = x * dish * num - n ; cout << ans << endl ; return <LITERAL> ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x ; scanf ( <LITERAL> , & x ) ; a [ x ] ++ ; } int maxx = <LITERAL> , sum = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { maxx = max ( maxx , a [ i ] ) ; if ( a [ i ] != <LITERAL> ) sum ++ ; } while ( maxx % k != <LITERAL> ) maxx ++ ; printf ( <LITERAL> , sum * maxx - n ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; while ( n -- ) { scanf ( <LITERAL> , & a ) ; num [ a ] ++ ; max = std :: max ( max , num [ a ] ) ; } if ( max % k != <LITERAL> ) { max = ( max / k + <LITERAL> ) * k ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) { if ( num [ i ] != <LITERAL> ) { ans += ( max - num [ i ] ) ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int temp ; scanf ( <LITERAL> , & temp ) ; a [ temp ] ++ ; } int maxi = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( a [ i ] ) cnt ++ ; maxi = max ( maxi , a [ i ] ) ; } int nn = maxi / k ; if ( maxi % k ) nn ++ ; cout << nn * cnt * k - n ; } 
int main ( ) { int n , k , m = <LITERAL> , mm = <LITERAL> ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; bucket [ a [ i ] ] ++ ; m = MAX ( m , bucket [ a [ i ] ] ) ; mm = MAX ( mm , a [ i ] ) ; } int cnt = <LITERAL> ; ; for ( int i = <LITERAL> ; i <= mm ; i ++ ) { if ( bucket [ i ] ) cnt ++ ; } while ( m % k != <LITERAL> ) { m ++ ; } printf ( <LITERAL> , cnt * m - n ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & x ) ; if ( a [ x ] == <LITERAL> ) ++ num ; cnt = max ( cnt , ++ a [ x ] ) ; } printf ( <LITERAL> , ( ( cnt - <LITERAL> ) / k + <LITERAL> ) * k * num - n ) ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; int maxnum = <LITERAL> ; int lft = <LITERAL> ; int a ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a ) ; num [ a ] ++ ; ; maxnum = max ( maxnum , num [ a ] ) ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) lft += num [ i ] ; ; int amt = maxnum % k == <LITERAL> ? maxnum / k : ( maxnum / k ) + <LITERAL> ; ; int round = amt * k ; ; ; int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( num [ i ] ) cnt += round - num [ i ] ; } printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) scanf ( <LITERAL> , & x ) , ++ book [ x ] ; for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) mx = max ( mx , book [ i ] ) , cnt += book [ i ] != <LITERAL> ; int y = ( mx - <LITERAL> ) / k + <LITERAL> ; printf ( <LITERAL> , k * y * cnt - n ) ; return <LITERAL> ; } 
int main ( ) { int n , k , i , max , pair , ans ; cin >> n >> k ; int num [ <LITERAL> ] = { <LITERAL> } ; max = <LITERAL> ; for ( i = <LITERAL> ; i < n ; i ++ ) { int s ; cin >> s ; num [ s ] ++ ; if ( num [ s ] > max ) max = num [ s ] ; } if ( max % k == <LITERAL> ) pair = max / k ; else pair = max / k + <LITERAL> ; max = pair * k ; ans = <LITERAL> ; for ( i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( num [ i ] != <LITERAL> ) ans += max - num [ i ] ; } cout << ans << endl ; } 
int main ( ) { int n , k , a [ maxn ] , maxset = <LITERAL> , type = <LITERAL> ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= maxn ; i ++ ) a [ i ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int p ; scanf ( <LITERAL> , & p ) ; a [ p ] ++ ; if ( a [ p ] > maxset ) maxset = a [ p ] ; } for ( int i = <LITERAL> ; i <= maxn ; i ++ ) if ( a [ i ] ) type ++ ; int dishes = maxset / k ; if ( maxset % k ) dishes ++ ; int ans = dishes * k * type - n ; printf ( <LITERAL> , ans ) ; } 
int main ( ) { int n , k ; cin >> n >> k ; int t = <LITERAL> ; int num ; int m = <LITERAL> ; while ( t < n ) { cin >> num ; if ( plate [ num ] == <LITERAL> ) { what [ m ] = num ; m ++ ; } plate [ num ] ++ ; t ++ ; } int sum = <LITERAL> ; int maxnum = * max_element ( what , what + m ) ; int max = * max_element ( plate , plate + maxnum + <LITERAL> ) ; int i = k ; for ( ; ; i += k ) { if ( i - max >= <LITERAL> ) { break ; } } for ( int b = <LITERAL> ; b < m ; b ++ ) { sum = sum + i - plate [ what [ b ] ] ; } cout << sum ; } 
int main ( void ) { int a [ <LITERAL> ] = { <LITERAL> } , n , k , max = <LITERAL> , ans = <LITERAL> ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int m ; scanf ( <LITERAL> , & m ) ; a [ m ] ++ ; if ( a [ m ] > max ) max = a [ m ] ; } max = max % k == <LITERAL> ? max : ( max / k + <LITERAL> ) * k ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( a [ i ] ) ans += max - a [ i ] ; } printf ( <LITERAL> , ans ) ; } 
int main ( ) { int n , k ; cin >> n >> k ; int a [ n ] ; int c = <LITERAL> , d ; for ( int i = <LITERAL> ; i < n ; i ++ ) cin >> a [ i ] ; for ( int i = <LITERAL> ; i < n ; i ++ ) { d = <LITERAL> ; for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] ) d ++ ; } if ( d > c ) c = d ; } d = n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = i + <LITERAL> ; j < n ; j ++ ) { if ( a [ j ] == a [ i ] ) { d -- ; break ; } } } int e ; if ( c % k == <LITERAL> ) { e = c / k ; } else { e = c / k + <LITERAL> ; } cout << e * k * d - n ; } 
bool comp ( int a , int b ) { return a > b ; } 
int main ( ) { int n , k , t , cnt = <LITERAL> ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & t ) ; if ( arr [ t ] == <LITERAL> ) cnt ++ ; arr [ t ] ++ ; } std :: sort ( arr , arr + <LITERAL> , comp ) ; t = ( arr [ <LITERAL> ] - <LITERAL> ) / k + <LITERAL> ; printf ( <LITERAL> , cnt * t * k - n ) ; return <LITERAL> ; } 
int main ( ) { int rest , guest ; int kinds [ <LITERAL> ] ; int another [ <LITERAL> ] ; int i , k , m , j , all , max , lp ; scanf ( <LITERAL> , & rest ) ; scanf ( <LITERAL> , & guest ) ; for ( i = <LITERAL> ; i < rest ; i ++ ) { scanf ( <LITERAL> , & kinds [ i ] ) ; } j = <LITERAL> ; for ( i = <LITERAL> ; i < rest ; i ++ ) { if ( kinds [ i ] != <LITERAL> ) { m = <LITERAL> ; for ( k = i + <LITERAL> ; k < rest ; k ++ ) { if ( kinds [ k ] == kinds [ i ] ) { m ++ ; kinds [ k ] = <LITERAL> ; } } another [ j ] = m ; j ++ ; } } all = <LITERAL> ; k = guest ; lp = <LITERAL> ; max = <LITERAL> ; for ( i = <LITERAL> ; i < j ; i ++ ) { if ( another [ i ] > guest ) { for ( ; k < another [ i ] ; ) { k = k + guest ; lp ++ ; } if ( max < lp ) { max = lp ; } } } for ( i = <LITERAL> ; i < j ; i ++ ) { all = all + guest * max - another [ i ] ; } printf ( <LITERAL> , all ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
int main ( ) { n = read ( ) ; k = read ( ) ; int res = <LITERAL> , num = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x = read ( ) ; if ( ++ vis [ x ] == <LITERAL> ) num ++ ; res = max ( res , vis [ x ] ) ; } while ( res % k ) res ++ ; printf ( <LITERAL> , res * num - n ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> , x ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x ) ; cnt [ x ] ++ ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( ! cnt [ i ] ) continue ; types ++ ; maxx = max ( cnt [ i ] , maxx ) ; } while ( maxx % k ) maxx ++ ; printf ( <LITERAL> , maxx * types - n ) ; return <LITERAL> ; } 
int main ( ) { int n , k ; int num_utensil_types [ <LITERAL> ] = { <LITERAL> } ; int unum = <LITERAL> ; scanf_s ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int type ; scanf_s ( <LITERAL> , & type ) ; num_utensil_types [ type ] ++ ; unum ++ ; } int types = <LITERAL> , max = <LITERAL> , min = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( num_utensil_types [ i ] > max ) max = num_utensil_types [ i ] ; if ( num_utensil_types [ i ] < min ) min = num_utensil_types [ i ] ; if ( num_utensil_types [ i ] ) types ++ ; } int dishes = ceil ( double ( max ) / k ) ; int utensil_stolen = dishes * types * k - unum ; printf ( <LITERAL> , utensil_stolen ) ; return <LITERAL> ; } 
int main ( ) { int n , k , j , i , max = <LITERAL> , x = <LITERAL> , flag ; scanf ( <LITERAL> , & n , & k ) ; int a [ n + <LITERAL> ] , sum [ <LITERAL> ] = { <LITERAL> } ; for ( i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; sum [ a [ i ] ] ++ ; if ( sum [ a [ i ] ] > max ) max = sum [ a [ i ] ] ; flag = <LITERAL> ; for ( j = <LITERAL> ; j < i ; j ++ ) { if ( a [ i ] != a [ j ] ) { flag ++ ; } } if ( flag == i - <LITERAL> ) x ++ ; } if ( max % k == <LITERAL> ) printf ( <LITERAL> , max / k * x * k - n ) ; else printf ( <LITERAL> , ( max / k + <LITERAL> ) * k * x - n ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n , & guest ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int tmp ; scanf ( <LITERAL> , & tmp ) ; if ( ! num [ tmp ] ) kind ++ ; num [ tmp ] ++ ; maxn = max ( maxn , num [ tmp ] ) ; } int minall = ( maxn + guest - <LITERAL> ) / guest * guest ; printf ( <LITERAL> , minall * kind - n ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , st ) ; int len = strlen ( st ) ; if ( len % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , len / <LITERAL> ) ; for ( int i = <LITERAL> ; i <= len - <LITERAL> ; i ++ ) { printf ( <LITERAL> , st [ i ] ) ; if ( ( i + <LITERAL> ) % <LITERAL> == <LITERAL> ) printf ( <LITERAL> ) ; } } else { len /= <LITERAL> ; len ++ ; int c = strlen ( st ) / len ; if ( strlen ( st ) % len != <LITERAL> ) c ++ ; int f = len * c - strlen ( st ) ; printf ( <LITERAL> , len , c ) ; int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i <= len ; i ++ ) { for ( int j = <LITERAL> ; j <= c ; j ++ ) if ( j == c && f == len - i + <LITERAL> ) { printf ( <LITERAL> ) ; f -- ; } else printf ( <LITERAL> , st [ cnt ++ ] ) ; printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
int main ( ) { string s ; cin >> s ; int l = s . length ( ) ; int r = ( l - <LITERAL> ) / <LITERAL> + <LITERAL> ; int c = ( l - <LITERAL> ) / r + <LITERAL> ; int a = ( l - <LITERAL> ) % r + <LITERAL> ; int offset = <LITERAL> ; cout << r << <LITERAL> << c << endl ; for ( int i = <LITERAL> ; i < a ; i ++ ) { cout << s . substr ( offset , c ) << <LITERAL> ; offset += c ; } for ( int i = <LITERAL> ; i < r - a ; i ++ ) { cout << s . substr ( offset , c - <LITERAL> ) << <LITERAL> ; offset += c - <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { ios :: sync_with_stdio ( <LITERAL> ) ; string s ; cin >> s ; int len = s . length ( ) ; int row = len / <LITERAL> ; if ( len % <LITERAL> ) row ++ ; int col = len / row ; if ( len % row ) col ++ ; int stars = col * row - len ; int ptr = <LITERAL> ; cout << row << <LITERAL> << col << <LITERAL> ; for ( int i = <LITERAL> ; i <= stars ; i ++ ) { for ( int j = <LITERAL> ; j <= col - <LITERAL> ; j ++ ) { cout << s [ ptr ] ; ptr ++ ; } cout << <LITERAL> ; } for ( int i = <LITERAL> ; i <= row - stars ; i ++ ) { for ( int j = <LITERAL> ; j <= col ; j ++ ) { cout << s [ ptr ] ; ptr ++ ; } cout << <LITERAL> ; } } 
int main ( ) { scanf ( <LITERAL> , ch + <LITERAL> ) ; int len = strlen ( ch + <LITERAL> ) ; for ( int x = <LITERAL> ; x <= <LITERAL> ; x ++ ) { memset ( mp , <LITERAL> , sizeof ( mp ) ) ; int nowpx = <LITERAL> , nowpy = <LITERAL> ; bool check = <LITERAL> ; for ( int i = <LITERAL> ; i <= len ; i ++ ) { mp [ nowpx ] [ nowpy ] = <LITERAL> ; nowpx ++ ; if ( nowpx > x ) { nowpx = <LITERAL> ; nowpy ++ ; if ( i == len ) nowpy -- ; } if ( nowpy > <LITERAL> ) { check = <LITERAL> ; break ; } } if ( ! check ) continue ; else { int now = <LITERAL> ; printf ( <LITERAL> , x , nowpy ) ; for ( int i = <LITERAL> ; i <= x ; i ++ ) { for ( int j = <LITERAL> ; j <= nowpy ; j ++ ) { if ( mp [ i ] [ j ] ) { printf ( <LITERAL> , ch [ now ] ) ; now ++ ; } else printf ( <LITERAL> ) ; if ( now > len + <LITERAL> ) break ; } printf ( <LITERAL> ) ; if ( now > len ) break ; } break ; } } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
int main ( ) { scanf ( <LITERAL> , s + <LITERAL> ) ; n = strlen ( s + <LITERAL> ) ; a = n / <LITERAL> ; if ( n % <LITERAL> ) a ++ ; b = n / a ; if ( n != a * b ) b ++ ; c = a * b - n ; printf ( <LITERAL> , a , b ) ; int now = <LITERAL> ; for ( int i = <LITERAL> ; i <= a ; i ++ ) { for ( int j = <LITERAL> ; j <= b ; j ++ ) { if ( c > <LITERAL> && j == b ) printf ( <LITERAL> ) , c -- ; else printf ( <LITERAL> , s [ ++ now ] ) ; } printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , s ) ; int len = strlen ( s ) ; int row = <LITERAL> , col , num ; while ( len / row > <LITERAL> ) ++ row ; col = ( len - <LITERAL> ) / row + <LITERAL> ; if ( col > <LITERAL> ) ++ row , col = ( len - <LITERAL> ) / row + <LITERAL> ; num = row * col - len ; int pos = <LITERAL> ; cout << row << <LITERAL> << col << endl ; for ( int i = <LITERAL> ; i <= row ; ++ i ) { int j = <LITERAL> ; if ( num ) cout << <LITERAL> , j = <LITERAL> , -- num ; for ( ; j <= col ; ++ j , ++ pos ) cout << s [ pos ] ; cout << endl ; } } 
int main ( ) { scanf ( <LITERAL> , s + <LITERAL> ) ; len = strlen ( s + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) { int tmp = len % i ; int cnt = len / i + ( tmp != <LITERAL> ) ; tmp = ( tmp != <LITERAL> ) * ( i - tmp ) ; if ( cnt <= <LITERAL> ) { for ( int w = <LITERAL> ; w <= tmp ; ++ w ) { ans [ w ] [ cnt ] = <LITERAL> ; } cur = <LITERAL> ; for ( int w = <LITERAL> ; w <= tmp ; ++ w ) { for ( int j = <LITERAL> ; j < cnt ; ++ j ) { ans [ w ] [ j ] = s [ cur ++ ] ; } } for ( int w = tmp + <LITERAL> ; w <= i ; ++ w ) { for ( int j = <LITERAL> ; j <= cnt ; ++ j ) { ans [ w ] [ j ] = s [ cur ++ ] ; } } printf ( <LITERAL> , i , cnt ) ; for ( int w = <LITERAL> ; w <= i ; ++ w ) { for ( int j = <LITERAL> ; j <= cnt ; ++ j ) { printf ( <LITERAL> , ans [ w ] [ j ] ) ; } printf ( <LITERAL> ) ; } return <LITERAL> ; } } } 
int main ( ) { scanf ( <LITERAL> , s ) ; int l = strlen ( s ) , n = ( l - <LITERAL> ) / <LITERAL> + <LITERAL> , m = ( l - <LITERAL> ) / n + <LITERAL> , w = n * m - l , now = <LITERAL> ; printf ( <LITERAL> , n , m ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int i = <LITERAL> ; i < m ; i ++ ) putchar ( s [ now ++ ] ) ; if ( w ) putchar ( <LITERAL> ) , w -- ; else putchar ( s [ now ++ ] ) ; puts ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { string s ; cin >> s ; int row , col , i , j , k ; if ( s . size ( ) % <LITERAL> == <LITERAL> ) { row = s . size ( ) / <LITERAL> ; col = <LITERAL> ; cout << row << <LITERAL> << col << endl ; j = <LITERAL> ; for ( i = <LITERAL> ; i < row ; i ++ ) { for ( k = <LITERAL> ; k < col ; k ++ ) { cout << s [ j ] ; j ++ ; } cout << endl ; } } else { row = s . size ( ) / <LITERAL> + <LITERAL> ; if ( s . size ( ) % row == <LITERAL> ) { col = s . size ( ) / row ; cout << row << <LITERAL> << col << endl ; j = <LITERAL> ; for ( i = <LITERAL> ; i < row ; i ++ ) { for ( k = <LITERAL> ; k < col ; k ++ ) { cout << s [ j ] ; j ++ ; } cout << endl ; } } else { int star ; col = s . size ( ) / row + <LITERAL> ; cout << row << <LITERAL> << col << endl ; j = <LITERAL> ; star = row * col - s . size ( ) ; for ( i = <LITERAL> ; i < row ; i ++ ) { for ( k = <LITERAL> ; k < col - <LITERAL> ; k ++ ) { cout << s [ j ] ; j ++ ; } if ( star > <LITERAL> ) { cout << <LITERAL> ; star -- ; } else { cout << s [ j ] ; j ++ ; } cout << endl ; } } } } 
int main ( ) { scanf ( <LITERAL> , s + <LITERAL> ) ; length = strlen ( s + <LITERAL> ) ; for ( int i = <LITERAL> ; i >= <LITERAL> ; -- i ) { int row = ( length - <LITERAL> ) / i + <LITERAL> ; if ( row > <LITERAL> ) break ; if ( row <= row_ans ) { row_ans = row ; col_ans = i ; } } } int cnt = <LITERAL> ; int rest ; if ( length % col_ans ) rest = col_ans - ( length % col_ans ) ; else rest = <LITERAL> ; int num = rest / row_ans , pos = rest % row_ans ; printf ( <LITERAL> , row_ans , col_ans ) ; for ( int i = <LITERAL> ; i <= row_ans ; ++ i ) { int rig = col_ans - num ; for ( int j = <LITERAL> ; j <= num ; ++ j ) printf ( <LITERAL> ) ; if ( i <= pos ) { -- rig ; printf ( <LITERAL> ) ; } for ( int j = <LITERAL> ; j <= rig ; ++ j ) printf ( <LITERAL> , s [ ++ cnt ] ) ; printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int n , r , l ; char str [ <LITERAL> ] ; scanf ( <LITERAL> , str ) ; n = strlen ( str ) ; r = n / <LITERAL> ; if ( n - <LITERAL> * r ) { r ++ ; } l = n / r ; if ( n - l * r ) { l ++ ; } printf ( <LITERAL> , r , l ) ; int a = r * l - n ; int k = <LITERAL> ; for ( int i = <LITERAL> ; i < r ; i ++ ) { for ( int j = <LITERAL> ; j < l ; j ++ ) { if ( a != <LITERAL> && j == l - <LITERAL> ) putchar ( <LITERAL> ) , a -- ; else putchar ( str [ k ++ ] ) ; } putchar ( <LITERAL> ) ; } } 
int main ( ) { char a [ <LITERAL> ] ; scanf ( <LITERAL> , a ) ; int n = strlen ( a ) ; if ( n <= <LITERAL> ) { printf ( <LITERAL> , n ) ; printf ( <LITERAL> , a ) ; } else if ( n <= <LITERAL> ) { if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } } else if ( n <= <LITERAL> ) { if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i <= n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } } else if ( n <= <LITERAL> ) { if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i <= n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i <= n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i <= n / <LITERAL> * <LITERAL> + <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } } else { if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i <= n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i < n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> ; i <= n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i <= n / <LITERAL> * <LITERAL> + <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } else if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n / <LITERAL> + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n / <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> ; i <= n / <LITERAL> * <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i <= n / <LITERAL> * <LITERAL> + <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i <= n / <LITERAL> * <LITERAL> + <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; printf ( <LITERAL> ) ; for ( int i = n / <LITERAL> * <LITERAL> + <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } } return <LITERAL> ; } 
double rec_dist ( point a , point b ) { return fabs ( a . x - b . x ) + fabs ( a . y - b . y ) ; } 
double dist ( point a , point b ) { return sqrt ( ( a . x - b . x ) * ( a . x - b . x ) + ( a . y - b . y ) * ( a . y - b . y ) ) ; } 
int main ( ) { int ila , ilb ; double la , lb , lc , lkx , ltx , lky , lty ; point a , b , ah , bh , av , bv ; cin >> ila >> ilb >> lc >> a . x >> a . y >> b . x >> b . y ; if ( ila * ilb ) { la = ila ; lb = ilb ; lkx = - la / lb ; lky = - lb / la ; ltx = - lc / lb ; lty = - lc / la ; av . x = a . x ; av . y = lkx * av . x + ltx ; bv . x = b . x ; bv . y = lkx * bv . x + ltx ; ah . y = a . y ; ah . x = lky * ah . y + lty ; bh . y = b . y ; bh . x = lky * bh . y + lty ; double mn = rec_dist ( a , b ) ; updl ( mn , dist ( a , av ) + dist ( av , bv ) + dist ( bv , b ) ) ; updl ( mn , dist ( a , av ) + dist ( av , bh ) + dist ( bh , b ) ) ; updl ( mn , dist ( a , ah ) + dist ( ah , bv ) + dist ( bv , b ) ) ; updl ( mn , dist ( a , ah ) + dist ( ah , bh ) + dist ( bh , b ) ) ; cout << fixed << setprecision ( <LITERAL> ) << mn << endl ; } else { cout << fixed << setprecision ( <LITERAL> ) << rec_dist ( a , b ) << endl ; } return <LITERAL> ; } 
double dis ( Node a , Node b ) { return ( double ) abs ( a . x - b . x ) + abs ( a . y - b . y ) ; } 
double dist ( Node a , Node b ) { return sqrt ( ( a . x - b . x ) * ( a . x - b . x ) + ( a . y - b . y ) * ( a . y - b . y ) ) ; } 
int main ( ) { int a , b , c , g ; ll x , y ; scanf ( <LITERAL> , & a , & b , & c , & s . x , & s . y , & t . x , & t . y ) ; if ( ! a || ! b ) return printf ( <LITERAL> , dis ( s , t ) ) , <LITERAL> ; ; A [ <LITERAL> ] . x = s . x ; A [ <LITERAL> ] . y = s . y ; A [ <LITERAL> ] . y = ( - a * s . x - c ) / b ; A [ <LITERAL> ] . x = ( - b * s . y - c ) / a ; B [ <LITERAL> ] . x = t . x ; B [ <LITERAL> ] . y = t . y ; B [ <LITERAL> ] . y = ( - a * t . x - c ) / b ; B [ <LITERAL> ] . x = ( - b * t . y - c ) / a ; double ans = dis ( s , t ) ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) ans = min ( ans , dis ( s , A [ i ] ) + dist ( A [ i ] , B [ j ] ) + dis ( B [ j ] , t ) ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { double a , b , c , x1 , y1 , x2 , y2 ; scanf ( <LITERAL> , & a , & b , & c , & x1 , & y1 , & x2 , & y2 ) ; Point A ( x1 , y1 ) , B ( x2 , y2 ) , Ap , Bp ; double res = A . dis ( B , true ) ; if ( abs ( x1 - x2 ) < EPS || abs ( y1 - y2 ) < EPS || abs ( a ) < EPS || abs ( b ) < EPS ) return <LITERAL> * printf ( <LITERAL> , res ) ; Ap = Point ( x1 , - ( a * x1 + c ) / b ) ; Bp = Point ( x2 , - ( a * x2 + c ) / b ) ; res = min ( res , A . dis ( Ap ) + Ap . dis ( Bp ) + B . dis ( Bp ) ) ; ; Ap = Point ( x1 , - ( a * x1 + c ) / b ) ; Bp = Point ( - ( b * y2 + c ) / a , y2 ) ; res = min ( res , A . dis ( Ap ) + Ap . dis ( Bp ) + B . dis ( Bp ) ) ; ; Ap = Point ( - ( b * y1 + c ) / a , y1 ) ; Bp = Point ( x2 , - ( a * x2 + c ) / b ) ; res = min ( res , A . dis ( Ap ) + Ap . dis ( Bp ) + B . dis ( Bp ) ) ; ; Ap = Point ( - ( b * y1 + c ) / a , y1 ) ; Bp = Point ( - ( b * y2 + c ) / a , y2 ) ; res = min ( res , A . dis ( Ap ) + Ap . dis ( Bp ) + B . dis ( Bp ) ) ; ; printf ( <LITERAL> , res ) ; return <LITERAL> ; } 
double dis ( double x , double y , double xx , double yy ) { return sqrt ( ( xx - x ) * ( xx - x ) + ( yy - y ) * ( yy - y ) ) ; } 
int main ( ) { scanf ( <LITERAL> , & a , & b , & c , & sx , & sy , & tx , & ty ) ; double lsx = - ( b * sy + c ) / a ; double lsy = - ( a * sx + c ) / b ; double ltx = - ( b * ty + c ) / a ; double lty = - ( a * tx + c ) / b ; double ans = fabs ( tx - sx ) + fabs ( ty - sy ) ; ans = min ( ans , fabs ( lsy - sy ) + dis ( sx , lsy , tx , lty ) + fabs ( lty - ty ) ) ; ans = min ( ans , fabs ( lsy - sy ) + dis ( sx , lsy , ltx , ty ) + fabs ( ltx - tx ) ) ; ans = min ( ans , fabs ( lsx - sx ) + dis ( lsx , sy , tx , lty ) + fabs ( lty - ty ) ) ; ans = min ( ans , fabs ( lsx - sx ) + dis ( lsx , sy , ltx , ty ) + fabs ( ltx - tx ) ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void work ( ) { for ( int i = <LITERAL> ; i <= tot ; i ++ ) { if ( cnt [ i ] & <LITERAL> ) cnt [ i ] ++ , ans2 ++ ; cnt [ i ] /= <LITERAL> ; } ans2 ++ ; } 
int main ( ) { n = read ( ) ; if ( n == <LITERAL> ) { puts ( <LITERAL> ) ; return <LITERAL> ; } int t = n , now = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( t % i ) continue ; p [ ++ tot ] = i ; now *= i ; while ( t % i == <LITERAL> ) t /= i , cnt [ tot ] ++ ; } int bin = <LITERAL> ; for ( int i = <LITERAL> ; i >= <LITERAL> ; i -- ) { bool flag = <LITERAL> ; for ( int j = <LITERAL> ; j <= tot ; j ++ ) { if ( cnt [ j ] > ( <LITERAL> << i ) ) flag = <LITERAL> ; } if ( flag ) bin = i ; else break ; } } int flag = <LITERAL> ; for ( int i = <LITERAL> ; i <= tot ; i ++ ) { if ( cnt [ i ] < ( <LITERAL> << bin ) ) flag = <LITERAL> ; } } } } } } } } } } } } ans = now ; ans2 = bin + flag ; ; ; printf ( <LITERAL> , ans , ans2 ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; int ans = <LITERAL> ; long long c = <LITERAL> ; int nn = n ; for ( int i = <LITERAL> ; i <= n >> <LITERAL> ; i ++ ) if ( nn % i == <LITERAL> ) { c *= i ; while ( nn % i == <LITERAL> ) nn /= i ; } if ( c == <LITERAL> ) { printf ( <LITERAL> , n , <LITERAL> ) ; return <LITERAL> ; } printf ( <LITERAL> , c ) ; long long nnn = n ; while ( c % nnn != <LITERAL> ) { c *= c ; ans ++ ; } if ( c > nnn ) ans ++ ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
signed main ( ) { { { int x ; cin >> x ; for ( int i = <LITERAL> ; i * i <= x ; i ++ ) { while ( x % i == <LITERAL> ) x /= i , f [ i ] ++ ; } if ( x > <LITERAL> ) f [ x ] ++ ; int ret = <LITERAL> , j = <LITERAL> ; for ( auto v : f ) ret *= v . first , j = max ( j , v . second ) ; bool flag1 = <LITERAL> , flag2 = <LITERAL> ; for ( auto v : f ) { if ( v . second < j ) flag1 = <LITERAL> ; } for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) if ( <LITERAL> << i == j ) flag2 = <LITERAL> ; if ( j == <LITERAL> ) flag2 = <LITERAL> ; int cnt = max ( flag1 , flag2 ) ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) if ( <LITERAL> << i >= j ) { cnt += i ; break ; } cout << ret << <LITERAL> << cnt << endl ; return <LITERAL> ; } 
int main ( ) { int n , n1 , ans = <LITERAL> , w , w1 , ma = - <LITERAL> , fl = <LITERAL> ; scanf ( <LITERAL> , & n ) , n1 = n ; if ( n == <LITERAL> ) return puts ( <LITERAL> ) , <LITERAL> ; for ( int i = <LITERAL> ; i * i <= n ; i ++ ) { if ( n % i == <LITERAL> ) { ans *= i ; w1 = w = <LITERAL> ; while ( n % i == <LITERAL> ) n /= i , w ++ ; while ( ( <LITERAL> << w1 ) < w ) { if ( w & ( <LITERAL> << w1 ) ) fl = <LITERAL> ; w1 ++ ; } if ( ma >= <LITERAL> && w1 != ma ) fl = <LITERAL> ; ma = max ( ma , w1 ) ; } } if ( n > <LITERAL> ) ans *= n , fl = ( ma != <LITERAL> ) ; printf ( <LITERAL> , ans , ma + fl ) ; return <LITERAL> ; } 
void getPrime ( ) { memset ( prime , <LITERAL> , sizeof prime ) ; for ( int i = <LITERAL> ; i <= MAX_N ; i ++ ) { if ( ! prime [ i ] ) prime [ ++ prime [ <LITERAL> ] ] = i ; for ( int j = <LITERAL> ; j <= prime [ <LITERAL> ] && prime [ j ] <= MAX_N / i ; j ++ ) { prime [ prime [ j ] * i ] = <LITERAL> ; if ( i % prime [ j ] == <LITERAL> ) break ; } } } 
int getFactors ( int x ) { fatCnt = <LITERAL> ; int tmp = x ; for ( int i = <LITERAL> ; prime [ i ] <= tmp / prime [ i ] ; i ++ ) { if ( tmp % prime [ i ] == <LITERAL> ) { factor [ fatCnt ] [ <LITERAL> ] = prime [ i ] ; factor [ fatCnt ] [ <LITERAL> ] = <LITERAL> ; while ( tmp % prime [ i ] == <LITERAL> ) { factor [ fatCnt ] [ <LITERAL> ] ++ ; tmp /= prime [ i ] ; } fatCnt ++ ; } } if ( tmp > <LITERAL> ) { factor [ fatCnt ] [ <LITERAL> ] = tmp ; factor [ fatCnt ] [ <LITERAL> ] = <LITERAL> ; fatCnt ++ ; } return fatCnt ; } 
int getbin ( int x ) { int tmp = <LITERAL> ; while ( tmp < x ) { tmp <<= <LITERAL> ; } return tmp ; } 
bool check ( int ansb ) { int cnt = factor [ <LITERAL> ] [ <LITERAL> ] ; if ( cnt != ( <LITERAL> << ansb ) ) return true ; for ( int i = <LITERAL> ; i < fatCnt ; i ++ ) { if ( factor [ i ] [ <LITERAL> ] != cnt ) return true ; } return false ; } 
int main ( ) { getPrime ( ) ; int N ; cin >> N ; getFactors ( ( int ) N ) ; int a = <LITERAL> , b = <LITERAL> ; for ( int i = <LITERAL> ; i < fatCnt ; i ++ ) { a *= factor [ i ] [ <LITERAL> ] ; b = max ( b , getbin ( factor [ i ] [ <LITERAL> ] ) ) ; } int ansb = <LITERAL> ; while ( b > <LITERAL> ) { ansb ++ ; b >>= <LITERAL> ; } if ( ansb > <LITERAL> && check ( ansb ) ) { ansb ++ ; } cout << a << <LITERAL> << ansb << endl ; return <LITERAL> ; } 
int BitLength ( unsigned int n ) { int c = <LITERAL> ; ; for ( ; n ; n >>= <LITERAL> ) ++ c ; return c ; } 
int main ( ) { long long n ; ; scanf ( <LITERAL> , & n ) ; long long ans = <LITERAL> , op = <LITERAL> , n_cp = n ; for ( long long i = <LITERAL> ; i <= n ; i ++ ) { if ( n % i == <LITERAL> ) { ans *= i ; } while ( n % i == <LITERAL> ) { n /= i ; ; } } long long ans_cp = ans ; while ( ans % n_cp ) { ans *= ans ; op ++ ; } if ( ans > n_cp ) op ++ ; ; printf ( <LITERAL> , ans_cp , op ) ; return <LITERAL> ; } 
int main ( ) { long long n , nt , cnt = <LITERAL> , mnn = <LITERAL> , t , flg = <LITERAL> ; cin >> n ; nt = n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( n % i == <LITERAL> ) { while ( n % i == <LITERAL> ) { n /= i ; } mnn *= i ; } } cnt = <LITERAL> ; t = mnn ; t %= nt ; while ( t != <LITERAL> ) { t *= t ; if ( t > nt ) { flg = <LITERAL> ; } t %= nt ; cnt ++ ; } cout << mnn << <LITERAL> << cnt + flg << endl ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( n % i == <LITERAL> ) num [ ++ cnt ] = i ; } for ( int i = <LITERAL> ; i <= cnt ; i ++ ) { if ( n && n % num [ i ] == <LITERAL> ) ans *= num [ i ] ; while ( n && n % num [ i ] == <LITERAL> ) { a [ i ] ++ ; n /= num [ i ] ; maxx = max ( maxx , a [ i ] ) ; } if ( ! n ) break ; } printf ( <LITERAL> , ans ) ; int tt = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( ( <LITERAL> << i ) >= maxx ) { tt = i ; break ; } } bool f = false ; for ( int i = <LITERAL> ; i <= cnt ; i ++ ) { if ( ! a [ i ] ) continue ; if ( a [ i ] != ( <LITERAL> << tt ) ) f = true ; } if ( f ) tt ++ ; printf ( <LITERAL> , tt ) ; return <LITERAL> ; } 
bool judge ( ) { for ( int i = <LITERAL> ; i <= cnt ; ++ i ) { if ( num [ i ] != num [ i - <LITERAL> ] ) { return true ; } } return false ; } 
void getprime ( ) { for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( n % i == <LITERAL> ) { ++ cnt ; prime [ cnt ] = i ; while ( n % i == <LITERAL> ) { ++ num [ cnt ] ; n /= i ; } } } } 
void getlg ( ) { lg [ <LITERAL> ] = - <LITERAL> ; lg [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < MAXN ; ++ i ) { lg [ i ] = lg [ i >> <LITERAL> ] + <LITERAL> ; } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; if ( n == <LITERAL> ) { printf ( <LITERAL> ) ; } else { getprime ( ) ; getlg ( ) ; min = <LITERAL> ; for ( int i = <LITERAL> ; i <= cnt ; ++ i ) { min *= prime [ i ] ; max = std :: max ( max , num [ i ] ) ; } ans = lg [ max ] + ( lg [ max ] == lg [ max - <LITERAL> ] ) ; ; if ( judge ( ) || lg [ max ] == lg [ max - <LITERAL> ] ) { ++ ans ; } printf ( <LITERAL> , min , ans ) ; } return <LITERAL> ; } 
void init ( ) { hs [ <LITERAL> ] = hs [ <LITERAL> ] = true ; tot = <LITERAL> ; for ( long long i = <LITERAL> ; i < MAXN ; i ++ ) { if ( ! hs [ i ] ) { pri [ ++ tot ] = i ; for ( long long j = i * i ; j < MAXN ; j += i ) hs [ j ] = true ; } } } 
pair < long long , int > solve ( long long x ) { if ( x == <LITERAL> ) return { <LITERAL> , <LITERAL> } ; set < int > s ; int cnt ; long long res = <LITERAL> ; for ( int i = <LITERAL> ; i <= tot && pri [ i ] * pri [ i ] <= x ; i ++ ) { if ( x % pri [ i ] == <LITERAL> ) { cnt = <LITERAL> ; while ( x % pri [ i ] == <LITERAL> ) { ++ cnt ; x /= pri [ i ] ; } res *= pri [ i ] ; s . insert ( cnt ) ; } } if ( x > <LITERAL> ) { res *= x ; s . insert ( <LITERAL> ) ; } int maxx = * s . rbegin ( ) ; if ( maxx == <LITERAL> ) return { res , <LITERAL> } ; cnt = <LITERAL> ; long long tmp = <LITERAL> ; while ( tmp < maxx ) { tmp *= <LITERAL> ; ++ cnt ; } if ( tmp != maxx || ( tmp == maxx && s . size ( ) > <LITERAL> ) ) ++ cnt ; return { res , cnt } ; } 
int main ( ) { init ( ) ; long long n ; scanf ( <LITERAL> , & n ) ; pair < long long , int > u = solve ( n ) ; printf ( <LITERAL> , u . first , u . second ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & A [ i ] ) ; } } } for ( int i = <LITERAL> ; i <= n ; ++ i ) { for ( int j = <LITERAL> ; j <= i - <LITERAL> ; ++ j ) { if ( A [ i ] - A [ j ] == i - j ) ans = max ( ans , i - j - <LITERAL> ) ; } } for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( <LITERAL> - A [ i ] == n - i ) ans = max ( ans , n - i ) ; } for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( A [ i ] - <LITERAL> == i - <LITERAL> ) ans = max ( ans , i - <LITERAL> ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; int l = <LITERAL> , r ; int t = <LITERAL> ; int res = <LITERAL> ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i ] - a [ i - <LITERAL> ] == <LITERAL> ) { ans ++ ; } else { res = ans + <LITERAL> ; int temp ; r = i - <LITERAL> ; l = r - res + <LITERAL> ; if ( res <= <LITERAL> || ( res == <LITERAL> && a [ n - <LITERAL> ] < <LITERAL> && a [ <LITERAL> ] > <LITERAL> ) ) temp = <LITERAL> ; else if ( ( l == <LITERAL> && r == n - <LITERAL> && a [ r ] == n ) || ( l == <LITERAL> && r == n - <LITERAL> && a [ r ] == <LITERAL> ) || ( l == <LITERAL> && r < n - <LITERAL> && l != r && a [ r ] == res ) || ( l > <LITERAL> && r == n - <LITERAL> && a [ r ] == <LITERAL> ) ) temp = res - <LITERAL> ; else temp = res - <LITERAL> ; t = max ( t , temp ) ; ans = <LITERAL> ; } } printf ( <LITERAL> , t ) ; return <LITERAL> ; } 
int main ( ) { int n , mx = <LITERAL> , l = <LITERAL> ; cin >> n ; arr [ <LITERAL> ] = <LITERAL> ; arr [ n + <LITERAL> ] = <LITERAL> ; arr [ n + <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> arr [ i ] ; } for ( int i = <LITERAL> ; i <= n + <LITERAL> ; i ++ ) { if ( arr [ i ] != arr [ i - <LITERAL> ] + <LITERAL> && arr [ i ] == arr [ i + <LITERAL> ] - <LITERAL> ) { l = i ; } if ( arr [ i ] == arr [ i - <LITERAL> ] + <LITERAL> && arr [ i ] != arr [ i + <LITERAL> ] - <LITERAL> ) { mx < i - l - <LITERAL> && ( mx = i - l - <LITERAL> ) ; } } cout << mx << endl ; return <LITERAL> ; } 
int main ( ) { int a [ <LITERAL> + <LITERAL> ] ; int b [ <LITERAL> + <LITERAL> ] ; int n , m , j , k , i , T ; while ( cin >> n ) { j = <LITERAL> ; for ( i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; } int sum = <LITERAL> ; for ( i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) { if ( a [ i ] == a [ i - <LITERAL> ] + <LITERAL> ) { sum ++ ; } else { b [ j ++ ] = sum ++ ; sum = <LITERAL> ; } } b [ j ++ ] = sum ; int ans = * max_element ( b , b + j ) ; if ( ans == <LITERAL> ) cout << <LITERAL> << endl ; else if ( ans == b [ <LITERAL> ] && a [ <LITERAL> ] == <LITERAL> ) cout << ans - <LITERAL> << endl ; else if ( ans == b [ j - <LITERAL> ] && a [ n - <LITERAL> ] == <LITERAL> ) cout << ans - <LITERAL> << endl ; else cout << ans - <LITERAL> << endl ; ; } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & d [ i ] ) ; d [ <LITERAL> ] = <LITERAL> ; d [ n + <LITERAL> ] = <LITERAL> ; int t = <LITERAL> , ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + <LITERAL> ; i ++ ) { if ( d [ i ] == d [ i - <LITERAL> ] + <LITERAL> ) t ++ ; else t = <LITERAL> ; if ( t >= <LITERAL> ) ans = max ( ans , t - <LITERAL> ) ; } cout << ans ; return <LITERAL> ; } 
signed main ( ) { { { cin >> n ; int l = <LITERAL> , ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) cin >> a [ i ] ; a [ n + <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) ( a [ i - <LITERAL> ] + <LITERAL> == a [ i ] && a [ i ] + <LITERAL> == a [ i + <LITERAL> ] ) ? l ++ : l = <LITERAL> , ans = max ( ans , l ) ; cout << ans << endl ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & arr [ i ] ) ; } arr [ <LITERAL> ] = <LITERAL> ; arr [ n + <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + <LITERAL> ; ++ i ) { if ( arr [ i ] - arr [ cur ] != i - cur ) { ans = std :: max ( ans , i - cur - <LITERAL> ) ; cur = i ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int N ; cin >> N ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { scanf ( <LITERAL> , a + i ) ; } a [ ++ N ] = <LITERAL> ; int pre = <LITERAL> ; int len = <LITERAL> ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { if ( a [ i ] == pre + <LITERAL> ) { len ++ ; pre ++ ; } else { ans = max ( ans , len - <LITERAL> ) ; len = <LITERAL> ; pre = a [ i ] ; } } ans = max ( ans , len - <LITERAL> ) ; cout << ans << endl ; return <LITERAL> ; } 
int main ( ) { int a [ <LITERAL> ] , n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , a + i ) ; } a [ <LITERAL> ] = <LITERAL> ; a [ n + <LITERAL> ] = <LITERAL> ; a [ n + <LITERAL> ] = - <LITERAL> ; int last = - <LITERAL> , sum = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + <LITERAL> ; i ++ ) { if ( a [ i ] - a [ i - <LITERAL> ] == <LITERAL> ) last ++ ; else { if ( last > sum ) sum = last ; last = - <LITERAL> ; } } printf ( <LITERAL> , sum ) ; } 
int main ( ) { int n , ans = <LITERAL> , now = <LITERAL> ; scanf ( <LITERAL> , & n ) ; a [ n + <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , a + i ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i - <LITERAL> ] == a [ i ] - <LITERAL> && a [ i + <LITERAL> ] == a [ i ] + <LITERAL> ) now ++ ; else ans = max ( ans , now ) , now = <LITERAL> ; } printf ( <LITERAL> , max ( ans , now ) ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int temp ; scanf ( <LITERAL> , & a [ i ] ) ; } int maxi = <LITERAL> , count2 = <LITERAL> ; int count1 = <LITERAL> , count3 = <LITERAL> ; if ( a [ <LITERAL> ] == <LITERAL> ) for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( a [ i + <LITERAL> ] - a [ i ] == <LITERAL> ) count1 ++ ; else break ; } if ( a [ n ] == <LITERAL> ) for ( int i = n ; i > <LITERAL> ; i -- ) { if ( a [ i ] - a [ i - <LITERAL> ] == <LITERAL> ) count3 ++ ; else break ; } int start = <LITERAL> , end = n ; if ( a [ <LITERAL> ] == <LITERAL> ) start = count1 + <LITERAL> ; if ( a [ n ] == <LITERAL> ) end = n - count3 - <LITERAL> ; for ( int i = start ; i < end ; i ++ ) { if ( a [ i + <LITERAL> ] - a [ i ] == <LITERAL> ) { count2 ++ ; if ( count2 > maxi ) { maxi = count2 ; } } else { if ( count2 > maxi ) maxi = count2 ; count2 = <LITERAL> ; } } maxi = max ( maxi - <LITERAL> , count3 ) ; maxi = max ( maxi , count1 ) ; cout << maxi ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; int a [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; a [ <LITERAL> ] = <LITERAL> , a [ n + <LITERAL> ] = <LITERAL> ; int c = <LITERAL> , ans = <LITERAL> ; for ( int i = <LITERAL> ; i < n + <LITERAL> ; i ++ ) { if ( a [ i ] == a [ i + <LITERAL> ] - <LITERAL> ) c ++ ; else { if ( c > <LITERAL> ) ans = max ( ans , c - <LITERAL> ) ; c = <LITERAL> ; } if ( i == n ) { if ( c > <LITERAL> ) ans = max ( ans , c - <LITERAL> ) ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int max ( int a , int b ) { return a > b ? a : b ; } 
int main ( ) { scanf ( <LITERAL> , & N ) ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { int x ; scanf ( <LITERAL> , & x ) ; if ( temp == <LITERAL> && i == N && x == <LITERAL> ) count ++ ; if ( x == temp + <LITERAL> ) count ++ ; else { ans = max ( ans , count ) ; count = <LITERAL> ; } temp = x ; } ans = max ( ans , count ) ; printf ( <LITERAL> , ( ans - <LITERAL> ) > <LITERAL> ? ans - <LITERAL> : <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & num [ i ] ) ; int maxnum = <LITERAL> ; num [ <LITERAL> ] = <LITERAL> ; num [ n + <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = i + <LITERAL> ; j <= n + <LITERAL> ; j ++ ) { if ( num [ j ] - num [ i ] == j - i ) { maxnum = max ( maxnum , j - i - <LITERAL> ) ; } } } printf ( <LITERAL> , maxnum ) ; return <LITERAL> ; } 
int main ( void ) { int n ; scanf ( <LITERAL> , & n ) ; int * p = ( int * ) malloc ( sizeof ( int ) * ( n + <LITERAL> ) ) ; p [ <LITERAL> ] = <LITERAL> ; p [ n + <LITERAL> ] = <LITERAL> ; int k = <LITERAL> , max = <LITERAL> ; for ( int i = <LITERAL> ; i < n + <LITERAL> ; i ++ ) { scanf ( <LITERAL> , & p [ i ] ) ; if ( p [ i ] - p [ i - <LITERAL> ] == <LITERAL> ) k ++ ; else { if ( k - <LITERAL> > max ) { max = k - <LITERAL> ; } k = <LITERAL> ; } } if ( p [ n + <LITERAL> ] - p [ n ] == <LITERAL> ) { k ++ ; } if ( k - <LITERAL> > max ) max = k - <LITERAL> ; printf ( <LITERAL> , max ) ; free ( p ) ; } 
int main ( ) { int n ; int a [ <LITERAL> ] = { <LITERAL> } ; scanf_s ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) scanf_s ( <LITERAL> , & a [ i ] ) ; int max = <LITERAL> ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) for ( int j = i + <LITERAL> ; j <= n - <LITERAL> ; j ++ ) { if ( a [ j ] - a [ i ] == j - i ) { if ( i == <LITERAL> && j - i > max && a [ i ] == <LITERAL> ) max = j - i ; if ( j == n - <LITERAL> && j - i > max && a [ j ] == <LITERAL> ) max = j - i ; if ( j - i - <LITERAL> > max ) max = j - i - <LITERAL> ; } } printf ( <LITERAL> , max ) ; return <LITERAL> ; } 
int main ( ) { cin >> n ; arr [ <LITERAL> ] = <LITERAL> ; arr [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x ; cin >> x ; arr [ x ] = <LITERAL> ; } ans = now = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( arr [ i ] && arr [ i + <LITERAL> ] ) now ++ ; if ( ! arr [ i + <LITERAL> ] && now != <LITERAL> ) { if ( now > ans ) ans = now ; now = <LITERAL> ; } } ans -- ; if ( ans < <LITERAL> ) ans = <LITERAL> ; cout << ans << endl ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; int t = <LITERAL> ; while ( t < n ) { cin >> A [ t ] ; t ++ ; } int count = <LITERAL> ; int maxlen = <LITERAL> ; for ( int i = <LITERAL> ; i < t ; i ++ ) { if ( ( A [ i ] + <LITERAL> ) == A [ i + <LITERAL> ] && ( A [ i ] - <LITERAL> ) == A [ i - <LITERAL> ] && i > <LITERAL> && i < t - <LITERAL> ) { count = count + <LITERAL> ; continue ; } else if ( ( A [ i ] == <LITERAL> && A [ i ] + <LITERAL> == A [ i + <LITERAL> ] && i == <LITERAL> ) || ( A [ i ] == <LITERAL> && A [ i ] - <LITERAL> == A [ i - <LITERAL> ] && i == t - <LITERAL> ) ) { count = count + <LITERAL> ; if ( i != t - <LITERAL> ) { continue ; } } if ( count > maxlen ) { maxlen = count ; } count = <LITERAL> ; } cout << maxlen ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; a [ <LITERAL> ] = <LITERAL> ; a [ n + <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + <LITERAL> ; i ++ ) { if ( a [ i ] == a [ i - <LITERAL> ] + <LITERAL> ) { int temp = <LITERAL> ; while ( a [ i ] == a [ i - <LITERAL> ] + <LITERAL> ) i ++ , temp ++ ; ans = max ( ans , temp ) ; } } ans = max ( ans , <LITERAL> ) ; printf ( <LITERAL> , ans - <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; a [ <LITERAL> ] = <LITERAL> ; a [ n + <LITERAL> ] = <LITERAL> ; int sum = - <LITERAL> , ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + <LITERAL> ; i ++ ) { if ( a [ i ] == a [ i - <LITERAL> ] + <LITERAL> ) sum ++ ; else ans = max ( ans , sum ) , sum = - <LITERAL> ; } ans = max ( ans , sum ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
int main ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) a [ i ] = read ( ) ; a [ <LITERAL> ] = <LITERAL> ; a [ n + <LITERAL> ] = <LITERAL> ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + <LITERAL> ; i ++ ) { int now = <LITERAL> ; for ( int j = i + <LITERAL> ; j <= n + <LITERAL> ; j ++ ) { if ( a [ j ] == a [ j - <LITERAL> ] + <LITERAL> ) now ++ ; else break ; } ans = max ( ans , now - <LITERAL> ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; int ans = <LITERAL> , cnt = <LITERAL> ; scanf ( <LITERAL> , & n ) ; a [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; d [ i ] = a [ i ] - a [ i - <LITERAL> ] ; } } d [ n + <LITERAL> ] = <LITERAL> - a [ n ] ; for ( int i = <LITERAL> ; i <= n + <LITERAL> ; i ++ ) { if ( d [ i ] == d [ i - <LITERAL> ] && d [ i ] == <LITERAL> ) { cnt ++ ; } else { ans = max ( ans , cnt ) ; cnt = <LITERAL> ; } } ans = max ( ans , cnt ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; long long ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x = i ; for ( int j = <LITERAL> ; x * j <= n ; j ++ ) { ans += j ; } } cout << ans * <LITERAL> ; } 
int main ( ) { long long n , m = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( long long i = <LITERAL> ; i < n ; i ++ ) { for ( long long o = <LITERAL> ; ; o ++ ) { if ( i * o > n ) { break ; } m += o * <LITERAL> ; } } printf ( <LITERAL> , m ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; i * j <= n ; j ++ ) { ans += j * <LITERAL> ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & N ) ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { if ( N / i > <LITERAL> ) ans += ( <LITERAL> + ( N / i ) ) * ( N / i - <LITERAL> ) * <LITERAL> ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
signed main ( ) { cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( n / i <= <LITERAL> ) break ; ans += ( n / i * ( n / i + <LITERAL> ) / <LITERAL> ) - <LITERAL> ; } cout << ans * <LITERAL> << endl ; return <LITERAL> ; } 
int main ( void ) { long long n , ans = <LITERAL> , b ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { b = n / i ; if ( b <= <LITERAL> ) break ; ans += ( <LITERAL> + b ) * b / <LITERAL> - <LITERAL> ; } ans *= <LITERAL> ; printf ( <LITERAL> , ans ) ; } 
long long LL calc ( int x ) { if ( x >= <LITERAL> ) return <LITERAL> * ( <LITERAL> + x ) * ( x - <LITERAL> ) / <LITERAL> ; else return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; LL ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { ans += calc ( n / i ) ; } printf ( <LITERAL> , ans * <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { int num = n / i ; if ( num > <LITERAL> ) ans += ( long long ) <LITERAL> * ( <LITERAL> + num ) * ( num - <LITERAL> ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; long long ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n / <LITERAL> ; ++ i ) { long long tmp = n / i ; ans += ( <LITERAL> + tmp ) * ( tmp - <LITERAL> ) / <LITERAL> ; } printf ( <LITERAL> , ans * <LITERAL> ) ; } 
int main ( ) { long long n , res = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( long long i = <LITERAL> ; i <= n ; i ++ ) { long long tmp = n / i ; res += ( tmp - <LITERAL> ) * ( tmp + <LITERAL> ) / <LITERAL> ; } printf ( <LITERAL> , res * <LITERAL> ) ; return <LITERAL> ; } 
ll pow ( ll a , ll p ) { ll ans = <LITERAL> ; for ( ; p ; p >>= <LITERAL> ) { if ( p & <LITERAL> ) ans = ( ans * a ) % MOD ; a = ( a * a ) % MOD ; } return ans % MOD ; } 
int main ( ) { ios :: sync_with_stdio ( false ) ; cin . tie ( <LITERAL> ) ; int n , q ; cin >> n >> q >> s ; d [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( s [ i - <LITERAL> ] == <LITERAL> ) d [ i ] = d [ i - <LITERAL> ] + <LITERAL> ; else d [ i ] = d [ i - <LITERAL> ] ; } while ( q -- ) { ll l , r ; cin >> l >> r ; ll len = r - l + <LITERAL> ; ll dis1 = d [ r ] - d [ l - <LITERAL> ] ; ll cnt = len - dis1 ; ll ans = pow ( <LITERAL> , dis1 ) - <LITERAL> ; if ( ans < <LITERAL> ) ans += MOD ; ans = ( ans * pow ( <LITERAL> , cnt ) ) % MOD ; cout << ans << endl ; } return <LITERAL> ; } 
int main ( ) { int n , q ; scanf ( <LITERAL> , & n , & q ) ; mi [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) mi [ i ] = mi [ i - <LITERAL> ] * <LITERAL> % mod ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { char ch = getchar ( ) ; while ( ! isdigit ( ch ) ) ch = getchar ( ) ; if ( ch == <LITERAL> ) b [ i ] = b [ i - <LITERAL> ] + <LITERAL> ; else b [ i ] = b [ i - <LITERAL> ] ; } for ( int i = <LITERAL> ; i <= q ; i ++ ) { int l , r ; scanf ( <LITERAL> , & l , & r ) ; int sum = b [ r ] - b [ l - <LITERAL> ] ; if ( sum == <LITERAL> ) { printf ( <LITERAL> ) ; continue ; } if ( r - l == <LITERAL> ) { printf ( <LITERAL> ) ; continue ; } int ans = b [ r ] - b [ l - <LITERAL> ] , ans1 = r - l + <LITERAL> - sum ; printf ( <LITERAL> , ( mi [ ans ] - <LITERAL> ) * mi [ ans1 ] % mod ) ; } return <LITERAL> ; } 
LL g ( LL a , LL n ) { LL ans = <LITERAL> ; while ( n ) { if ( n & <LITERAL> ) ans = ans * a % MOD ; a = a * a % MOD ; n >>= <LITERAL> ; } return ans ; } 
int main ( ) { scanf ( <LITERAL> , & N , & Q ) ; scanf ( <LITERAL> , raw ) ; for ( int i = <LITERAL> ; i < N ; i ++ ) if ( raw [ i ] - <LITERAL> ) Ones [ i + <LITERAL> ] = Ones [ i ] + <LITERAL> ; else Ones [ i + <LITERAL> ] = Ones [ i ] ; for ( int i = <LITERAL> ; i <= Q ; i ++ ) { LL l , r ; scanf ( <LITERAL> , & l , & r ) ; LL a , b ; a = Ones [ r ] - Ones [ l - <LITERAL> ] ; b = r - l + <LITERAL> - a ; printf ( <LITERAL> , ( ( ( g ( <LITERAL> , a ) - <LITERAL> ) % MOD ) * ( g ( <LITERAL> , b ) % MOD ) ) % MOD ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
int main ( ) { n = read ( ) ; q = read ( ) ; scanf ( <LITERAL> , str + <LITERAL> ) ; bin [ <LITERAL> ] = sb [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + <LITERAL> ; i ++ ) { cnt [ i ] = cnt [ i - <LITERAL> ] + ( str [ i ] - <LITERAL> ) ; if ( i > <LITERAL> ) bin [ i ] = bin [ i - <LITERAL> ] * <LITERAL> % mod , sb [ i ] = ( sb [ i - <LITERAL> ] + bin [ i ] ) % mod ; } while ( q -- ) { int l = read ( ) , r = read ( ) , len = r - l + <LITERAL> , cnt1 = cnt [ r ] - cnt [ l - <LITERAL> ] , cnt0 = len - cnt1 ; printf ( <LITERAL> , ( sb [ cnt1 ] + ( bin [ cnt1 + <LITERAL> ] - <LITERAL> + mod ) % mod * sb [ cnt0 ] % mod ) % mod ) ; } return <LITERAL> ; } 
int main ( ) { int n , q , l , r , x , y ; scanf ( <LITERAL> , & n , & q , s + <LITERAL> ) ; for ( int i = <LITERAL> ; s [ i ] ; i ++ ) a [ i ] = s [ i ] - <LITERAL> , a [ i ] += a [ i - <LITERAL> ] ; c [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { b [ i ] = ( b [ i - <LITERAL> ] * <LITERAL> + <LITERAL> ) % mo ; c [ i ] = c [ i - <LITERAL> ] * <LITERAL> % mo ; } for ( int i = <LITERAL> ; i < q ; i ++ ) { scanf ( <LITERAL> , & l , & r ) ; x = a [ r ] - a [ l - <LITERAL> ] , y = r - l + <LITERAL> - x ; printf ( <LITERAL> , <LITERAL> * b [ x ] * c [ y ] % mo ) ; } return <LITERAL> ; } 
long long fastpow ( long long a , long long n ) { long long ans = <LITERAL> ; while ( n ) { if ( n & <LITERAL> ) { ans *= a ; ans %= mod ; } a *= a ; a %= mod ; n >>= <LITERAL> ; } return ans ; } 
int main ( ) { int n , q , l , r ; scanf ( <LITERAL> , & n , & q , str ) ; sum [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { sum [ i ] = sum [ i - <LITERAL> ] + str [ i - <LITERAL> ] - <LITERAL> ; } for ( int i = <LITERAL> ; i < q ; i ++ ) { scanf ( <LITERAL> , & l , & r ) ; printf ( <LITERAL> , ( fastpow ( <LITERAL> , sum [ r ] - sum [ l - <LITERAL> ] ) - <LITERAL> ) * fastpow ( <LITERAL> , r - l + <LITERAL> - sum [ r ] + sum [ l - <LITERAL> ] ) % mod ) ; } return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n , & q ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { long long tmp = getchar ( ) - <LITERAL> ; sum [ i ] = sum [ i - <LITERAL> ] + tmp ; } hex [ <LITERAL> ] = <LITERAL> ; hex [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) hex [ i ] = ( <LITERAL> * hex [ i - <LITERAL> ] ) % modn ; for ( int i = <LITERAL> ; i <= q ; i ++ ) { long long st , fi ; scanf ( <LITERAL> , & st , & fi ) ; long long one = sum [ fi ] - sum [ st - <LITERAL> ] ; long long all = fi - st + <LITERAL> ; long long jian = hex [ all ] - hex [ all - one ] ; if ( jian < <LITERAL> ) jian += modn ; printf ( <LITERAL> , jian ) ; } return <LITERAL> ; } 
long long pow ( int x ) { if ( x == <LITERAL> ) return <LITERAL> ; else { long long num = pow ( x / <LITERAL> ) ; if ( x % <LITERAL> == <LITERAL> ) return ( num * num * <LITERAL> ) % P ; else return ( num * num ) % P ; } } 
int main ( ) { int n , q , l , r ; scanf ( <LITERAL> , & n , & q ) ; scanf ( <LITERAL> , ch + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cnt [ i ] = cnt [ i - <LITERAL> ] + ch [ i ] - <LITERAL> ; } while ( q -- ) { scanf ( <LITERAL> , & l , & r ) ; int cnt1 = cnt [ r ] - cnt [ l - <LITERAL> ] ; int cnt0 = r - l + <LITERAL> - cnt1 ; int num = pow ( cnt1 ) - <LITERAL> ; if ( num < <LITERAL> ) num += P ; printf ( <LITERAL> , ( num * pow ( cnt0 ) ) % P ) ; } return <LITERAL> ; } 
void add ( int x , int v ) { for ( int i = x ; i <= n ; i += lowbit ( i ) ) c [ i ] += v ; } 
int get ( int x ) { int t = <LITERAL> ; for ( int i = x ; i ; i -= lowbit ( i ) ) t += c [ i ] ; return t ; } 
long long poww ( long long x , long long k ) { long long temp = <LITERAL> ; while ( k ) { if ( k & <LITERAL> ) temp = ( temp * x ) % mod ; x = ( x * x ) % mod ; k >>= <LITERAL> ; } return temp ; } 
int main ( ) { scanf ( <LITERAL> , & n , & q ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) add ( i , a [ i ] ) ; while ( q -- ) { int l , r ; scanf ( <LITERAL> , & l , & r ) ; long long sum = get ( r ) - get ( l - <LITERAL> ) ; ; long long zero = r - l + <LITERAL> - sum ; long long s = poww ( <LITERAL> , zero ) ; ; long long ans = - ( <LITERAL> - poww ( <LITERAL> , sum ) ) ; ; ans = ans * s ; ans %= mod ; printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
long long # define debug ( x ) cout << # x << <LITERAL> << x << endl ; const int N = <LITERAL> + <LITERAL> ; const int P = <LITERAL> + <LITERAL> ; const double eps = <LITERAL> ; const int INF = <LITERAL> ; int n , q ; int s0 [ N ] , s1 [ N ] ; string x ; int fpow ( int a , int b ) { int c = <LITERAL> ; for ( ; b ; b >>= <LITERAL> , a = a * a % P ) if ( b & <LITERAL> ) c = c * a % P ; return c ; } 
signed main ( ) { { { cin >> n >> q >> x ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( x [ i - <LITERAL> ] == <LITERAL> ) s0 [ i ] = <LITERAL> ; else s1 [ i ] = <LITERAL> ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) s0 [ i ] += s0 [ i - <LITERAL> ] , s1 [ i ] += s1 [ i - <LITERAL> ] ; while ( q -- ) { int l , r ; cin >> l >> r ; int x1 = s1 [ r ] - s1 [ l - <LITERAL> ] ; int x0 = s0 [ r ] - s0 [ l - <LITERAL> ] ; int ans = ( fpow ( <LITERAL> , x1 ) - <LITERAL> ) * fpow ( <LITERAL> , x0 ) % P ; cout << ans << endl ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) f [ <LITERAL> ] [ i ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i ] > a [ i - <LITERAL> ] ) { for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) for ( int k = <LITERAL> ; k <= j - <LITERAL> ; k ++ ) if ( f [ i - <LITERAL> ] [ k ] ) { pre [ i ] [ j ] = k ; f [ i ] [ j ] |= f [ i - <LITERAL> ] [ k ] ; } } else if ( a [ i ] < a [ i - <LITERAL> ] ) { for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) for ( int k = j + <LITERAL> ; k <= <LITERAL> ; k ++ ) if ( f [ i - <LITERAL> ] [ k ] ) { pre [ i ] [ j ] = k ; f [ i ] [ j ] |= f [ i - <LITERAL> ] [ k ] ; } } else if ( a [ i ] == a [ i - <LITERAL> ] ) { for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) for ( int k = <LITERAL> ; k <= <LITERAL> ; k ++ ) if ( j != k && f [ i - <LITERAL> ] [ k ] ) { pre [ i ] [ j ] = k ; f [ i ] [ j ] |= f [ i - <LITERAL> ] [ k ] ; } } } int fl = <LITERAL> , ss ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) if ( f [ n ] [ i ] == <LITERAL> ) { fl = <LITERAL> ; ss = i ; break ; } if ( fl == <LITERAL> ) { printf ( <LITERAL> ) ; return <LITERAL> ; } ans [ ++ len ] = ss ; int j = n ; while ( pre [ j ] [ ss ] ) { ans [ ++ len ] = pre [ j ] [ ss ] ; ss = pre [ j ] [ ss ] ; j -- ; } for ( int i = len ; i >= <LITERAL> ; i -- ) printf ( <LITERAL> , ans [ i ] ) ; } 
void dfs ( int nowp , int kd ) { if ( findd ) return ; if ( nowp > n ) { findd = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { printf ( <LITERAL> , ans [ i ] ) ; } printf ( <LITERAL> ) ; return ; } if ( tag [ nowp ] [ kd ] ) return ; tag [ nowp ] [ kd ] = <LITERAL> ; ans [ nowp ] = kd ; if ( a [ nowp ] < a [ nowp + <LITERAL> ] ) { for ( int i = kd + <LITERAL> ; i <= <LITERAL> ; i ++ ) { dfs ( nowp + <LITERAL> , i ) ; } } else if ( a [ nowp ] > a [ nowp + <LITERAL> ] ) { for ( int i = kd - <LITERAL> ; i >= <LITERAL> ; i -- ) { dfs ( nowp + <LITERAL> , i ) ; } } else { for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( i != kd ) dfs ( nowp + <LITERAL> , i ) ; } } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { dfs ( <LITERAL> , i ) ; } if ( ! findd ) { printf ( <LITERAL> ) ; } return <LITERAL> ; } 
void print ( int x , int num ) { if ( ! x ) return ; print ( x - <LITERAL> , f [ x ] [ num ] ) ; printf ( <LITERAL> , num ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) f [ i ] [ j ] = - <LITERAL> ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) f [ <LITERAL> ] [ i ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) { if ( f [ i - <LITERAL> ] [ j ] == - <LITERAL> ) continue ; int t = <LITERAL> ; if ( a [ i ] < a [ i - <LITERAL> ] ) t = <LITERAL> ; if ( a [ i ] > a [ i - <LITERAL> ] ) t = <LITERAL> ; for ( int k = <LITERAL> ; k <= <LITERAL> ; k ++ ) { if ( t == <LITERAL> && j == k ) continue ; if ( t == <LITERAL> && k >= j ) continue ; if ( t == <LITERAL> && k <= j ) continue ; f [ i ] [ k ] = j ; } } } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) if ( f [ n ] [ i ] != - <LITERAL> ) { print ( n , i ) ; return <LITERAL> ; } cout << - <LITERAL> ; return <LITERAL> ; } 
bool ok ( int x , int y , int z , int w ) { if ( z != w ) return ( x < y && z < w ) || ( x > y && z > w ) ; return x != y ; } 
bool dfs ( int x ) { if ( x == n + <LITERAL> ) return <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( has [ x ] [ i ] ) continue ; if ( ok ( c [ x - <LITERAL> ] , i , a [ x - <LITERAL> ] , a [ x ] ) ) { c [ x ] = i , has [ x ] [ i ] = <LITERAL> ; if ( dfs ( x + <LITERAL> ) ) return <LITERAL> ; } } return false ; } 
signed main ( ) { { { cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) cin >> a [ i ] ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { c [ <LITERAL> ] = i ; if ( dfs ( <LITERAL> ) ) { for ( int j = <LITERAL> ; j <= n ; j ++ ) cout << c [ j ] << <LITERAL> ; cout << endl ; return <LITERAL> ; } } puts ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , a + i ) ; f [ <LITERAL> ] [ <LITERAL> ] = f [ <LITERAL> ] [ <LITERAL> ] = f [ <LITERAL> ] [ <LITERAL> ] = f [ <LITERAL> ] [ <LITERAL> ] = f [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i - <LITERAL> ] < a [ i ] ) for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { for ( int k = <LITERAL> ; k < j ; k ++ ) { if ( f [ i - <LITERAL> ] [ k ] ) f [ i ] [ j ] = <LITERAL> , pre [ i ] [ j ] = k ; } } else if ( a [ i - <LITERAL> ] > a [ i ] ) for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { for ( int k = j + <LITERAL> ; k < <LITERAL> ; k ++ ) if ( f [ i - <LITERAL> ] [ k ] ) f [ i ] [ j ] = <LITERAL> , pre [ i ] [ j ] = k ; } else for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) if ( f [ i - <LITERAL> ] [ k ] && j != k ) f [ i ] [ j ] = <LITERAL> , pre [ i ] [ j ] = k ; } int fl = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( f [ n ] [ i ] ) fl = i + <LITERAL> ; } if ( ! fl ) return puts ( <LITERAL> ) , <LITERAL> ; for ( int i = n ; i ; i -- ) { ans [ i ] = fl ; fl = pre [ i ] [ fl - <LITERAL> ] + <LITERAL> ; } for ( int i = <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; printf ( <LITERAL> , ans [ n ] ) ; return <LITERAL> ; } 
bool dfs ( int x , int last ) { if ( flag ) return true ; if ( x == n + <LITERAL> ) { flag = true ; for ( int i = <LITERAL> ; i <= n ; i ++ ) ans [ i ] = temp [ i ] ; return true ; } if ( x == <LITERAL> ) { for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( ! f [ x + <LITERAL> ] [ i ] ) continue ; temp [ x ] = i ; f [ x + <LITERAL> ] [ i ] = dfs ( x + <LITERAL> , i ) ; if ( flag ) return true ; } } else { if ( a [ x ] > a [ x - <LITERAL> ] ) { for ( int i = last + <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( ! f [ x + <LITERAL> ] [ i ] ) continue ; temp [ x ] = i ; f [ x + <LITERAL> ] [ i ] = dfs ( x + <LITERAL> , i ) ; if ( flag ) return true ; } } else if ( a [ x ] < a [ x - <LITERAL> ] ) { for ( int i = <LITERAL> ; i < last ; i ++ ) { if ( ! f [ x + <LITERAL> ] [ i ] ) continue ; temp [ x ] = i ; f [ x + <LITERAL> ] [ i ] = dfs ( x + <LITERAL> , i ) ; if ( flag ) return true ; } } else if ( a [ x ] == a [ x - <LITERAL> ] ) { for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( i == last ) continue ; if ( ! f [ x + <LITERAL> ] [ i ] ) continue ; temp [ x ] = i ; f [ x + <LITERAL> ] [ i ] = dfs ( x + <LITERAL> , i ) ; if ( flag ) return true ; } } } return false ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; memset ( f , - <LITERAL> , sizeof ( f ) ) ; dfs ( <LITERAL> , <LITERAL> ) ; if ( ! flag ) return printf ( <LITERAL> ) , <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
int main ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) a [ i ] = read ( ) ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) f [ <LITERAL> ] [ i ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) { for ( int k = <LITERAL> ; k <= <LITERAL> ; k ++ ) { if ( a [ i ] > a [ i - <LITERAL> ] && j > k && f [ i - <LITERAL> ] [ k ] ) f [ i ] [ j ] |= f [ i - <LITERAL> ] [ k ] , pre [ i ] [ j ] = k ; if ( a [ i ] < a [ i - <LITERAL> ] && j < k && f [ i - <LITERAL> ] [ k ] ) f [ i ] [ j ] |= f [ i - <LITERAL> ] [ k ] , pre [ i ] [ j ] = k ; if ( a [ i ] == a [ i - <LITERAL> ] && k != j && f [ i - <LITERAL> ] [ k ] ) f [ i ] [ j ] |= f [ i - <LITERAL> ] [ k ] , pre [ i ] [ j ] = k ; } } } int pos = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) if ( f [ n ] [ i ] ) pos = i ; if ( ! pos ) { puts ( <LITERAL> ) ; return <LITERAL> ; } for ( int i = n ; i >= <LITERAL> ; i -- ) { ans [ i ] = pos ; pos = pre [ i ] [ pos ] ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n ) ; gets ( str ) ; if ( n == <LITERAL> ) puts ( <LITERAL> ) ; else { for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( str [ i ] != str [ i - <LITERAL> ] ) { puts ( <LITERAL> ) ; putchar ( str [ i - <LITERAL> ] ) ; putchar ( str [ i ] ) ; return <LITERAL> ; } } puts ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , s + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( s [ i ] != s [ i - <LITERAL> ] ) { printf ( <LITERAL> , s [ i - <LITERAL> ] , s [ i ] ) ; return <LITERAL> ; } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n >> s ; int flag = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( s [ i ] != s [ i - <LITERAL> ] ) { puts ( <LITERAL> ) ; printf ( <LITERAL> , s [ i - <LITERAL> ] , s [ i ] ) ; return <LITERAL> ; } } puts ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n , s + <LITERAL> ) ; s [ <LITERAL> ] = s [ <LITERAL> ] ; for ( int i = <LITERAL> ; s [ i ] ; i ++ ) { if ( s [ i ] != s [ i - <LITERAL> ] ) { puts ( <LITERAL> ) ; printf ( <LITERAL> , s [ i - <LITERAL> ] , s [ i ] ) ; return <LITERAL> ; } } puts ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; scanf ( <LITERAL> , ch ) ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( ch [ i ] != ch [ i + <LITERAL> ] ) { printf ( <LITERAL> ) ; printf ( <LITERAL> , ch [ i ] , ch [ i + <LITERAL> ] ) ; return <LITERAL> ; } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n ; string str ; cin >> n >> str ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( str [ i ] != str [ i + <LITERAL> ] ) { cout << <LITERAL> << str [ i ] << str [ i + <LITERAL> ] ; return <LITERAL> ; } } cout << <LITERAL> ; return <LITERAL> ; } 
int main ( ) { int n ; string s ; cin >> n >> s ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( s [ i ] != s [ i + <LITERAL> ] ) { cout << <LITERAL> << s . substr ( i , <LITERAL> ) << endl ; return <LITERAL> ; } } cout << <LITERAL> ; return <LITERAL> ; } 
signed main ( ) { { { int n ; cin >> n ; string xx ; cin >> xx ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( xx [ i ] != xx [ i - <LITERAL> ] ) { puts ( <LITERAL> ) ; putchar ( xx [ i - <LITERAL> ] ) ; putchar ( xx [ i ] ) ; putchar ( <LITERAL> ) ; return <LITERAL> ; } } puts ( <LITERAL> ) ; return <LITERAL> ; } 
bool check ( int l , int r ) { char temp = s [ l ] ; int cnt = <LITERAL> , now = l + <LITERAL> ; while ( now <= r ) { if ( cnt == <LITERAL> ) { temp = s [ now ] ; cnt = <LITERAL> ; } else { if ( s [ now ] == temp ) cnt ++ ; else { cnt -- ; } } now ++ ; } if ( cnt > <LITERAL> ) return false ; else return true ; } 
int main ( ) { scanf ( <LITERAL> , & len ) ; scanf ( <LITERAL> , s ) ; for ( int i = <LITERAL> ; i < len - <LITERAL> ; i ++ ) { for ( int j = i + <LITERAL> ; j < len ; j ++ ) { if ( check ( i , j ) ) { printf ( <LITERAL> ) ; for ( int k = i ; k <= j ; k ++ ) printf ( <LITERAL> , s [ k ] ) ; return <LITERAL> ; } } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { memset ( a , <LITERAL> , sizeof ( a ) ) ; bool flag = false ; int t ; cin >> n ; getchar ( ) ; cin . getline ( s , <LITERAL> ) ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) a [ <LITERAL> ] [ i ] = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) a [ i + <LITERAL> ] [ j ] = a [ i ] [ j ] ; a [ i + <LITERAL> ] [ static_cast < int > ( s [ i ] ) - <LITERAL> ] ++ ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= n - i + <LITERAL> ; j ++ ) { t = <LITERAL> ; for ( int k = <LITERAL> ; k <= <LITERAL> ; k ++ ) if ( a [ j + i - <LITERAL> ] [ k ] - a [ j - <LITERAL> ] [ k ] > t ) t = a [ j + i - <LITERAL> ] [ k ] - a [ j - <LITERAL> ] [ k ] ; if ( <LITERAL> * t <= i ) { cout << <LITERAL> << endl ; for ( int k = j - <LITERAL> ; k <= j + i - <LITERAL> ; k ++ ) cout << s [ k ] ; return <LITERAL> ; } } } if ( ! flag ) cout << <LITERAL> ; return <LITERAL> ; } 
int main ( ) { int n ; char s [ <LITERAL> ] ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> s [ i ] ; } for ( int k = <LITERAL> ; k < n - <LITERAL> ; k ++ ) { if ( s [ k ] != s [ k + <LITERAL> ] ) { cout << <LITERAL> << endl ; for ( int i = k ; i <= k + <LITERAL> ; i ++ ) { cout << s [ i ] ; } return <LITERAL> ; } } cout << <LITERAL> << endl ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; scanf ( <LITERAL> , s + <LITERAL> ) ; int flag = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) if ( s [ i ] != s [ i - <LITERAL> ] ) { flag = i ; break ; } if ( ! flag ) puts ( <LITERAL> ) ; else printf ( <LITERAL> , s [ flag - <LITERAL> ] , s [ flag ] ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; scanf ( <LITERAL> , st ) ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( st [ i ] != st [ i + <LITERAL> ] ) { printf ( <LITERAL> , st [ i ] , st [ i + <LITERAL> ] ) ; return <LITERAL> ; } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , s ) ; int len = strlen ( s ) ; for ( int i = <LITERAL> ; i < len ; ++ i ) ++ num [ s [ i ] ] ; for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) if ( num [ i ] > n / <LITERAL> ) c = i ; if ( c == <LITERAL> ) { puts ( <LITERAL> ) ; puts ( s ) ; return <LITERAL> ; } if ( num [ c ] == n ) { puts ( <LITERAL> ) ; return <LITERAL> ; } for ( int i = <LITERAL> ; i < len ; ++ i ) if ( s [ i ] != s [ i + <LITERAL> ] ) { puts ( <LITERAL> ) ; printf ( <LITERAL> , s [ i ] , s [ i + <LITERAL> ] ) ; return <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { int n , t = <LITERAL> ; char a [ <LITERAL> ] ; scanf ( <LITERAL> , & n ) ; getchar ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( a [ i ] != a [ i + <LITERAL> ] ) { printf ( <LITERAL> ) ; printf ( <LITERAL> , a [ i ] , a [ i + <LITERAL> ] ) ; t = <LITERAL> ; break ; } } if ( t == <LITERAL> ) printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; string s ; getchar ( ) ; cin >> s ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( s [ i ] != s [ i + <LITERAL> ] ) { cout << <LITERAL> << endl ; cout << s [ i ] << s [ i + <LITERAL> ] ; return <LITERAL> ; } } cout << <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; scanf ( <LITERAL> , str + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { memset ( ch , <LITERAL> , sizeof ( ch ) ) ; memset ( cnt , <LITERAL> , sizeof ( cnt ) ) ; int k = <LITERAL> , mx = <LITERAL> ; for ( int j = i ; j <= n ; j ++ ) { s [ ++ k ] = str [ j ] ; cnt [ str [ j ] ] ++ ; mx = max ( mx , cnt [ str [ j ] ] ) ; if ( mx <= ( double ) k / <LITERAL> ) { printf ( <LITERAL> ) ; for ( int p = <LITERAL> ; p <= k ; p ++ ) printf ( <LITERAL> , s [ p ] ) ; return <LITERAL> ; } } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
bool check ( int num ) { int tot = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { tot += cnt [ i ] / num ; if ( tot >= k ) break ; } return tot >= k ; } 
int main ( ) { n = read ( ) ; k = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x = read ( ) ; cnt [ x ] ++ ; } int l = <LITERAL> , r = n , mid , ans = <LITERAL> ; while ( l <= r ) { mid = ( l + r ) >> <LITERAL> ; if ( check ( mid ) ) ans = mid , l = mid + <LITERAL> ; else r = mid - <LITERAL> ; } } int len = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < cnt [ i ] / ans ; j ++ ) { printf ( <LITERAL> , i ) ; len ++ ; if ( len == k ) return <LITERAL> ; } } return <LITERAL> ; } 
bool check ( int x ) { int sum = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { sum += num [ i ] / x ; } return sum >= k ; } 
int main ( ) { int x ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & x ) , num [ x ] ++ ; } int l = <LITERAL> , r = n / k , mid ; while ( l <= r ) { mid = ( l + r ) >> <LITERAL> ; if ( check ( mid ) ) l = mid + <LITERAL> ; else r = mid - <LITERAL> ; } int ans = k , w ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { w = min ( ans , num [ i ] / r ) , ans -= w ; for ( int j = <LITERAL> ; j < w ; j ++ ) printf ( <LITERAL> , i ) ; } return <LITERAL> ; } 
bool cmp ( name a , name b ) { return a . cnt > b . cnt ; } 
bool check ( int x ) { int now = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( qwq [ i ] . cnt < x ) break ; now += qwq [ i ] . cnt / x ; if ( now >= k ) return <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; int a ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a ) ; qwq [ a ] . cnt ++ ; qwq [ a ] . kd = a ; } sort ( qwq + <LITERAL> , qwq + <LITERAL> + <LITERAL> , cmp ) ; int l = <LITERAL> , r = <LITERAL> ; int ans = <LITERAL> ; while ( l < r ) { int mid = ( l + r + <LITERAL> ) >> <LITERAL> ; if ( check ( mid ) ) l = mid ; else r = mid - <LITERAL> ; } int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j <= qwq [ i ] . cnt / l ; j ++ ) { if ( que . size ( ) == k ) break ; else que . push ( qwq [ i ] . kd ) ; } } while ( ! que . empty ( ) ) { printf ( <LITERAL> , que . front ( ) ) ; que . pop ( ) ; } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int find ( int key ) { int left = <LITERAL> , right = MAXN , tmp ; while ( left <= right ) { } } 
bool judge ( int key ) { int place = <LITERAL> , cur = <LITERAL> ; if ( arr [ <LITERAL> ] . cnt < key ) { return false ; } else { for ( int i = <LITERAL> ; i < MAXN ; ++ i ) { if ( arr [ i + <LITERAL> ] . cnt < key ) { place = i ; break ; } } for ( int i = place ; i ; -- i ) { int tmp = arr [ i ] . cnt ; while ( tmp >= key ) { res [ ++ cur ] = arr [ i ] . num ; tmp -= key ; if ( cur == k ) { return true ; } } } } return false ; } 
int search ( ) { int left = <LITERAL> , right = n / k , tmp = <LITERAL> ; while ( left <= right ) { int mid = ( left + right ) >> <LITERAL> ; if ( judge ( mid ) ) { tmp = mid ; for ( int i = <LITERAL> ; i <= k ; ++ i ) { result [ i ] = res [ i ] ; } left = mid + <LITERAL> ; } else { right = mid - <LITERAL> ; } } return tmp ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & a ) ; arr [ a ] . num = a ; ++ arr [ a ] . cnt ; } std :: sort ( arr + <LITERAL> , arr + MAXN ) ; ans = search ( ) ; for ( int i = <LITERAL> ; i <= k ; ++ i ) { printf ( <LITERAL> , result [ i ] ) ; } return <LITERAL> ; } 
bool cmp ( NODE x , NODE y ) { return x . val > y . val ; } 
int update ( ) { for ( int i = <LITERAL> ; i <= k ; i ++ ) b [ i ] = t [ i ] ; } 
bool isok ( int x ) { memset ( t , <LITERAL> , sizeof ( t ) ) ; int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i <= nn + <LITERAL> ; i ++ ) { if ( a [ i ] . val / x == <LITERAL> ) return false ; int q = a [ i ] . val / x ; cnt += q ; for ( int j = <LITERAL> ; j <= q ; j ++ ) t [ ++ t [ <LITERAL> ] ] = a [ i ] . id ; if ( cnt >= k ) { update ( ) ; return true ; } } } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x ; scanf ( <LITERAL> , & x ) ; a [ x ] . val ++ ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) a [ i ] . id = i ; sort ( a + <LITERAL> , a + <LITERAL> , cmp ) ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) if ( a [ i ] . val != <LITERAL> ) nn = i ; int l = <LITERAL> , r = <LITERAL> , ans = - <LITERAL> ; while ( l <= r ) { int mid = ( l + r ) >> <LITERAL> ; if ( isok ( mid ) ) l = mid + <LITERAL> , ans = mid ; else r = mid - <LITERAL> ; ; } } for ( int i = <LITERAL> ; i <= k ; i ++ ) printf ( <LITERAL> , b [ i ] ) ; return <LITERAL> ; } 
bool operator < ( num a , num b ) { return a . cnt > b . cnt ; } 
int main ( ) { int n , k , t , ans ; ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & t ) ; arr [ t ] . n = t ; arr [ t ] . cnt ++ ; } sort ( arr , arr + <LITERAL> ) ; int l = <LITERAL> , r = arr [ <LITERAL> ] . cnt ; while ( l != r ) { { int mid = ( l + r + <LITERAL> ) / <LITERAL> ; ans = <LITERAL> ; for ( int i = <LITERAL> ; ans < k && arr [ i ] . cnt >= mid ; i ++ ) { ans += arr [ i ] . cnt / mid ; } if ( ans >= k ) { l = mid ; } else { r = mid - <LITERAL> ; } } } int cnt ; for ( int i = <LITERAL> ; cnt < k ; i ++ ) { for ( int j = <LITERAL> ; j < arr [ i ] . cnt / l && cnt < k ; j ++ ) { printf ( <LITERAL> , arr [ i ] . n ) ; cnt ++ ; } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
bool check ( int times ) { int res = k ; for ( int i = <LITERAL> ; i <= k ; i ++ ) { int can = p [ i ] . first / times ; if ( ! can && res ) return <LITERAL> ; res -= min ( res , can ) ; if ( ! res ) break ; } res = k ; for ( int i = <LITERAL> ; i <= k ; i ++ ) { int can = p [ i ] . first / times ; for ( int o = <LITERAL> ; o <= min ( res , can ) ; o ++ ) cout << p [ i ] . second << <LITERAL> ; res -= min ( res , can ) ; if ( ! res ) break ; } cout << endl ; return <LITERAL> ; } 
signed main ( ) { { { ios :: sync_with_stdio ( false ) ; cin . tie ( <LITERAL> ) ; cout . tie ( <LITERAL> ) ; cin >> n >> k ; for ( int i = <LITERAL> ; i <= n ; i ++ ) cin >> a [ i ] , num [ a [ i ] ] ++ ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) p [ i ] = make_pair ( num [ i ] , i ) ; sort ( p + <LITERAL> , p + <LITERAL> + <LITERAL> , greater < pair < int , int >> ( ) ) ; for ( int i = n ; i >= <LITERAL> ; i -- ) if ( check ( i ) ) return <LITERAL> ; } 
void upd ( ) { x = - <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) if ( a [ i - <LITERAL> ] == <LITERAL> && a [ i + <LITERAL> ] == <LITERAL> && a [ i ] == <LITERAL> ) { x = i ; break ; } } 
int main ( ) { memset ( a , <LITERAL> , sizeof ( a ) ) ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) cin >> a [ i ] ; upd ( ) ; while ( x != - <LITERAL> ) { a [ x + <LITERAL> ] = <LITERAL> ; ans ++ ; upd ( ) ; } cout << ans ; return <LITERAL> ; } 
int main ( ) { int n , flag = <LITERAL> ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; } int is101 = <LITERAL> , count = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( ! is101 ) { if ( a [ i ] == <LITERAL> ) is101 ++ ; } else if ( is101 == <LITERAL> ) { if ( a [ i ] == <LITERAL> ) is101 ++ ; } else if ( is101 == <LITERAL> ) { if ( a [ i ] == <LITERAL> ) is101 ++ ; else is101 = <LITERAL> ; } if ( is101 == <LITERAL> ) { count ++ ; is101 = <LITERAL> ; } } cout << count ; } 
int main ( ) { int n , ans = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , a + i ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i ] == <LITERAL> && a [ i - <LITERAL> ] == <LITERAL> && a [ i + <LITERAL> ] == <LITERAL> ) ans ++ , a [ i + <LITERAL> ] = <LITERAL> ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; int a [ <LITERAL> ] ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; } int ans = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( a [ i ] == <LITERAL> && a [ i - <LITERAL> ] == <LITERAL> && a [ i + <LITERAL> ] == <LITERAL> ) { a [ i + <LITERAL> ] = <LITERAL> ; ans ++ ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int judge01 ( int * a , int pos ) { if ( a [ pos + <LITERAL> ] == <LITERAL> ) { if ( a [ pos + <LITERAL> ] == <LITERAL> ) return <LITERAL> ; return <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { int n ; int a [ <LITERAL> ] ; int cnt [ <LITERAL> ] ; int top = <LITERAL> ; int k = <LITERAL> ; int i ; scanf ( <LITERAL> , & n ) ; for ( i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( i = <LITERAL> ; i <= <LITERAL> ; i ++ ) cnt [ i ] = <LITERAL> ; int pre = <LITERAL> ; while ( pre <= n - <LITERAL> ) { if ( a [ pre ] == <LITERAL> ) { if ( judge01 ( a , pre ) == <LITERAL> ) { cnt [ top ] ++ ; pre += <LITERAL> ; } else if ( judge01 ( a , pre ) == <LITERAL> ) { top ++ ; pre ++ ; } else { top ++ ; pre += <LITERAL> ; } } else pre ++ ; } for ( i = <LITERAL> ; i <= top ; i ++ ) k += ( cnt [ i ] + <LITERAL> ) / <LITERAL> ; printf ( <LITERAL> , k ) ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
int main ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) a [ i ] = read ( ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( a [ i ] == <LITERAL> && a [ i - <LITERAL> ] == a [ i + <LITERAL> ] && a [ i + <LITERAL> ] == <LITERAL> ) pos [ ++ tot ] = i ; } pos [ tot + <LITERAL> ] = <LITERAL> ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= tot ; i ++ ) { ans ++ ; if ( pos [ i ] + <LITERAL> == pos [ i + <LITERAL> ] ) i ++ ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { cin >> n ; int num = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) cin >> a [ i ] ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( ! a [ i ] && a [ i + <LITERAL> ] && a [ i - <LITERAL> ] ) { num ++ ; if ( ! a [ i + <LITERAL> ] && a [ i + <LITERAL> ] && i + <LITERAL> <= n ) a [ i + <LITERAL> ] = <LITERAL> ; else if ( ! a [ i - <LITERAL> ] && a [ i - <LITERAL> ] && i - <LITERAL> >= <LITERAL> ) a [ i - <LITERAL> ] = <LITERAL> ; } } cout << num ; } 
int main ( ) { int n , l1 , l2 , l3 , cnt = <LITERAL> ; cin >> n >> l1 >> l2 >> l3 ; if ( l1 == <LITERAL> && l2 == <LITERAL> && l3 == <LITERAL> ) { l3 = <LITERAL> ; cnt = <LITERAL> ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { l1 = l2 ; l2 = l3 ; cin >> l3 ; if ( l1 == <LITERAL> && l2 == <LITERAL> && l3 == <LITERAL> ) { l3 = <LITERAL> ; cnt ++ ; } } cout << cnt << endl ; return <LITERAL> ; } 
int getnum ( ) { memset ( need , <LITERAL> , sizeof ( need ) ) ; int tmp = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; ++ i ) { if ( arr [ i ] == <LITERAL> && arr [ i - <LITERAL> ] == <LITERAL> && arr [ i + <LITERAL> ] == <LITERAL> ) { ++ tmp ; ++ need [ i - <LITERAL> ] ; ++ need [ i + <LITERAL> ] ; } } return tmp ; } 
int getplace ( ) { for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( need [ i ] == <LITERAL> ) { return i ; } } for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( need [ i ] == <LITERAL> ) { return i ; } } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & arr [ i ] ) ; } num = getnum ( ) ; while ( num ) { arr [ getplace ( ) ] = <LITERAL> ; ++ ans ; num = getnum ( ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , k = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; } for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( a [ i ] == <LITERAL> && a [ i - <LITERAL> ] == <LITERAL> && a [ i + <LITERAL> ] == <LITERAL> ) { k ++ ; i += <LITERAL> ; } } printf ( <LITERAL> , k ) ; } 
void my ( int l , int r ) { for ( int i = l ; i <= r ; i ++ ) { if ( a [ i ] == <LITERAL> && a [ i - <LITERAL> ] == <LITERAL> && a [ i + <LITERAL> ] == <LITERAL> ) { if ( a [ i + <LITERAL> ] == <LITERAL> ) { a [ i + <LITERAL> ] = <LITERAL> ; my ( <LITERAL> , n - <LITERAL> ) ; } else a [ i - <LITERAL> ] = <LITERAL> ; ans ++ ; } } return ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; my ( <LITERAL> , n - <LITERAL> ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , ans = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( a [ i ] == <LITERAL> && a [ i - <LITERAL> ] == <LITERAL> && a [ i + <LITERAL> ] == <LITERAL> ) { ans ++ ; a [ i + <LITERAL> ] = <LITERAL> ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int turn ( int x ) { if ( x >= <LITERAL> && light [ x - <LITERAL> ] == <LITERAL> && light [ x - <LITERAL> ] == <LITERAL> ) { return x - <LITERAL> ; } else { return x + <LITERAL> ; } } 
int main ( ) { int n ; cin >> n ; int t = <LITERAL> ; while ( t < n ) { cin >> light [ t ] ; t ++ ; } int k = <LITERAL> ; for ( int i = <LITERAL> ; i < t ; i ++ ) { if ( light [ i ] == <LITERAL> && light [ i - <LITERAL> ] == <LITERAL> && light [ i + <LITERAL> ] == <LITERAL> && i >= <LITERAL> && i < n - <LITERAL> ) { light [ turn ( i ) ] = <LITERAL> ; k ++ ; } } cout << k ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( ! a [ i ] && a [ i - <LITERAL> ] && a [ i + <LITERAL> ] ) { a [ i + <LITERAL> ] = <LITERAL> ; ans ++ ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; int a [ <LITERAL> ] , disturb [ <LITERAL> ] ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , a + i ) ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( a [ i - <LITERAL> ] && a [ i + <LITERAL> ] && ! a [ i ] ) disturb [ i ] = <LITERAL> ; else disturb [ i ] = <LITERAL> ; } int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( disturb [ i ] ) { cnt ++ ; disturb [ i + <LITERAL> ] = <LITERAL> ; } } printf ( <LITERAL> , cnt ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; ++ i ) if ( a [ i ] == <LITERAL> && a [ i + <LITERAL> ] == <LITERAL> && a [ i + <LITERAL> ] == <LITERAL> ) a [ i + <LITERAL> ] = <LITERAL> , ++ cnt ; printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & hou [ i ] ) ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) if ( hou [ i - <LITERAL> ] && ! hou [ i ] && hou [ i + <LITERAL> ] ) { hou [ i + <LITERAL> ] = <LITERAL> ; ans ++ ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & num [ i ] ) ; int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( num [ i - <LITERAL> ] == <LITERAL> && num [ i ] == <LITERAL> && num [ i + <LITERAL> ] == <LITERAL> ) { cnt ++ ; i += <LITERAL> ; } } printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
int main ( ) { int n , count = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( a [ i - <LITERAL> ] && a [ i + <LITERAL> ] && ! a [ i ] ) { count ++ ; i += <LITERAL> ; ; } } printf ( <LITERAL> , count ) ; return <LITERAL> ; } 
signed main ( ) { { { ios :: sync_with_stdio ( false ) ; cin . tie ( <LITERAL> ) ; cout . tie ( <LITERAL> ) ; int n ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) cin >> a [ i ] ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( ! a [ i ] && a [ i - <LITERAL> ] == <LITERAL> && a [ i + <LITERAL> ] == <LITERAL> ) ans ++ , a [ i + <LITERAL> ] = <LITERAL> ; } cout << ans << endl ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & T ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & a [ i ] ) ; sum += a [ i ] ; } while ( T ) { sum = <LITERAL> ; num = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( T >= a [ i ] ) { sum += a [ i ] ; ++ num ; ++ ans ; T -= a [ i ] ; } } if ( num == <LITERAL> ) { break ; } ans += T / sum * num ; T %= sum ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int readn ( ) { int x = <LITERAL> ; char ch = getchar ( ) ; while ( ! isdigit ( ch ) ) ch = getchar ( ) ; while ( isdigit ( ch ) ) { x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ch - <LITERAL> ; ch = getchar ( ) ; } return x ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; int m = n ; long long T ; scanf ( <LITERAL> , & T ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { a [ i ] = readn ( ) ; sum += a [ i ] ; } bool bo = true ; ans = T / sum * m ; T = T % sum ; while ( bo ) { bo = false ; for ( int i = <LITERAL> ; i <= n ; i ++ ) if ( T >= a [ i ] ) bo = true , T -= a [ i ] , ans ++ ; else if ( b [ i ] == false ) b [ i ] = true , sum -= a [ i ] , m -- ; if ( sum == <LITERAL> ) break ; ans += T / sum * m ; T = T % sum ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
signed main ( ) { { { ios :: sync_with_stdio ( false ) ; cin . tie ( <LITERAL> ) ; cout . tie ( <LITERAL> ) ; cin >> n >> m ; for ( int x , i = <LITERAL> ; i <= n ; i ++ ) cin >> x , r . push_back ( x ) ; int ans = <LITERAL> ; while ( <LITERAL> ) { int sum = <LITERAL> , tot = <LITERAL> ; ; for ( auto v : r ) { if ( v <= m ) m -= v , ans ++ , sum += v , tot ++ ; } if ( ! sum ) break ; ans += ( m / sum ) * tot ; m %= sum ; } cout << ans << endl ; } 
int main ( ) { LL n , T , one_round = <LITERAL> , min_num = <LITERAL> + <LITERAL> ; scanf ( <LITERAL> , & n , & T ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & m [ i ] ) ; min_num = MIN ( min_num , m [ i ] ) ; one_round += m [ i ] ; } LL ans = <LITERAL> ; while ( T >= min_num ) { LL t = <LITERAL> , pay = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( T >= m [ i ] ) { t ++ ; T -= m [ i ] ; pay += m [ i ] ; } } ans += t ; ans = ans + ( T / pay ) * t ; T %= pay ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; long long T = <LITERAL> ; scanf ( <LITERAL> , & n , & T ) ; int minnum = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & num [ i ] ) ; minnum = min ( minnum , num [ i ] ) ; } long long cnt = <LITERAL> ; while ( T >= minnum ) { long long nowround = <LITERAL> ; long long nn = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( T >= num [ i ] ) { T -= num [ i ] ; nn ++ ; nowround += num [ i ] ; } } cnt += nn + T / nowround * nn ; T %= nowround ; } printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & money ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; bool flag = true ; while ( flag ) { cnt = <LITERAL> ; ini = <LITERAL> ; flag = false ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i ] <= money - ini ) { ini += a [ i ] ; cnt ++ ; flag = true ; } } if ( ! ini ) break ; ans += cnt * ( money / ini ) ; money -= ini * ( money / ini ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
inline ll read ( ) { ll x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
int main ( ) { n = read ( ) ; T = read ( ) ; cnt = n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { a [ i ] = read ( ) ; s += a [ i ] ; vis [ i ] = <LITERAL> ; } while ( cnt ) { ll tmp = T / s ; ans += tmp * cnt ; T -= tmp * s ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( vis [ i ] && T >= a [ i ] ) ans ++ , T -= a [ i ] ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( vis [ i ] && T < a [ i ] ) vis [ i ] = <LITERAL> , cnt -- , s -= a [ i ] ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { long long n , k , mn = <LITERAL> , lst , mp , sum , cnt = <LITERAL> , tcnt ; bool dbaflg , baflg ; cin >> n >> k ; ptr [ <LITERAL> ] = <LITERAL> ; arr [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> arr [ i ] ; ptr [ i ] = i + <LITERAL> ; mn > arr [ i ] && ( mn = arr [ i ] ) ; } ptr [ n ] = <LITERAL> ; while ( k >= mn ) { lst = <LITERAL> ; mp = ptr [ <LITERAL> ] ; baflg = true ; sum = <LITERAL> ; tcnt = <LITERAL> ; while ( mp != <LITERAL> ) { if ( arr [ mp ] <= k ) { k -= arr [ mp ] ; sum += arr [ mp ] ; tcnt ++ ; } else { ptr [ lst ] = ptr [ mp ] ; baflg = false ; } lst = mp ; mp = ptr [ mp ] ; } cnt += tcnt ; if ( baflg ) { cnt += ( k / sum ) * tcnt ; k %= sum ; } } cout << cnt << endl ; return <LITERAL> ; } 
int lowbit ( int x ) { return x & ( - x ) ; } 
void add ( int x , int num , LL c [ ] ) { while ( x <= n1 ) { c [ x ] += num ; x += lowbit ( x ) ; } } 
long long # define maxn <LITERAL> int a [ maxn * <LITERAL> ] , n1 , n , pre [ maxn ] , nex [ maxn ] ; int lowbit ( int x ) { return x & ( - x ) ; } void add ( int x , int num , LL c [ ] ) { while ( x <= n1 ) { c [ x ] += num ; x += lowbit ( x ) ; } } LL sum ( int x , LL c [ ] ) { { LL ans = <LITERAL> ; while ( x ) { ans += c [ x ] ; x -= lowbit ( x ) ; } return ans ; } 
long long # define maxn <LITERAL> int a [ maxn * <LITERAL> ] , n1 , n , pre [ maxn ] , nex [ maxn ] ; int lowbit ( int x ) { return x & ( - x ) ; } void add ( int x , int num , LL c [ ] ) { while ( x <= n1 ) { c [ x ] += num ; x += lowbit ( x ) ; } } LL sum ( int x , LL c [ ] ) { { LL ans = <LITERAL> ; while ( x ) { ans += c [ x ] ; x -= lowbit ( x ) ; } return ans ; } LL c [ maxn * <LITERAL> ] , d [ maxn * <LITERAL> ] , ans ; LL check ( int l , int r ) { return sum ( r , c ) - sum ( l - <LITERAL> , c ) ; } 
void work ( int & now , LL & t ) { int l = now , r = now + n - <LITERAL> , mid ; while ( l <= r ) { mid = ( l + r ) >> <LITERAL> ; if ( check ( now , mid ) > t ) r = mid - <LITERAL> ; else l = mid + <LITERAL> ; } ans += sum ( r , d ) - sum ( now - <LITERAL> , d ) , t -= check ( now , r ) ; if ( r != now - <LITERAL> ) now = nex [ ( r - <LITERAL> ) % n + <LITERAL> ] ; } 
void del ( int x ) { nex [ pre [ x ] ] = nex [ x ] , pre [ nex [ x ] ] = pre [ x ] ; add ( x , - a [ x ] , c ) , add ( x + n , - a [ x ] , c ) , add ( x , - <LITERAL> , d ) , add ( x + n , - <LITERAL> , d ) ; } 
int main ( ) { LL t , si ; int now = <LITERAL> ; scanf ( <LITERAL> , & n , & t ) , n1 = n * <LITERAL> , si = n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , a + i ) , a [ i + n ] = a [ i ] , pre [ i ] = i - <LITERAL> , nex [ i ] = i + <LITERAL> ; add ( i , a [ i ] , c ) , add ( i + n , a [ i ] , c ) , add ( i , <LITERAL> , d ) , add ( i + n , <LITERAL> , d ) ; } nex [ n ] = <LITERAL> , pre [ <LITERAL> ] = n ; while ( si ) { ans += si * ( t / sum ( n , c ) ) ; t %= sum ( n , c ) ; work ( now , t ) ; while ( si && a [ now ] > t ) { si -- , del ( now ) , now = nex [ now ] ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
bool check ( int n , int x , int y ) { return n >= ( abs ( x ) + abs ( y ) ) && ( n - abs ( x ) - abs ( y ) ) % <LITERAL> == <LITERAL> ; } 
int main ( ) { int n , x , y , x1 = <LITERAL> , y1 = <LITERAL> , l = <LITERAL> , r ; scanf ( <LITERAL> , & n , s , & x , & y ) , r = n - <LITERAL> ; if ( ! check ( n , x , y ) ) return printf ( <LITERAL> ) , <LITERAL> ; while ( check ( r - l + <LITERAL> , x - x1 , y - y1 ) && l <= r ) { switch ( s [ l ] ) { case <LITERAL> : y1 ++ ; break ; case <LITERAL> : y1 -- ; break ; case <LITERAL> : x1 -- ; break ; case <LITERAL> : x1 ++ ; break ; } l ++ ; } int ans = n ; for ( int i = l - <LITERAL> ; ~ i ; i -- ) { switch ( s [ i ] ) { case <LITERAL> : y1 -- ; break ; case <LITERAL> : y1 ++ ; break ; case <LITERAL> : x1 ++ ; break ; case <LITERAL> : x1 -- ; break ; } while ( r >= i - <LITERAL> && check ( r - i + <LITERAL> , x - x1 , y - y1 ) ) { switch ( s [ r ] ) { case <LITERAL> : y1 ++ ; break ; case <LITERAL> : y1 -- ; break ; case <LITERAL> : x1 -- ; break ; case <LITERAL> : x1 ++ ; break ; } r -- ; } ans = min ( ans , r - i + <LITERAL> ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
bool chk0 ( int x , int y , int k ) { int len = abs ( x ) + abs ( y ) ; if ( len > k ) return <LITERAL> ; if ( ( k & <LITERAL> ) ^ ( len & <LITERAL> ) ) return <LITERAL> ; return <LITERAL> ; } 
bool check ( int k ) { for ( int i = <LITERAL> ; i + k - <LITERAL> <= n ; i ++ ) { int x = qx [ i - <LITERAL> ] + hx [ i + k ] , y = qy [ i - <LITERAL> ] + hy [ i + k ] ; if ( chk0 ( x - ex , y - ey , k ) ) return <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { n = read ( ) ; scanf ( <LITERAL> , s + <LITERAL> ) ; ex = read ( ) ; ey = read ( ) ; if ( ! chk0 ( ex , ey , n ) ) { puts ( <LITERAL> ) ; return <LITERAL> ; } int x = <LITERAL> , y = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( s [ i ] == <LITERAL> ) y ++ ; if ( s [ i ] == <LITERAL> ) y -- ; if ( s [ i ] == <LITERAL> ) x -- ; if ( s [ i ] == <LITERAL> ) x ++ ; qx [ i ] = x ; qy [ i ] = y ; } if ( x == ex && y == ey ) { puts ( <LITERAL> ) ; return <LITERAL> ; } x = <LITERAL> ; y = <LITERAL> ; for ( int i = n ; i >= <LITERAL> ; i -- ) { if ( s [ i ] == <LITERAL> ) y ++ ; if ( s [ i ] == <LITERAL> ) y -- ; if ( s [ i ] == <LITERAL> ) x -- ; if ( s [ i ] == <LITERAL> ) x ++ ; hx [ i ] = x ; hy [ i ] = y ; } int l = <LITERAL> , r = n , mid , ans = n ; while ( l <= r ) { mid = ( l + r ) >> <LITERAL> ; if ( check ( mid ) ) ans = mid , r = mid - <LITERAL> ; else l = mid + <LITERAL> ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int t ; long long a , b , k , ans ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , & a , & b , & k ) ; if ( k % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , ( a - b ) * k >> <LITERAL> ) ; } else { printf ( <LITERAL> , ( ( ( a - b ) * ( k - <LITERAL> ) ) >> <LITERAL> ) + a ) ; } } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int ii = <LITERAL> ; ii < n ; ii ++ ) { long long a , b , k ; scanf ( <LITERAL> , & a , & b , & k ) ; printf ( <LITERAL> , ( a - b ) * ( k / <LITERAL> ) + a * ( k % <LITERAL> ) ) ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { long long left , right , step ; scanf ( <LITERAL> , & right , & left , & step ) ; long long cha = right - left ; long long po = <LITERAL> ; if ( step % <LITERAL> == <LITERAL> ) { po = cha * ( step / <LITERAL> ) + right ; } else po = cha * ( step / <LITERAL> ) ; printf ( <LITERAL> , po ) ; } return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { long long a , b , k ; cin >> a >> b >> k ; long long sum = <LITERAL> ; if ( k % <LITERAL> ) sum = a * ( k / <LITERAL> + <LITERAL> ) - k / <LITERAL> * b ; else sum = a * k / <LITERAL> - b * k / <LITERAL> ; cout << sum << endl ; } } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & a , & b , & k ) ; if ( k & <LITERAL> ) printf ( <LITERAL> , ( k / <LITERAL> ) * ( a - b ) + a ) ; else printf ( <LITERAL> , ( k / <LITERAL> ) * ( a - b ) ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { long long int a , b , k ; scanf ( <LITERAL> , & a , & b , & k ) ; printf ( <LITERAL> , ( a - b ) * ( k / <LITERAL> ) + ( k % <LITERAL> ) * a ) ; } return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; int t = <LITERAL> ; long long a , b , k ; while ( t < n ) { cin >> a >> b >> k ; if ( k % <LITERAL> == <LITERAL> ) { k = k / <LITERAL> ; long long h = ( a - b ) * k ; cout << h ; } else { k = ( k - <LITERAL> ) / <LITERAL> ; long long h = ( a - b ) * k + a ; cout << h ; } if ( t != n - <LITERAL> ) { cout << endl ; } t ++ ; } } 
signed main ( ) { { { ios :: sync_with_stdio ( false ) ; cin . tie ( <LITERAL> ) ; cout . tie ( <LITERAL> ) ; int t ; cin >> t ; while ( t -- ) { int a , b , k ; cin >> a >> b >> k ; cout << ( a - b ) * ( k / <LITERAL> ) + ( k & <LITERAL> ) * a << endl ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , & a , & b , & k ) ; long long ans = ( long long ) ( a - b ) * ( k / <LITERAL> ) ; if ( k & <LITERAL> ) ans += a ; printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
int main ( ) { long long int t , x = <LITERAL> , a , b , k ; cin >> t ; while ( t -- ) { cin >> a >> b >> k ; int c = k / <LITERAL> ; if ( k % <LITERAL> == <LITERAL> ) { x = c * ( a - b ) ; cout << x << endl ; } else { x = c * ( a - b ) ; x += a ; cout << x << endl ; } } return <LITERAL> ; } 
int main ( ) { int t ; cin >> t ; long long p = <LITERAL> ; for ( int i = <LITERAL> ; i <= t ; i ++ ) cin >> Q [ i ] . a >> Q [ i ] . b >> Q [ i ] . times ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { if ( Q [ i ] . times % <LITERAL> ) p = ( Q [ i ] . a - Q [ i ] . b ) * ( Q [ i ] . times / <LITERAL> ) + Q [ i ] . a ; else p = ( Q [ i ] . a - Q [ i ] . b ) * Q [ i ] . times / <LITERAL> ; cout << p << <LITERAL> ; } } 
long long q_mul ( long long a , long long b ) { long long ans = <LITERAL> ; while ( b ) { if ( b & <LITERAL> ) ans = ( ans + a ) ; a = ( a << <LITERAL> ) ; b >>= <LITERAL> ; } return ans ; } 
int main ( ) { int qnum ; int a , b , k ; cin >> qnum ; for ( int i = <LITERAL> ; i < qnum ; i ++ ) { cin >> a >> b >> k ; long long ans = <LITERAL> ; bool zhe ; int temp = a - b ; if ( temp >= <LITERAL> ) { zhe = false ; } else { zhe = true ; temp = abs ( temp ) ; } if ( k % <LITERAL> == <LITERAL> ) { ans = q_mul ( k / <LITERAL> , temp ) ; if ( zhe ) { ans = - <LITERAL> * ans ; } } else { ans = q_mul ( ( k - <LITERAL> ) / <LITERAL> , temp ) ; if ( zhe ) { ans = - <LITERAL> * ans ; } ans += a ; } cout << ans << <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { long long a , b , k ; scanf ( <LITERAL> , & a , & b , & k ) ; long long ans = ( a - b ) * ( k / <LITERAL> ) ; if ( k % <LITERAL> ) ans += a ; printf ( <LITERAL> , ans ) ; } } 
int main ( ) { ios :: sync_with_stdio ( false ) ; int T ; cin >> T ; while ( T -- ) { long long a , b , k ; cin >> a >> b >> k ; cout << a * ( ( k + <LITERAL> ) / <LITERAL> ) - b * ( k / <LITERAL> ) << endl ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { a = read ( ) ; b = read ( ) ; k = read ( ) ; ll ans = ( a - b ) * ( k / <LITERAL> ) ; if ( k & <LITERAL> ) ans += a ; printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = read ( ) ; while ( T -- ) solve ( ) ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; long long int x [ n ] = { <LITERAL> } , a [ n ] , b [ n ] , k [ n ] ; int i , j ; for ( i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] , & b [ i ] , & k [ i ] ) ; if ( k [ i ] % <LITERAL> == <LITERAL> ) x [ i ] = ( a [ i ] - b [ i ] ) * k [ i ] / <LITERAL> ; else x [ i ] = k [ i ] / <LITERAL> * ( a [ i ] - b [ i ] ) + a [ i ] ; printf ( <LITERAL> , x [ i ] ) ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { int a , b , k ; long long lst = <LITERAL> ; scanf ( <LITERAL> , & a , & b , & k ) ; int rht = a - b ; lst += ( long long ) rht * ( k / <LITERAL> ) ; if ( k % <LITERAL> ) lst += a ; printf ( <LITERAL> , lst ) ; } return <LITERAL> ; } 
int main ( ) { long t ; long long a , b , k ; cin >> t ; for ( int i = <LITERAL> ; i < t ; i ++ ) { cin >> a >> b >> k ; if ( k % <LITERAL> == <LITERAL> ) cout << ( k / <LITERAL> ) * ( a - b ) ; else cout << ( k + <LITERAL> ) / <LITERAL> * a - ( k - <LITERAL> ) / <LITERAL> * b ; cout << endl ; } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; while ( n -- ) { long long t , ans , a , b , k ; ; scanf ( <LITERAL> , & a , & b , & k ) ; t = a - b ; if ( k % <LITERAL> == <LITERAL> ) ans = ( k / <LITERAL> ) * t ; else ans = ( k - <LITERAL> ) * t / <LITERAL> + a ; printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & a , & b , & k ) ; if ( k & <LITERAL> ) { printf ( <LITERAL> , a * ( ( k >> <LITERAL> ) + <LITERAL> ) - b * ( k >> <LITERAL> ) ) ; } else { printf ( <LITERAL> , ( a - b ) * ( k >> <LITERAL> ) ) ; } } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , & a , & b , & k ) ; if ( k & <LITERAL> ) res = a ; else res = <LITERAL> ; printf ( <LITERAL> , res + ( a - b ) * ( k >> <LITERAL> ) ) ; } return <LITERAL> ; } 
int main ( ) { int n ; int i ; long long res [ <LITERAL> ] ; long long a , b , k ; long long result ; scanf ( <LITERAL> , & n ) ; for ( i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a , & b , & k ) ; if ( k % <LITERAL> == <LITERAL> ) result = ( a - b ) * ( k / <LITERAL> ) ; else result = ( a - b ) * ( ( k - <LITERAL> ) / <LITERAL> ) + a ; res [ i ] = result ; } for ( i = <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , res [ i ] ) ; printf ( <LITERAL> , res [ n ] ) ; } 
int main ( void ) { int n ; long long left ; long long right ; long long times ; scanf ( <LITERAL> , & n ) ; long long * p = ( long long * ) malloc ( sizeof ( long long ) * n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & right , & left , & times ) ; p [ i ] = ( right - left ) * ( times / <LITERAL> ) + ( times % <LITERAL> ) * right ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { printf ( <LITERAL> , p [ i ] ) ; } } 
void work ( ) { int a , b , k ; scanf ( <LITERAL> , & a , & b , & k ) ; printf ( <LITERAL> , <LITERAL> * ( a - b ) * ( k / <LITERAL> ) + ( ( k & <LITERAL> ) ? a : <LITERAL> ) ) ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) work ( ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { scanf ( <LITERAL> , & a , & b , & k ) ; if ( ! ( k % <LITERAL> ) ) printf ( <LITERAL> , ( k / <LITERAL> ) * ( a - b ) ) ; else printf ( <LITERAL> , ( k / <LITERAL> ) * ( a - b ) + a ) ; } return <LITERAL> ; } 
int max ( int a , int b ) { return a > b ? a : b ; } 
int main ( ) { scanf ( <LITERAL> , & N ) ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; tot += a [ i ] ; c [ a [ i ] ] ++ ; max_num = max ( max_num , a [ i ] ) ; } for ( int i = <LITERAL> ; i <= N ; i ++ ) { b [ i ] = tot - a [ i ] ; if ( ( b [ i ] > max_num * <LITERAL> ) || ( b [ i ] % <LITERAL> == <LITERAL> ) ) continue ; if ( c [ b [ i ] / <LITERAL> ] ) { if ( ( a [ i ] == b [ i ] / <LITERAL> && c [ a [ i ] ] > <LITERAL> ) || ( a [ i ] != b [ i ] / <LITERAL> ) ) ans [ ++ count ] = i ; } } printf ( <LITERAL> , count ) ; for ( int i = <LITERAL> ; i <= count ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; return <LITERAL> ; } 
int main ( ) { int n ; long long sum = <LITERAL> ; int ansc = <LITERAL> ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> arr [ i ] ; sum += arr [ i ] ; mem [ arr [ i ] ] ++ ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( ( sum - arr [ i ] ) % <LITERAL> == <LITERAL> ) { long long t = ( sum - arr [ i ] ) / <LITERAL> ; if ( t < <LITERAL> && mem [ t ] && ( arr [ i ] != t || mem [ t ] > <LITERAL> ) ) { ans [ ansc ++ ] = i + <LITERAL> ; } } } cout << ansc << endl ; for ( int i = <LITERAL> ; i < ansc ; i ++ ) { cout << ans [ i ] << <LITERAL> ; } return <LITERAL> ; } 
signed main ( ) { { { int n ; cin >> n ; int s = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> a [ i ] ; s += a [ i ] ; id [ i ] = make_pair ( a [ i ] , i ) ; } sort ( id + <LITERAL> , id + <LITERAL> + n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int remov = s - id [ i ] . first ; if ( remov == <LITERAL> * id [ n ] . first ) { ans . push_back ( id [ i ] . second ) ; } } if ( n >= <LITERAL> ) if ( s - id [ n ] . first - id [ n - <LITERAL> ] . first == id [ n - <LITERAL> ] . first ) ans . push_back ( id [ n ] . second ) ; cout << ans . size ( ) << endl ; for ( auto i : ans ) cout << i << <LITERAL> ; cout << endl ; return <LITERAL> ; } 
int main ( ) { long long sum = <LITERAL> ; long long n , p , ans = <LITERAL> ; memset ( a , <LITERAL> , sizeof ( a ) ) ; memset ( b , <LITERAL> , sizeof ( b ) ) ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; a [ i ] = a [ i ] * kt + i ; } sort ( a , a + n ) ; p = <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) sum += a [ i ] / kt ; if ( sum == <LITERAL> * ( a [ n - <LITERAL> ] / kt ) ) { ans ++ ; b [ ans ] = a [ n - <LITERAL> ] % kt ; } sum = sum - a [ n - <LITERAL> ] / kt ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( sum == a [ i ] / kt ) { ans ++ ; b [ ans ] = a [ i ] % kt ; } } cout << ans << endl ; for ( int i = <LITERAL> ; i <= ans - <LITERAL> ; i ++ ) cout << b [ i ] + <LITERAL> << <LITERAL> ; if ( ans != <LITERAL> ) cout << b [ ans ] + <LITERAL> ; return <LITERAL> ; } 
int main ( ) { int n , ma = <LITERAL> , ma1 = <LITERAL> ; long long sum = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , a + i ) ; sum += a [ i ] ; if ( a [ i ] > ma ) ma1 = ma , ma = a [ i ] ; else if ( a [ i ] > ma1 ) ma1 = a [ i ] ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( a [ i ] == ma ) { if ( sum - ma - ma1 == ma1 ) ans [ si ++ ] = i + <LITERAL> ; } else { if ( sum - ma - a [ i ] == ma ) ans [ si ++ ] = i + <LITERAL> ; } } printf ( <LITERAL> , si ) ; for ( int i = <LITERAL> ; i < si ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) sum [ i ] = sum [ i - <LITERAL> ] + a [ i ] ; for ( int i = <LITERAL> ; i <= n ; i ++ ) mx1 [ i ] = max ( mx1 [ i - <LITERAL> ] , a [ i ] ) ; for ( int i = n ; i >= <LITERAL> ; i -- ) mx2 [ i ] = max ( mx2 [ i + <LITERAL> ] , a [ i ] ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { long long tx = max ( mx1 [ i - <LITERAL> ] , mx2 [ i + <LITERAL> ] ) ; long long ss = sum [ n ] - a [ i ] - tx ; if ( tx == ss ) ans [ ++ cnt ] = i ; } printf ( <LITERAL> , cnt ) ; for ( int i = <LITERAL> ; i <= cnt ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & arr [ i ] ) ; sum += arr [ i ] ; ++ num [ arr [ i ] ] ; max = std :: max ( max , arr [ i ] ) ; } for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( ( sum - arr [ i ] ) % <LITERAL> == <LITERAL> ) { long long int tmp = ( sum - arr [ i ] ) >> <LITERAL> ; if ( tmp <= max && ( ( tmp != arr [ i ] && num [ tmp ] ) || ( tmp == arr [ i ] && num [ tmp ] > <LITERAL> ) ) ) { ++ ans ; res [ ans ] = i ; } } } printf ( <LITERAL> , ans ) ; for ( int i = <LITERAL> ; i <= ans ; ++ i ) { printf ( <LITERAL> , res [ i ] ) ; } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; sum += a [ i ] ; if ( a [ i ] > l ) ll = l , l = a [ i ] ; else if ( a [ i ] > ll ) ll = a [ i ] ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { long long m = l ; if ( a [ i ] == l ) m = ll ; long long sum1 = sum - a [ i ] - m ; if ( sum1 == m ) b [ ++ b [ <LITERAL> ] ] = i ; } printf ( <LITERAL> , b [ <LITERAL> ] ) ; for ( int i = <LITERAL> ; i <= b [ <LITERAL> ] ; i ++ ) printf ( <LITERAL> , b [ i ] ) ; return <LITERAL> ; } 
bool cmp ( E const & t1 , E const & t2 ) { return t1 . val < t2 . val ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] . val ) ; sum += a [ i ] . val ; a [ i ] . index = i ; } sort ( a , a + n , cmp ) ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( sum - a [ i ] . val - ( a [ n - <LITERAL> ] . val << <LITERAL> ) == <LITERAL> ) { ans [ cnt ] = a [ i ] . index ; cnt ++ ; } } if ( sum - a [ n - <LITERAL> ] . val - ( a [ n - <LITERAL> ] . val << <LITERAL> ) == <LITERAL> ) { ans [ cnt ] = a [ n - <LITERAL> ] . index ; cnt ++ ; } printf ( <LITERAL> , cnt ) ; for ( int i = <LITERAL> ; i < cnt ; i ++ ) printf ( <LITERAL> , ans [ i ] + <LITERAL> ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & arr [ i ] ) ; tot += arr [ i ] ; if ( arr [ i ] > yida ) { erda = yida ; yida = arr [ i ] ; yitag = i ; } else if ( arr [ i ] > erda ) erda = arr [ i ] ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( yitag == i ) { if ( <LITERAL> * erda == tot - arr [ i ] ) { ans ++ ; ansarr [ ans ] = i ; } } else if ( <LITERAL> * yida == tot - arr [ i ] ) { ans ++ ; ansarr [ ans ] = i ; } } printf ( <LITERAL> , ans ) ; for ( int i = <LITERAL> ; i <= ans ; i ++ ) printf ( <LITERAL> , ansarr [ i ] ) ; return <LITERAL> ; } 
int cmp ( p x , p y ) { return x . x < y . x ; } 
int main ( ) { int n ; ll sum = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] . x ) , a [ i ] . id = i , sum += a [ i ] . x ; std :: sort ( a + <LITERAL> , a + n + <LITERAL> , cmp ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( i != n ) { if ( sum - a [ n ] . x - a [ i ] . x == a [ n ] . x ) vec . push_back ( a [ i ] . id ) ; } else { if ( sum - a [ n - <LITERAL> ] . x - a [ i ] . x == a [ n - <LITERAL> ] . x ) vec . push_back ( a [ i ] . id ) ; } } if ( vec . size ( ) ) { printf ( <LITERAL> , vec . size ( ) ) ; for ( int i = <LITERAL> ; i < vec . size ( ) ; i ++ ) printf ( <LITERAL> , vec [ i ] ) ; } else printf ( <LITERAL> ) ; return <LITERAL> ; } 
bool cmp ( num n1 , num n2 ) { return ( n1 . data < n2 . data ) ; } 
int main ( ) { int n , flag = <LITERAL> ; cin >> n ; long long sum = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] . data ; a [ i ] . index = i + <LITERAL> ; sum += a [ i ] . data ; } sort ( a , a + n , cmp ) ; int count = <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { long long temp = sum - a [ i ] . data ; if ( temp == a [ n - <LITERAL> ] . data * <LITERAL> ) { result [ count ++ ] = a [ i ] . index ; } flag = <LITERAL> ; } if ( sum - a [ n - <LITERAL> ] . data == <LITERAL> * a [ n - <LITERAL> ] . data ) { result [ count ++ ] = a [ n - <LITERAL> ] . index ; } cout << count << endl ; for ( int i = <LITERAL> ; i < count ; i ++ ) { cout << result [ i ] << <LITERAL> ; } if ( flag ) cout << <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; long long tot = <LITERAL> ; int max1 = - <LITERAL> , max2 = - <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & num [ i ] ) ; tot += num [ i ] ; cnt [ num [ i ] ] ++ ; if ( num [ i ] >= max1 ) { max2 = max1 ; max1 = num [ i ] ; } else if ( num [ i ] > max2 ) max2 = num [ i ] ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { cnt [ num [ i ] ] -- ; long long nowcnt = tot - num [ i ] ; if ( nowcnt % <LITERAL> == <LITERAL> && nowcnt / <LITERAL> <= <LITERAL> && cnt [ nowcnt / <LITERAL> ] ) que . push ( i ) ; cnt [ num [ i ] ] ++ ; } printf ( <LITERAL> , ( int ) que . size ( ) ) ; while ( ! que . empty ( ) ) { printf ( <LITERAL> , que . front ( ) ) ; que . pop ( ) ; } printf ( <LITERAL> ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) a [ i ] . first = read ( ) , a [ i ] . second = i ; sort ( a + <LITERAL> , a + n + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) s [ i ] = s [ i - <LITERAL> ] + a [ i ] . first ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( a [ n ] . first == s [ n - <LITERAL> ] - a [ i ] . first ) ans [ ++ tot ] = a [ i ] . second ; } if ( a [ n - <LITERAL> ] . first == s [ n - <LITERAL> ] ) ans [ ++ tot ] = a [ n ] . second ; printf ( <LITERAL> , tot ) ; for ( int i = <LITERAL> ; i <= tot ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { int n ; while ( cin >> n ) { vector < int > ans ; s = <LITERAL> ; memset ( b , <LITERAL> , sizeof ( b ) ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; s += a [ i ] ; b [ a [ i ] ] ++ ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { t = s - a [ i ] ; if ( t % <LITERAL> != <LITERAL> || t > <LITERAL> ) continue ; t /= <LITERAL> ; if ( b [ t ] - ( a [ i ] == t ) > <LITERAL> ) { { ans . push_back ( i ) ; } } int len = ans . size ( ) ; cout << len << endl ; for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( i == <LITERAL> ) cout << ans [ i ] + <LITERAL> ; else cout << <LITERAL> << ans [ i ] + <LITERAL> ; } cout << endl ; } return <LITERAL> ; } 
int pai ( my x , my y ) { return x . val < y . val ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { a [ i ] . num = i ; scanf ( <LITERAL> , & a [ i ] . val ) ; } sort ( a + <LITERAL> , a + <LITERAL> + n , pai ) ; int nans = <LITERAL> , ans [ <LITERAL> ] ; long long sum = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { sum += a [ i ] . val ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( a [ i ] . val == ( sum - a [ n ] . val ) ) { nans ++ ; ans [ nans ] = a [ i ] . num ; } else if ( a [ i ] . val > ( sum - a [ n ] . val ) ) break ; } long long sum1 = <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { sum1 += a [ i ] . val ; } if ( a [ n - <LITERAL> ] . val == sum1 ) { nans ++ ; ans [ nans ] = a [ n ] . num ; } if ( nans > <LITERAL> ) { printf ( <LITERAL> , nans ) ; for ( int i = <LITERAL> ; i <= nans ; i ++ ) { printf ( <LITERAL> , ans [ i ] ) ; } } else printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n ; int inpt [ <LITERAL> ] ; int orpt [ <LITERAL> ] ; int otpt [ <LITERAL> ] ; int i ; int count = <LITERAL> ; int auxcount ; int pro = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & inpt [ i ] ) ; for ( i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & orpt [ i ] ) ; for ( i = <LITERAL> ; i <= n ; i ++ ) { if ( count < n ) { if ( ! flag [ orpt [ i ] ] ) { auxcount = <LITERAL> ; while ( inpt [ pro ] != orpt [ i ] ) { auxcount ++ ; flag [ inpt [ pro ] ] = <LITERAL> ; pro ++ ; } auxcount ++ ; flag [ inpt [ pro ] ] = <LITERAL> ; pro ++ ; count += auxcount ; otpt [ i ] = auxcount ; continue ; } } otpt [ i ] = <LITERAL> ; } for ( i = <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , otpt [ i ] ) ; printf ( <LITERAL> , otpt [ n ] ) ; } 
int pai ( my x , my y ) { return x . s < y . s ; } 
int main ( ) { int n ; int a [ <LITERAL> ] , b [ <LITERAL> ] ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { b [ i ] = <LITERAL> ; book [ i ] . num = i ; scanf ( <LITERAL> , & book [ i ] . s ) ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; sort ( book + <LITERAL> , book + <LITERAL> + n , pai ) ; int now = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( book [ a [ i ] ] . num > now ) { b [ i ] = book [ a [ i ] ] . num - now ; now = book [ a [ i ] ] . num ; } } for ( int i = <LITERAL> ; i <= n ; i ++ ) printf ( <LITERAL> , b [ i ] ) ; return <LITERAL> ; } 
int main ( void ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & tmp ) ; q . push ( tmp ) ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { int need ; scanf ( <LITERAL> , & need ) ; if ( book [ need ] ) step [ i ] = <LITERAL> ; else { do { tmp = q . front ( ) ; book [ tmp ] = <LITERAL> ; step [ i ] ++ ; q . pop ( ) ; } while ( tmp != need ) ; } } for ( int i = <LITERAL> ; i <= n ; i ++ ) printf ( <LITERAL> , step [ i ] ) ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int ai ; cin >> ai ; a [ ai ] = <LITERAL> ; q . push ( ai ) ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { int bi ; cin >> bi ; if ( ! a [ bi ] ) cout << <LITERAL> << <LITERAL> ; else { int temp , count = <LITERAL> ; do { temp = q . front ( ) ; if ( temp != bi ) { count ++ ; a [ temp ] = <LITERAL> ; q . pop ( ) ; } } while ( temp != bi ) ; a [ bi ] = <LITERAL> ; q . pop ( ) ; count ++ ; cout << count << <LITERAL> ; } } } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int t ; scanf ( <LITERAL> , & t ) ; stk [ i ] = t ; seq [ t ] = i ; } int ptr = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int t ; scanf ( <LITERAL> , & t ) ; int pos = seq [ t ] , ans ; if ( pos <= ptr ) ans = <LITERAL> ; else { ans = pos - ptr ; ptr = pos ; } printf ( <LITERAL> , ans ) ; } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & a [ i ] ) ; } for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & b [ i ] ) ; } for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( flag [ b [ i ] ] ) { printf ( <LITERAL> ) ; } else { int ans = <LITERAL> ; for ( ++ cur ; cur <= n ; ++ cur ) { ++ ans ; flag [ a [ cur ] ] = true ; if ( a [ cur ] == b [ i ] ) { break ; } } printf ( <LITERAL> , ans ) ; } } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x ; scanf ( <LITERAL> , & x ) ; a [ i ] = x ; b [ x ] = i ; } int s = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x ; scanf ( <LITERAL> , & x ) ; if ( b [ x ] < s ) printf ( <LITERAL> ) ; else { printf ( <LITERAL> , b [ x ] - s ) ; s = b [ x ] ; } } return <LITERAL> ; } 
int main ( ) { ios :: sync_with_stdio ( false ) ; int n ; cin >> n ; int t = <LITERAL> ; while ( t < n ) { cin >> book [ t ] ; check [ book [ t ] ] = <LITERAL> ; t ++ ; } int h = <LITERAL> , k ; int count = <LITERAL> ; while ( h < n ) { int step = <LITERAL> ; cin >> k ; if ( check [ k ] == <LITERAL> ) { for ( int i = count ; i < n ; i ++ ) { if ( book [ i ] != k ) { check [ book [ i ] ] = <LITERAL> ; book [ i ] = - <LITERAL> ; step ++ ; } else { step = step + <LITERAL> ; check [ book [ i ] ] = <LITERAL> ; book [ i ] = - <LITERAL> ; if ( i != n - <LITERAL> ) { count = i + <LITERAL> ; } else { count = i ; } cout << step ; break ; } } } else if ( check [ k ] == <LITERAL> ) { cout << <LITERAL> ; } if ( h != n - <LITERAL> ) { cout << <LITERAL> ; } h ++ ; } } 
int main ( ) { int n ; int an ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> an ; a [ an ] = i ; } int bn ; int top = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> bn ; if ( a [ bn ] > top ) { cout << a [ bn ] - top << <LITERAL> ; top = a [ bn ] ; } else { cout << <LITERAL> << <LITERAL> ; } } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
int main ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) a [ i ] = read ( ) , pos [ a [ i ] ] = i ; int now = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x = read ( ) ; if ( pos [ x ] > now ) printf ( <LITERAL> , pos [ x ] - now ) , now = pos [ x ] ; else printf ( <LITERAL> ) ; } } 
int main ( ) { scanf ( <LITERAL> , & N ) ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; r [ a [ i ] ] = i ; } for ( int i = <LITERAL> ; i <= N ; i ++ ) { int x ; scanf ( <LITERAL> , & x ) ; if ( top <= r [ x ] ) { printf ( <LITERAL> , r [ x ] - top + <LITERAL> ) ; top = r [ x ] + <LITERAL> ; } else { printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
int main ( ) { int n , x , ma = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x ) , fp [ x ] = i ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x ) ; printf ( <LITERAL> , max ( <LITERAL> , fp [ x ] - ma ) ) ; ma = max ( fp [ x ] , ma ) ; } return <LITERAL> ; } 
signed main ( ) { { { ios :: sync_with_stdio ( false ) ; cin . tie ( <LITERAL> ) ; cout . tie ( <LITERAL> ) ; int n ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> a [ i ] ; p [ a [ i ] ] = i ; } int now = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int ans ; cin >> b [ i ] ; now > p [ b [ i ] ] ? ans = <LITERAL> : ans = p [ b [ i ] ] - now ; now > p [ b [ i ] ] ? <LITERAL> : now = p [ b [ i ] ] ; cout << ans << <LITERAL> ; } putchar ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , t , f = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & t ) ; def [ t ] = i ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & t ) ; t = def [ t ] ; if ( f < t ) { printf ( <LITERAL> , t - f ) ; f = t ; } else { printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
int main ( ) { stack < int > stk ; int n , x ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = n ; i >= <LITERAL> ; i -- ) stk . push ( a [ i ] ) ; while ( n -- ) { int count = <LITERAL> ; scanf ( <LITERAL> , & x ) ; if ( back_pack [ x ] ) { printf ( <LITERAL> ) ; continue ; } while ( true ) { int tmp = stk . top ( ) ; stk . pop ( ) ; back_pack [ tmp ] = true ; count ++ ; if ( tmp == x ) { printf ( <LITERAL> , count ) ; break ; } } } return <LITERAL> ; } 
int main ( ) { int n , cnt ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & b [ i ] ) ; } int t = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cnt = <LITERAL> ; if ( c [ b [ i ] ] == <LITERAL> ) { ans [ i ] = <LITERAL> ; } else { for ( int j = t ; j <= n ; j ++ , t ++ ) { if ( c [ a [ j ] ] == <LITERAL> ) { cnt ++ ; c [ a [ j ] ] = <LITERAL> ; } if ( a [ j ] == b [ i ] ) { ans [ i ] = cnt ; break ; } } } printf ( <LITERAL> , ans [ i ] ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; pos [ a [ i ] ] = i ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & b [ i ] ) ; int now = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( pos [ b [ i ] ] > now ) { printf ( <LITERAL> , pos [ b [ i ] ] - now ) ; now = pos [ b [ i ] ] ; } else printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; } int pos = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x ; scanf ( <LITERAL> , & x ) ; if ( b [ x ] == <LITERAL> ) printf ( <LITERAL> ) ; else { int c = <LITERAL> ; for ( int j = pos ; j <= n ; j ++ ) { b [ a [ j ] ] = <LITERAL> ; if ( a [ j ] == x ) { pos = j + <LITERAL> ; break ; } c ++ ; } printf ( <LITERAL> , c ) ; } } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; memset ( book , true , sizeof ( book ) ) ; top = n ; for ( int i = <LITERAL> ; i <= n ; ++ i ) scanf ( <LITERAL> , & x ) , s [ n - i + <LITERAL> ] = x ; while ( n -- ) { scanf ( <LITERAL> , & x ) ; int cnt = <LITERAL> ; if ( ! book [ x ] ) { printf ( <LITERAL> ) ; continue ; } while ( s [ top ] != x ) book [ s [ top -- ] ] = false , cnt ++ ; top -- ; printf ( <LITERAL> , cnt + <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int n , x , y , p ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> x ; a [ x ] = i ; } p = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> y ; if ( a [ y ] > p ) { cout << a [ y ] - p ; p = a [ y ] ; } else cout << <LITERAL> ; if ( i < n ) cout << <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { int n ; int b ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & stk [ i ] ) ; ins [ stk [ i ] ] = <LITERAL> ; } int tp = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & b ) ; if ( ! ins [ b ] ) printf ( <LITERAL> ) ; else { int cnt = <LITERAL> ; while ( stk [ tp - <LITERAL> ] != b ) { cnt ++ ; ins [ stk [ tp ] ] = <LITERAL> ; tp ++ ; } printf ( <LITERAL> , cnt ) ; } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { string a ; while ( getline ( cin , a ) ) { int size = a . size ( ) ; int cnt = <LITERAL> , lastcnt = <LITERAL> ; for ( int i = <LITERAL> ; i < size ; i ++ ) { if ( a [ i ] < <LITERAL> || a [ i ] > <LITERAL> ) printf ( <LITERAL> , a [ i ] ) ; else { printf ( <LITERAL> , ( <LITERAL> + a [ i ] - <LITERAL> + cnt ) % <LITERAL> + <LITERAL> ) ; int temp = cnt ; cnt = ( cnt + lastcnt ) % <LITERAL> ; lastcnt = temp ; } } cout << endl ; } } 
char get ( ) { len = <LITERAL> ; do { ++ len ; s [ len ] = getchar ( ) ; } while ( s [ len ] != <LITERAL> && s [ len ] != EOF ) ; return s [ len ] ; } 
int main ( ) { fib [ <LITERAL> ] = <LITERAL> ; fib [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < MAXN ; ++ i ) { fib [ i ] = ( fib [ i - <LITERAL> ] + fib [ i - <LITERAL> ] ) % <LITERAL> ; } while ( get ( ) != EOF ) { cur = <LITERAL> ; for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { int tmp = ( s [ i ] - <LITERAL> + fib [ cur ] ) % <LITERAL> ; printf ( <LITERAL> , <LITERAL> + tmp ) ; ++ cur ; } else { printf ( <LITERAL> , s [ i ] ) ; } } } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
long long # define cin ( x ) scanf ( <LITERAL> , & x ) # define cout ( x ) printf ( <LITERAL> , x ) # define rep ( i , k , n ) for ( ll i = k ; i <= n ; i ++ ) # define mst ( a , k ) memset ( a , k , sizeof ( a ) ) ; const ll INF = <LITERAL> + <LITERAL> ; inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } char s [ maxn ] ; ll l , f [ maxn ] , j ; ll init ( ) { f [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] = <LITERAL> ; rep ( i , <LITERAL> , maxn - <LITERAL> ) { f [ i ] = ( f [ i - <LITERAL> ] + f [ i - <LITERAL> ] ) % <LITERAL> ; } } 
int main ( ) { init ( ) ; while ( gets ( s ) != NULL ) { l = strlen ( s ) ; j = <LITERAL> ; rep ( i , <LITERAL> , l - <LITERAL> ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { s [ i ] += f [ j ++ ] ; while ( s [ i ] > <LITERAL> ) s [ i ] -= <LITERAL> ; } putchar ( s [ i ] ) ; } printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { string s ; a [ <LITERAL> ] = <LITERAL> ; a [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < maxn ; i ++ ) a [ i ] = a [ i - <LITERAL> ] + a [ i - <LITERAL> ] , a [ i ] %= <LITERAL> ; while ( getline ( cin , s ) ) { int len = s . length ( ) , cnt = <LITERAL> ; for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( s [ i ] < <LITERAL> || s [ i ] > <LITERAL> ) cout << s [ i ] ; else { s [ i ] = <LITERAL> + ( s [ i ] + a [ cnt ] - <LITERAL> ) % <LITERAL> ; cout << s [ i ] ; cnt ++ ; } } cout << endl ; s . clear ( ) ; } return <LITERAL> ; } 
int main ( ) { char ch ; fib [ <LITERAL> ] = <LITERAL> ; fib [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < maxn ; i ++ ) { fib [ i ] = ( fib [ i - <LITERAL> ] + fib [ i - <LITERAL> ] ) % <LITERAL> ; } int cnt = <LITERAL> ; while ( ( ch = getchar ( ) ) != EOF ) { if ( ch >= <LITERAL> && ch <= <LITERAL> ) { cnt ++ ; ch = ch + fib [ cnt ] ; ; if ( ch > <LITERAL> ) ch -= <LITERAL> ; printf ( <LITERAL> , ch ) ; } else { if ( ch == <LITERAL> ) cnt = <LITERAL> ; printf ( <LITERAL> , ch ) ; } } return <LITERAL> ; } 
int main ( ) { f [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) f [ i ] = ( f [ i - <LITERAL> ] % <LITERAL> + f [ i - <LITERAL> ] % <LITERAL> ) % <LITERAL> ; while ( gets ( s ) != NULL ) { num = <LITERAL> ; chan = strlen ( s ) ; for ( i = <LITERAL> ; i < chan ; i ++ ) { if ( s [ i ] < <LITERAL> || s [ i ] > <LITERAL> ) printf ( <LITERAL> , s [ i ] ) ; else { for ( j = <LITERAL> ; j <= <LITERAL> ; j ++ ) if ( s [ i ] == a [ j ] ) { x = j ; break ; } x += f [ num ] ; x = x % <LITERAL> ; printf ( <LITERAL> , a [ x ] ) ; num ++ ; } } printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { a [ <LITERAL> ] = a [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { a [ i ] = a [ i - <LITERAL> ] + a [ i - <LITERAL> ] ; while ( a [ i ] > <LITERAL> ) { a [ i ] -= <LITERAL> ; } } char c ; int i = <LITERAL> ; while ( scanf ( <LITERAL> , & c ) != EOF ) { if ( c == <LITERAL> ) { i = <LITERAL> ; } if ( c >= <LITERAL> && c <= <LITERAL> ) { c += a [ i ] ; while ( c > <LITERAL> ) { c -= <LITERAL> ; } i ++ ; } printf ( <LITERAL> , c ) ; } } 
int main ( ) { for ( char c = <LITERAL> ; c <= <LITERAL> ; c ++ ) { M [ c - <LITERAL> ] = c ; } } f [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) f [ i ] = f [ i - <LITERAL> ] + f [ i - <LITERAL> ] , f [ i ] %= <LITERAL> ; while ( gets ( ch ) ) { int t = <LITERAL> ; int len = strlen ( ch ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) { char c = ch [ i ] ; if ( c >= <LITERAL> && c <= <LITERAL> ) { c = M [ ( c - <LITERAL> + f [ t ] ) % <LITERAL> ] ; t ++ ; } printf ( <LITERAL> , c ) ; } printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { while ( scanf ( <LITERAL> , & ch ) != EOF ) { if ( ch >= <LITERAL> && ch <= <LITERAL> ) { ch += c ; if ( ch > <LITERAL> ) ch -= <LITERAL> ; a = b ; b = c ; c = a + b ; a = a % <LITERAL> ; b = b % <LITERAL> ; c = c % <LITERAL> ; } printf ( <LITERAL> , ch ) ; if ( ch == <LITERAL> ) { a = <LITERAL> ; b = <LITERAL> ; c = <LITERAL> ; } } return <LITERAL> ; } 
int main ( ) { string str ; long long l , n , t ; while ( getline ( cin , str ) ) { l = <LITERAL> , n = <LITERAL> ; for ( int i = <LITERAL> ; i < str . length ( ) ; i ++ ) { if ( isupper ( str [ i ] ) ) { str [ i ] -= <LITERAL> ; str [ i ] += n ; str [ i ] %= <LITERAL> ; str [ i ] += <LITERAL> ; t = n ; n += l ; l = t ; l %= <LITERAL> ; n %= <LITERAL> ; } } cout << str << <LITERAL> ; } return <LITERAL> ; } 
int main ( void ) { fib [ <LITERAL> ] = fib [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < MAXN ; i ++ ) fib [ i ] = ( fib [ i - <LITERAL> ] + fib [ i - <LITERAL> ] ) % <LITERAL> ; while ( ( stra [ <LITERAL> ] = getchar ( ) ) != EOF ) { gets ( stra + <LITERAL> ) ; len = strlen ( stra ) ; int k = <LITERAL> ; for ( int i = <LITERAL> ; i <= len ; i ++ ) { if ( isalpha ( stra [ i ] ) ) { if ( stra [ i ] + fib [ k ] > <LITERAL> ) strb [ i ] = stra [ i ] + fib [ k ] - <LITERAL> ; else strb [ i ] = stra [ i ] + fib [ k ] ; k ++ ; } else strb [ i ] = stra [ i ] ; } puts ( strb ) ; } return <LITERAL> ; } 
int main ( ) { f [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) f [ i ] = ( f [ i - <LITERAL> ] + f [ i - <LITERAL> ] ) % <LITERAL> ; while ( getline ( cin , st ) ) { int pos = <LITERAL> ; for ( int i = <LITERAL> ; i < st . size ( ) ; i ++ ) { char ch = st [ i ] ; if ( ch < <LITERAL> || ch > <LITERAL> ) printf ( <LITERAL> , ch ) ; else { ch += f [ pos ++ ] ; if ( ch > <LITERAL> ) ch -= <LITERAL> ; printf ( <LITERAL> , ch ) ; } } printf ( <LITERAL> ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { if ( s < <LITERAL> || s > <LITERAL> ) { printf ( <LITERAL> , s ) ; return ; } printf ( <LITERAL> , ( s - <LITERAL> + f [ ++ cnt ] ) % <LITERAL> + <LITERAL> ) ; } 
int main ( ) { f [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) f [ i ] = ( f [ i - <LITERAL> ] + f [ i - <LITERAL> ] ) % <LITERAL> ; while ( scanf ( <LITERAL> , & s ) != EOF ) { if ( s == <LITERAL> ) puts ( <LITERAL> ) , cnt = <LITERAL> ; else solve ( ) ; } } 
void work ( ) { int now = <LITERAL> , pre = <LITERAL> ; for ( int i = <LITERAL> ; s [ i ] ; i ++ ) { if ( s [ i ] <= <LITERAL> && s [ i ] >= <LITERAL> ) { s [ i ] = ( ( s [ i ] - <LITERAL> ) + now ) % <LITERAL> + <LITERAL> ; swap ( pre , now ) , now = now + pre % <LITERAL> ; } } puts ( s ) ; } 
int main ( ) { while ( gets ( s ) != NULL ) work ( ) ; return <LITERAL> ; } 
int main ( ) { f [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) f [ i ] = ( f [ i - <LITERAL> ] + f [ i - <LITERAL> ] ) % <LITERAL> ; while ( gets ( s ) != NULL ) { int len = strlen ( s ) ; int num = <LITERAL> ; for ( int i = <LITERAL> ; i < len ; ++ i ) { if ( s [ i ] > <LITERAL> || s [ i ] < <LITERAL> ) printf ( <LITERAL> , s [ i ] ) ; else printf ( <LITERAL> , ( s [ i ] - <LITERAL> + f [ num ] ) % <LITERAL> + <LITERAL> ) , ++ num ; } printf ( <LITERAL> ) ; } } 
int main ( ) { string s ; ll i ; while ( getline ( cin , s ) ) { string ans ; ll a , b ; a = <LITERAL> ; b = <LITERAL> ; for ( i = <LITERAL> ; i < s . size ( ) ; i ++ ) { if ( int ( s [ i ] ) >= <LITERAL> && int ( s [ i ] ) <= <LITERAL> ) { char temp ; temp = table [ ( int ( s [ i ] ) - <LITERAL> + b ) % <LITERAL> ] ; ans += temp ; int kk ; kk = a % <LITERAL> + b % <LITERAL> ; a = b % <LITERAL> ; b = kk ; } else ans += s [ i ] ; } cout << ans << endl ; } } 
void init ( ) { fib [ <LITERAL> ] = <LITERAL> , fib [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> + <LITERAL> ; i ++ ) { fib [ i ] = fib [ i - <LITERAL> ] + fib [ i - <LITERAL> ] ; fib [ i ] %= <LITERAL> ; } } 
int main ( ) { char c ; init ( ) ; int i = <LITERAL> ; while ( ( c = getchar ( ) ) != EOF ) { if ( c == <LITERAL> ) printf ( <LITERAL> ) ; else if ( c == <LITERAL> ) printf ( <LITERAL> ) , i = <LITERAL> ; else if ( ! isupper ( c ) ) printf ( <LITERAL> , c ) ; else { int tmp = c - <LITERAL> ; tmp = tmp + fib [ i ] ; tmp %= <LITERAL> ; c = tmp + <LITERAL> ; printf ( <LITERAL> , c ) ; i ++ ; } } return <LITERAL> ; } 
bool cmp ( balloon x , balloon y ) { return x . number > y . number ; } 
int main ( ) { int t , n , i ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , & n ) ; for ( i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , s [ i ] . color , & s [ i ] . number ) ; sort ( s , s + n , cmp ) ; for ( i = <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , s [ i ] . color , i != n - <LITERAL> ? <LITERAL> : <LITERAL> ) ; } return <LITERAL> ; } 
bool operator < ( probs a , probs b ) { return a . n > b . n ; } 
int main ( ) { int n , l ; cin >> n ; while ( n -- ) { cin >> l ; for ( int i = <LITERAL> ; i < l ; i ++ ) { cin >> arr [ i ] . s >> arr [ i ] . n ; } sort ( arr , arr + l ) ; cout << arr [ <LITERAL> ] . s ; for ( int i = <LITERAL> ; i < l ; i ++ ) { cout << <LITERAL> << arr [ i ] . s ; } cout << <LITERAL> ; } return <LITERAL> ; } 
int main ( void ) { int cases ; scanf ( <LITERAL> , & cases ) ; int * p = ( int * ) malloc ( sizeof ( int ) * cases ) ; pPRO * pro = ( pPRO * ) malloc ( sizeof ( pPRO ) * cases ) ; for ( int i = <LITERAL> ; i < cases ; i ++ ) { scanf ( <LITERAL> , & p [ i ] ) ; pro [ i ] = ( pPRO ) malloc ( sizeof ( PRO ) * p [ i ] ) ; for ( int j = <LITERAL> ; j < p [ i ] ; j ++ ) { scanf ( <LITERAL> , & pro [ i ] [ j ] . color , & pro [ i ] [ j ] . ball ) ; } PRO t ; for ( int j = <LITERAL> ; j < p [ i ] - <LITERAL> ; j ++ ) for ( int k = <LITERAL> ; k < p [ i ] - j - <LITERAL> ; k ++ ) if ( pro [ i ] [ k ] . ball < pro [ i ] [ k + <LITERAL> ] . ball ) { t = pro [ i ] [ k ] ; pro [ i ] [ k ] = pro [ i ] [ k + <LITERAL> ] ; pro [ i ] [ k + <LITERAL> ] = t ; } } for ( int i = <LITERAL> ; i < cases ; i ++ ) { for ( int j = <LITERAL> ; j < p [ i ] ; j ++ ) { if ( j == p [ i ] - <LITERAL> ) printf ( <LITERAL> , pro [ i ] [ j ] . color ) ; else printf ( <LITERAL> , pro [ i ] [ j ] . color ) ; } printf ( <LITERAL> ) ; free ( pro [ i ] ) ; } free ( p ) ; free ( pro ) ; } 
signed main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { map < int , string > m ; int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int a ; string b ; cin >> b >> a ; m [ a ] = b ; } int size = m . size ( ) ; for ( auto it = m . rbegin ( ) ; it != m . rend ( ) ; it ++ ) { cout << it -> second ; size -- ; if ( size ) cout << <LITERAL> ; } cout << <LITERAL> ; } return <LITERAL> ; } 
void swap ( bll * a , bll * b ) { bll temp ; temp . num = a -> num ; a -> num = b -> num ; b -> num = temp . num ; strcpy ( temp . color , a -> color ) ; strcpy ( a -> color , b -> color ) ; strcpy ( b -> color , temp . color ) ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; int i , j ; int n [ <LITERAL> ] ; bll my [ <LITERAL> ] [ <LITERAL> ] ; for ( i = <LITERAL> ; i <= t ; i ++ ) { scanf ( <LITERAL> , & n [ i ] ) ; for ( j = <LITERAL> ; j <= n [ i ] ; j ++ ) { scanf ( <LITERAL> , & my [ i ] [ j ] . color ) ; scanf ( <LITERAL> , & my [ i ] [ j ] . num ) ; } int k ; for ( k = <LITERAL> ; k < n [ i ] - <LITERAL> ; k ++ ) { for ( j = <LITERAL> ; j < n [ i ] - k ; j ++ ) { if ( my [ i ] [ j ] . num < my [ i ] [ j + <LITERAL> ] . num ) { swap ( & my [ i ] [ j ] , & my [ i ] [ j + <LITERAL> ] ) ; } } } } for ( i = <LITERAL> ; i <= t ; i ++ ) { for ( j = <LITERAL> ; j <= n [ i ] ; j ++ ) { printf ( <LITERAL> , my [ i ] [ j ] . color ) ; if ( j == n [ i ] ) { printf ( <LITERAL> ) ; } else { printf ( <LITERAL> ) ; } } } } 
bool cmp ( balloon x , balloon y ) { return x . number > y . number ; } 
int main ( ) { int t , n , i ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , & n ) ; for ( i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , s [ i ] . color , & s [ i ] . number ) ; sort ( s , s + n , cmp ) ; for ( i = <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , s [ i ] . color , i != n - <LITERAL> ? <LITERAL> : <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , arr [ i ] . color + <LITERAL> , & arr [ i ] . num ) ; } std :: sort ( arr + <LITERAL> , arr + n + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n ; ++ i ) { printf ( <LITERAL> , arr [ i ] . color + <LITERAL> ) ; } printf ( <LITERAL> , arr [ n ] . color + <LITERAL> ) ; printf ( <LITERAL> ) ; } return <LITERAL> ; } 
bool cmp ( struct balloon x , struct balloon y ) { return x . num < y . num ; } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , a [ i ] . col , & a [ i ] . num ) ; } sort ( a , a + n , cmp ) ; for ( int i = n - <LITERAL> ; i > <LITERAL> ; i -- ) { printf ( <LITERAL> , a [ i ] . col ) ; } printf ( <LITERAL> , a [ <LITERAL> ] . col ) ; } } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) scanf ( <LITERAL> , k [ i ] . s , & k [ i ] . num ) ; sort ( k + <LITERAL> , k + n + <LITERAL> ) ; for ( int i = n ; i > <LITERAL> ; -- i ) printf ( <LITERAL> , k [ i ] . s ) ; printf ( <LITERAL> , k [ <LITERAL> ] . s ) ; printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int T ; scanf_s ( <LITERAL> , & T ) ; while ( T -- ) { int n ; scanf_s ( <LITERAL> , & n ) ; problem p [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) { scanf_s ( <LITERAL> , p [ i ] . color , <LITERAL> , & p [ i ] . num ) ; } for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) for ( int j = <LITERAL> ; j <= n - <LITERAL> ; j ++ ) if ( p [ j ] . num < p [ j + <LITERAL> ] . num ) { problem temp = p [ j ] ; p [ j ] = p [ j + <LITERAL> ] ; p [ j + <LITERAL> ] = temp ; } for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) { printf ( <LITERAL> , p [ i ] . color ) ; if ( i != n - <LITERAL> ) printf ( <LITERAL> ) ; } printf ( <LITERAL> ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
bool cmp ( node a , node b ) { return a . num > b . num ; } 
int main ( ) { scanf ( <LITERAL> , & t ) ; rep ( k , <LITERAL> , t ) { scanf ( <LITERAL> , & n ) ; rep ( i , <LITERAL> , n ) { scanf ( <LITERAL> , & a [ i ] . col , & a [ i ] . num ) ; } sort ( a + <LITERAL> , a + <LITERAL> + n , cmp ) ; rep ( i , <LITERAL> , n - <LITERAL> ) printf ( <LITERAL> , a [ i ] . col ) ; printf ( <LITERAL> , a [ n ] . col ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> s [ i ] . second ; s [ i ] . first = read ( ) ; } sort ( s + <LITERAL> , s + n + <LITERAL> ) ; for ( int i = n ; i > <LITERAL> ; i -- ) cout << s [ i ] . second << <LITERAL> ; cout << s [ <LITERAL> ] . second << endl ; } 
int main ( ) { int T = read ( ) ; while ( T -- ) solve ( ) ; } 
int main ( ) { int t , n , i , j , k ; string pro [ <LITERAL> ] ; int num [ <LITERAL> ] ; cin >> t ; for ( j = <LITERAL> ; j < t ; j ++ ) { cin >> n ; for ( i = <LITERAL> ; i < n ; i ++ ) { cin >> pro [ i ] >> num [ i ] ; } for ( k = n - <LITERAL> ; k > <LITERAL> ; k -- ) for ( i = <LITERAL> ; i <= k - <LITERAL> ; i ++ ) { if ( num [ i ] < num [ i + <LITERAL> ] ) { int aa ; string temp ; aa = num [ i ] ; num [ i ] = num [ i + <LITERAL> ] ; num [ i + <LITERAL> ] = aa ; temp = pro [ i ] ; pro [ i ] = pro [ i + <LITERAL> ] ; pro [ i + <LITERAL> ] = temp ; } } cout << pro [ <LITERAL> ] ; for ( i = <LITERAL> ; i < n ; i ++ ) cout << <LITERAL> << pro [ i ] ; cout << endl ; } } 
int comp ( const problem & p1 , const problem & p2 ) { return p1 . num > p2 . num ; } 
int main ( ) { int T ; cin >> T ; while ( T -- ) { problem p [ <LITERAL> ] ; int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> p [ i ] . color >> p [ i ] . num ; } sort ( p , p + n , comp ) ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { cout << p [ i ] . color << <LITERAL> ; } cout << p [ n - <LITERAL> ] . color ; cout << endl ; } return <LITERAL> ; } 
bool cmp ( rec A , rec B ) { return A . num > B . num ; } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , d [ i ] . ch , & d [ i ] . num ) ; } sort ( d + <LITERAL> , d + <LITERAL> + n , cmp ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int len = strlen ( d [ i ] . ch ) ; for ( int j = <LITERAL> ; j < len ; j ++ ) printf ( <LITERAL> , d [ i ] . ch [ j ] ) ; if ( i != n ) printf ( <LITERAL> ) ; } printf ( <LITERAL> ) ; } return <LITERAL> ; } 
long long # define MAXN <LITERAL> using namespace std ; struct node { int num ; char str [ <LITERAL> ] ; } nds [ MAXN ] ; ll cmp ( node a , node b ) { return a . num > b . num ; } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , nds [ i ] . str , & nds [ i ] . num ) ; } sort ( nds + <LITERAL> , nds + n + <LITERAL> , cmp ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { printf ( <LITERAL> , nds [ i ] . str ) ; if ( i != n ) cout << <LITERAL> ; } cout << endl ; } return <LITERAL> ; } 
int main ( ) { int t ; cin >> t ; int n ; string color [ <LITERAL> ] ; int ball [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < t ; i ++ ) { int n ; cin >> n ; for ( int j = <LITERAL> ; j < n ; j ++ ) { cin >> color [ j ] >> ball [ j ] ; } for ( int x = <LITERAL> ; x < n ; x ++ ) { for ( int y = <LITERAL> ; y < n ; y ++ ) { if ( ball [ x ] > ball [ y ] ) { int b ; b = ball [ x ] ; ball [ x ] = ball [ y ] ; ball [ y ] = b ; string a ; a = color [ x ] ; color [ x ] = color [ y ] ; color [ y ] = a ; } } } for ( int k = <LITERAL> ; k < n ; k ++ ) { cout << color [ k ] ; if ( k == n - <LITERAL> ) { cout << endl ; } else { cout << <LITERAL> ; } } } } 
int main ( ) { cin >> n ; for ( int j = <LITERAL> ; j < n ; j ++ ) { cin >> m [ j ] ; for ( int i = <LITERAL> ; i < m [ j ] ; i ++ ) { cin >> b [ j ] [ i ] . color >> b [ j ] [ i ] . num ; if ( i > <LITERAL> ) { for ( int ii = <LITERAL> ; ii < i ; ii ++ ) { if ( b [ j ] [ ii ] . num < b [ j ] [ i ] . num ) { swap ( b [ j ] [ ii ] , b [ j ] [ i ] ) ; } } } } } for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m [ i ] ; j ++ ) { if ( j == m [ i ] - <LITERAL> ) { cout << b [ i ] [ j ] . color ; } else { cout << b [ i ] [ j ] . color << <LITERAL> ; } } cout << endl ; } return <LITERAL> ; } 
bool cmp ( NODE x , NODE y ) { return x . val > y . val ; } 
int main ( ) { int T , n ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , a [ i ] . st , & a [ i ] . val ) ; sort ( a + <LITERAL> , a + n + <LITERAL> , cmp ) ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) printf ( <LITERAL> , a [ i ] . st ) ; printf ( <LITERAL> , a [ n ] . st ) ; printf ( <LITERAL> ) ; } return <LITERAL> ; } 
bool cmp ( A aa , A bb ) { return aa . n > bb . n ; } 
int main ( ) { int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , s [ i ] . color , & s [ i ] . n ) ; } sort ( s , s + n , cmp ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( i == n - <LITERAL> ) { printf ( <LITERAL> , s [ i ] . color ) ; } else { printf ( <LITERAL> , s [ i ] . color ) ; } } } return <LITERAL> ; } 
int cmp ( S a , S b ) { return a . num > b . num ; } 
int main ( void ) { char ch ; scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { scanf ( <LITERAL> , & n ) ; for ( int j = <LITERAL> ; j < n ; j ++ ) { getchar ( ) ; for ( int k = <LITERAL> ; ( ch = getchar ( ) ) != <LITERAL> ; k ++ ) ti [ j ] . str [ k ] = ch ; scanf ( <LITERAL> , & ti [ j ] . num ) ; } sort ( ti , ti + n , cmp ) ; for ( int j = <LITERAL> ; j < n - <LITERAL> ; j ++ ) printf ( <LITERAL> , ti [ j ] . str ) ; printf ( <LITERAL> , ti [ n - <LITERAL> ] . str ) ; putchar ( <LITERAL> ) ; for ( int j = <LITERAL> ; j < n ; j ++ ) { memset ( ti [ j ] . str , <LITERAL> , sizeof ( ti [ j ] . str ) ) ; } } return <LITERAL> ; } 
void work ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , a [ i ] . s , & a [ i ] . x ) ; sort ( a , a + n ) ; printf ( <LITERAL> , a [ <LITERAL> ] . s ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] . s ) ; puts ( <LITERAL> ) ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) work ( ) ; return <LITERAL> ; } 
bool cmp ( Node a , Node b ) { return a . num > b . num ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; for ( int i = <LITERAL> ; i <= T ; i ++ ) { int N ; scanf ( <LITERAL> , & N ) ; for ( int j = <LITERAL> ; j <= N ; j ++ ) { scanf ( <LITERAL> , node [ j ] . str ) ; scanf ( <LITERAL> , & node [ j ] . num ) ; } sort ( node + <LITERAL> , node + <LITERAL> + N , cmp ) ; for ( int j = <LITERAL> ; j < N ; j ++ ) printf ( <LITERAL> , node [ j ] . str ) ; printf ( <LITERAL> , node [ N ] . str ) ; } return <LITERAL> ; } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) cin >> a [ i ] . second >> a [ i ] . first ; sort ( a + <LITERAL> , a + <LITERAL> + n , greater < pair < int , string >> ( ) ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) cout << a [ i ] . second << <LITERAL> ; cout << a [ n ] . second << <LITERAL> ; } } 
int main ( ) { int x ; f [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) f [ i ] = f [ i - <LITERAL> ] * i , f [ i ] %= <LITERAL> ; while ( ~ scanf ( <LITERAL> , & x ) ) { int ans ; if ( x >= <LITERAL> ) ans = <LITERAL> ; else ans = f [ x ] ; cout << ans << endl ; } return <LITERAL> ; } 
int main ( ) { while ( scanf ( <LITERAL> , & n ) == <LITERAL> ) { ans = <LITERAL> ; if ( n >= <LITERAL> ) { cout << <LITERAL> << <LITERAL> ; } else { for ( int i = <LITERAL> ; i <= n ; i ++ ) { ans = ( ( ans % <LITERAL> ) * ( i % <LITERAL> ) ) % <LITERAL> ; } cout << ans << <LITERAL> ; } } return <LITERAL> ; } 
int main ( ) { int N ; while ( scanf ( <LITERAL> , & N ) != EOF ) { int ans = <LITERAL> ; if ( N >= <LITERAL> ) { printf ( <LITERAL> ) ; continue ; } while ( N ) { ans = ( ( ans % MOD ) * ( N % MOD ) ) % MOD ; N -- ; } printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
void init ( ) { num [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < MAXN ; i ++ ) { num [ i ] = num [ i - <LITERAL> ] * i % <LITERAL> ; } } 
int main ( ) { init ( ) ; int n ; while ( scanf ( <LITERAL> , & n ) != EOF ) { if ( n < <LITERAL> ) cout << num [ n ] << endl ; else cout << <LITERAL> << endl ; } return <LITERAL> ; } 
int main ( ) { int n , ans , i ; while ( cin >> n ) { ans = <LITERAL> ; if ( n >= <LITERAL> ) { cout << <LITERAL> << endl ; } else { for ( i = <LITERAL> ; i <= n ; i ++ ) { ans *= i ; ans %= <LITERAL> ; } cout << ans << endl ; } } } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { while ( ~ scanf ( <LITERAL> , & n ) ) { if ( n == <LITERAL> ) printf ( <LITERAL> ) ; else if ( n >= <LITERAL> ) printf ( <LITERAL> ) ; else { ans = <LITERAL> ; rep ( i , <LITERAL> , n ) { ans *= i ; ans %= <LITERAL> ; } printf ( <LITERAL> , ans ) ; } } return <LITERAL> ; } 
int main ( ) { fac [ <LITERAL> ] = fac [ <LITERAL> ] = <LITERAL> ; for ( unsigned long long i = <LITERAL> ; i < maxn ; i ++ ) { fac [ i ] = i * fac [ i - <LITERAL> ] ; fac [ i ] %= <LITERAL> ; } while ( ~ scanf ( <LITERAL> , & n ) ) { if ( n >= <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> , fac [ n ] ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { if ( n >= <LITERAL> ) { puts ( <LITERAL> ) ; return ; } int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) ans = ans * i % <LITERAL> ; printf ( <LITERAL> , ans ) ; } 
int main ( ) { while ( scanf ( <LITERAL> , & n ) != EOF ) solve ( ) ; } 
int work ( ) { n = min ( n , <LITERAL> ) ; printf ( <LITERAL> , f [ n ] ) ; return <LITERAL> ; } 
int main ( ) { f [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) f [ i ] = f [ i - <LITERAL> ] * i % <LITERAL> ; while ( ~ scanf ( <LITERAL> , & n ) ) work ( ) ; return <LITERAL> ; } 
int main ( ) { int N ; while ( ~ scanf ( <LITERAL> , & N ) ) { if ( N > <LITERAL> ) { printf ( <LITERAL> ) ; } else { printf ( <LITERAL> , b [ N ] ) ; } } return <LITERAL> ; } 
int main ( ) { int t = <LITERAL> ; int n ; while ( cin >> n ) { if ( n >= <LITERAL> ) { puts ( <LITERAL> ) ; continue ; } int s = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) s *= i , s %= <LITERAL> ; cout << s << endl ; } } 
int main ( void ) { long long n ; int sum ; while ( scanf ( <LITERAL> , & n ) != EOF ) { sum = <LITERAL> ; if ( n >= <LITERAL> ) { printf ( <LITERAL> ) ; continue ; } if ( ! n ) { printf ( <LITERAL> ) ; continue ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { sum *= i ; if ( sum >= <LITERAL> ) sum -= sum / <LITERAL> * <LITERAL> ; } printf ( <LITERAL> , sum ) ; } } 
int main ( ) { int n ; while ( scanf_s ( <LITERAL> , & n ) == <LITERAL> ) { int r = <LITERAL> ; if ( n >= <LITERAL> ) printf ( <LITERAL> , <LITERAL> ) ; else { for ( int i = <LITERAL> ; i <= n ; i ++ ) { r *= i ; if ( r >= <LITERAL> ) r %= <LITERAL> ; } printf ( <LITERAL> , r ) ; } } return <LITERAL> ; } 
int main ( ) { int n , sum , i , a [ <LITERAL> ] ; a [ <LITERAL> ] = a [ <LITERAL> ] = <LITERAL> ; sum = <LITERAL> ; for ( i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { sum *= i ; sum %= <LITERAL> ; a [ i ] = sum ; } while ( scanf ( <LITERAL> , & n ) != EOF ) { if ( n <= <LITERAL> ) printf ( <LITERAL> , a [ n ] ) ; else printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int n ; while ( scanf ( <LITERAL> , & n ) != EOF ) { if ( n == <LITERAL> ) printf ( <LITERAL> ) ; else if ( n >= <LITERAL> ) printf ( <LITERAL> ) ; else { long long ans = <LITERAL> ; for ( long long i = <LITERAL> ; i <= n ; i ++ ) { ans = ans * ( i % <LITERAL> ) % <LITERAL> ; } printf ( <LITERAL> , ans ) ; } } return <LITERAL> ; } 
int main ( ) { int n , ans ; while ( cin >> n ) { if ( n >= <LITERAL> ) { cout << <LITERAL> ; } else { ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { ans *= i ; ans %= <LITERAL> ; } cout << ans << <LITERAL> ; } } return <LITERAL> ; } 
int main ( ) { while ( scanf ( <LITERAL> , & n ) != EOF ) { ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { ans = ans * i % mod ; if ( ans == <LITERAL> ) { break ; } } printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
int jie ( int x ) { if ( x == <LITERAL> ) return <LITERAL> ; if ( x == <LITERAL> ) return <LITERAL> ; return ( jie ( x - <LITERAL> ) % <LITERAL> * x % <LITERAL> ) ; } 
int main ( ) { int n ; while ( cin >> n ) { if ( n >= <LITERAL> ) cout << <LITERAL> << endl ; else cout << jie ( n ) << endl ; } } 
int main ( ) { long long n = <LITERAL> ; while ( scanf ( <LITERAL> , & n ) != EOF ) { if ( n >= <LITERAL> ) { printf ( <LITERAL> ) ; } else { int mod = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { mod = ( mod * i ) % <LITERAL> ; } printf ( <LITERAL> , mod ) ; } } } 
int main ( ) { a [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) a [ i ] = a [ i - <LITERAL> ] * i % <LITERAL> ; ; while ( scanf ( <LITERAL> , & n ) != EOF ) { if ( n <= <LITERAL> ) printf ( <LITERAL> , a [ n ] ) ; else printf ( <LITERAL> ) ; } return <LITERAL> ; } 
long long jiechen ( long long x ) { if ( x == <LITERAL> ) { return <LITERAL> ; } else { return x * jiechen ( x - <LITERAL> ) % <LITERAL> ; } } 
int main ( ) { while ( scanf ( <LITERAL> , & n ) != EOF ) { if ( n > <LITERAL> ) { res [ k ] = <LITERAL> ; } else { res [ k ] = jiechen ( n ) ; } k ++ ; } for ( long long i = <LITERAL> ; i < k ; i ++ ) { cout << res [ i ] << endl ; } return <LITERAL> ; } 
void slove ( ) { for ( long long i = <LITERAL> ; i <= <LITERAL> ; i ++ ) ans [ i ] = ( ( i % <LITERAL> ) * ans [ i - <LITERAL> ] ) % <LITERAL> ; } 
int main ( ) { ans [ <LITERAL> ] = <LITERAL> ; slove ( ) ; int n ; while ( scanf ( <LITERAL> , & n ) != EOF ) { if ( n <= <LITERAL> ) printf ( <LITERAL> , ans [ n ] ) ; else printf ( <LITERAL> ) ; } } 
int main ( ) { while ( scanf ( <LITERAL> , & n ) == <LITERAL> ) { if ( n >= <LITERAL> ) cout << <LITERAL> << endl ; else { int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) ans = ans * i % <LITERAL> ; cout << ans << endl ; } } } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { while ( ~ scanf ( <LITERAL> , & a , & b , & c ) ) { mst ( dp , <LITERAL> ) ; dp [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; la = strlen ( a ) , lb = strlen ( b ) , lc = strlen ( c ) ; if ( la + lb != lc ) printf ( <LITERAL> ) ; else { rep ( i , <LITERAL> , la ) { rep ( j , <LITERAL> , lb ) { if ( a [ i ] == c [ i + j ] ) dp [ i + <LITERAL> ] [ j ] |= dp [ i ] [ j ] ; if ( b [ j ] == c [ i + j ] ) dp [ i ] [ j + <LITERAL> ] |= dp [ i ] [ j ] ; } } if ( dp [ la ] [ lb ] ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
bool check ( ) { f [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= sa ; i ++ ) for ( int j = <LITERAL> ; j <= sb ; j ++ ) { if ( i > <LITERAL> ) if ( f [ i - <LITERAL> ] [ j ] && a [ i - <LITERAL> ] == c [ i + j - <LITERAL> ] ) f [ i ] [ j ] = <LITERAL> ; if ( j > <LITERAL> ) if ( f [ i ] [ j - <LITERAL> ] && b [ j - <LITERAL> ] == c [ i + j - <LITERAL> ] ) f [ i ] [ j ] = <LITERAL> ; } } if ( f [ sa ] [ sb ] ) return <LITERAL> ; else return <LITERAL> ; } 
int main ( ) { while ( scanf ( <LITERAL> , a ) != EOF ) { memset ( f , <LITERAL> , sizeof ( f ) ) ; scanf ( <LITERAL> , b ) ; scanf ( <LITERAL> , c ) ; sa = strlen ( a ) , sb = strlen ( b ) , sc = strlen ( c ) ; if ( sa + sb != sc ) { printf ( <LITERAL> ) ; continue ; } if ( check ( ) ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int work ( ) { memset ( f , <LITERAL> , sizeof ( f ) ) ; int la = strlen ( a ) , lb = strlen ( b ) , lc = strlen ( c ) ; f [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; if ( la + lb != lc ) return puts ( <LITERAL> ) , <LITERAL> ; for ( int i = <LITERAL> ; i <= la ; i ++ ) { for ( int j = <LITERAL> ; j <= lb ; j ++ ) { if ( a [ i ] == c [ i + j ] ) f [ i + <LITERAL> ] [ j ] |= f [ i ] [ j ] ; if ( b [ j ] == c [ i + j ] ) f [ i ] [ j + <LITERAL> ] |= f [ i ] [ j ] ; } } if ( f [ la ] [ lb ] ) puts ( <LITERAL> ) ; else puts ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { while ( ~ scanf ( <LITERAL> , a , b , c ) ) work ( ) ; return <LITERAL> ; } 
int main ( ) { while ( ~ scanf ( <LITERAL> , A + <LITERAL> ) ) { scanf ( <LITERAL> , B + <LITERAL> , C + <LITERAL> ) ; int lenA , lenB , lenC ; int ans = <LITERAL> ; lenA = strlen ( A + <LITERAL> ) ; lenB = strlen ( B + <LITERAL> ) ; lenC = strlen ( C + <LITERAL> ) ; if ( lenA + lenB != lenC ) ans = <LITERAL> ; else { for ( int i = <LITERAL> ; i <= lenC ; i ++ ) for ( int j = <LITERAL> ; j <= lenA ; j ++ ) f [ i ] [ j ] = <LITERAL> ; f [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= lenC ; i ++ ) { for ( int j = <LITERAL> ; j <= i , j <= lenA ; j ++ ) { if ( C [ i ] == A [ j ] && j ) f [ i ] [ j ] |= f [ i - <LITERAL> ] [ j - <LITERAL> ] ; if ( C [ i ] == B [ i - j ] && ( i - j ) != <LITERAL> && ( i - j <= lenB ) ) f [ i ] [ j ] |= f [ i - <LITERAL> ] [ j ] ; ; } } ans = f [ lenC ] [ lenA ] ; } if ( ans ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { while ( scanf ( <LITERAL> , s1 + <LITERAL> , s2 + <LITERAL> , s3 + <LITERAL> ) == <LITERAL> ) { memset ( f , <LITERAL> , sizeof ( f ) ) ; len1 = strlen ( s1 + <LITERAL> ) , len2 = strlen ( s2 + <LITERAL> ) , len3 = strlen ( s3 + <LITERAL> ) ; f [ <LITERAL> ] [ <LITERAL> ] = true ; if ( len1 + len2 != len3 ) { printf ( <LITERAL> ) ; continue ; } for ( int i = <LITERAL> ; i <= len1 ; ++ i ) for ( int j = <LITERAL> ; j <= len2 ; ++ j ) { if ( s1 [ i + <LITERAL> ] == s3 [ i + j + <LITERAL> ] ) f [ i + <LITERAL> ] [ j ] |= f [ i ] [ j ] ; if ( s2 [ j + <LITERAL> ] == s3 [ i + j + <LITERAL> ] ) f [ i ] [ j + <LITERAL> ] |= f [ i ] [ j ] ; } if ( f [ len1 ] [ len2 ] ) cout << <LITERAL> << endl ; else cout << <LITERAL> << endl ; } return <LITERAL> ; } 
int main ( ) { while ( ~ scanf ( <LITERAL> , s2 + <LITERAL> , s3 + <LITERAL> , s1 + <LITERAL> ) ) { memset ( cnt , <LITERAL> , sizeof ( cnt ) ) ; memset ( cnt2 , <LITERAL> , sizeof ( cnt2 ) ) ; memset ( vis , true , sizeof ( vis ) ) ; memset ( f , false , sizeof ( f ) ) ; bool flag = true ; int l1 = strlen ( s1 + <LITERAL> ) , l2 = strlen ( s2 + <LITERAL> ) , l3 = strlen ( s3 + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= l1 ; i ++ ) cnt [ s1 [ i ] ] ++ ; for ( int i = <LITERAL> ; i <= l2 ; i ++ ) cnt2 [ s2 [ i ] ] ++ ; for ( int i = <LITERAL> ; i <= l3 ; i ++ ) cnt2 [ s3 [ i ] ] ++ ; for ( int i = <LITERAL> ; i < maxn ; i ++ ) if ( cnt [ i ] != cnt2 [ i ] ) flag = false ; f [ <LITERAL> ] [ <LITERAL> ] = true ; for ( int i = <LITERAL> ; i <= l2 ; i ++ ) { for ( int j = <LITERAL> ; j <= l3 ; j ++ ) { { if ( i && f [ i - <LITERAL> ] [ j ] && s2 [ i ] == s1 [ i + j ] ) f [ i ] [ j ] = true ; if ( j && f [ i ] [ j - <LITERAL> ] && s3 [ j ] == s1 [ i + j ] ) f [ i ] [ j ] = true ; } } if ( l2 + l3 != l1 ) flag = false ; if ( ! f [ l2 ] [ l3 ] ) flag = false ; if ( flag ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; } return <LITERAL> ; } 
bool judge ( ) { if ( lena + lenb != lenc ) { return false ; } dp [ <LITERAL> ] [ <LITERAL> ] = ( a [ <LITERAL> ] == c [ <LITERAL> ] ) ; dp [ <LITERAL> ] [ <LITERAL> ] = ( b [ <LITERAL> ] == c [ <LITERAL> ] ) ; for ( int i = <LITERAL> ; i <= lena ; ++ i ) { dp [ i ] [ <LITERAL> ] = dp [ i - <LITERAL> ] [ <LITERAL> ] & ( a [ i ] == c [ i ] ) ; } for ( int i = <LITERAL> ; i <= lenb ; ++ i ) { dp [ <LITERAL> ] [ i ] = dp [ <LITERAL> ] [ i - <LITERAL> ] & ( b [ i ] == c [ i ] ) ; } for ( int i = <LITERAL> ; i <= lena ; ++ i ) { for ( int j = <LITERAL> ; j <= lenb ; ++ j ) { dp [ i ] [ j ] = false ; if ( ( dp [ i - <LITERAL> ] [ j ] && a [ i ] == c [ i + j ] ) || ( dp [ i ] [ j - <LITERAL> ] && b [ j ] == c [ i + j ] ) ) { dp [ i ] [ j ] = true ; } } } } return dp [ lena ] [ lenb ] ; } 
int main ( ) { while ( scanf ( <LITERAL> , a + <LITERAL> , b + <LITERAL> , c + <LITERAL> ) != EOF ) { lena = strlen ( a + <LITERAL> ) ; lenb = strlen ( b + <LITERAL> ) ; lenc = strlen ( c + <LITERAL> ) ; printf ( <LITERAL> , judge ( ) ? <LITERAL> : <LITERAL> ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = strlen ( a + <LITERAL> ) ; m = strlen ( b + <LITERAL> ) ; if ( strlen ( c + <LITERAL> ) != n + m ) { puts ( <LITERAL> ) ; return ; } clr ( f , <LITERAL> ) ; f [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n + m ; i ++ ) { for ( int j = <LITERAL> ; j <= n ; j ++ ) { if ( j > <LITERAL> && c [ i ] == a [ j ] ) f [ i ] [ j ] |= f [ i - <LITERAL> ] [ j - <LITERAL> ] ; if ( c [ i ] == b [ i - j ] ) f [ i ] [ j ] |= f [ i - <LITERAL> ] [ j ] ; } } printf ( <LITERAL> , f [ n + m ] [ n ] ? <LITERAL> : <LITERAL> ) ; } 
int main ( ) { while ( scanf ( <LITERAL> , a + <LITERAL> , b + <LITERAL> , c + <LITERAL> ) != EOF ) solve ( ) ; } 
int main ( ) { while ( scanf ( <LITERAL> , a , b , c ) != EOF ) { dp [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; int i , j ; int a1 = strlen ( a ) , b1 = strlen ( b ) ; for ( i = <LITERAL> ; i <= a1 ; i ++ ) { for ( j = <LITERAL> ; j <= b1 ; j ++ ) { if ( i && j ) dp [ i ] [ j ] = <LITERAL> ; if ( i ) dp [ i ] [ j ] = dp [ i - <LITERAL> ] [ j ] & ( a [ i - <LITERAL> ] == c [ i + j - <LITERAL> ] ) ; if ( j ) dp [ i ] [ j ] |= dp [ i ] [ j - <LITERAL> ] & ( b [ j - <LITERAL> ] == c [ i + j - <LITERAL> ] ) ; } } cout << ( ( dp [ i - <LITERAL> ] [ j - <LITERAL> ] && i + j - <LITERAL> == strlen ( c ) ) ? <LITERAL> : <LITERAL> ) << endl ; } return <LITERAL> ; } 
signed main ( ) { string a , b , c ; while ( cin >> a >> b >> c ) { int word [ <LITERAL> ] = { <LITERAL> } , is = <LITERAL> ; int lena = a . size ( ) , lenb = b . size ( ) , lenc = c . size ( ) ; for ( int i = <LITERAL> ; i < lena ; i ++ ) word [ a [ i ] - <LITERAL> ] ++ ; for ( int i = <LITERAL> ; i < lenb ; i ++ ) word [ b [ i ] - <LITERAL> ] ++ ; for ( int i = <LITERAL> ; i < lenc ; i ++ ) word [ c [ i ] - <LITERAL> ] -- ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) if ( word [ i ] ) { is = <LITERAL> ; break ; } int lasta = <LITERAL> , lastb = <LITERAL> ; for ( int i = <LITERAL> ; i < lena ; i ++ ) { int flag = <LITERAL> ; for ( int j = lasta ; j < lenc ; j ++ ) { if ( c [ j ] == a [ i ] ) { flag = <LITERAL> ; lasta = j + <LITERAL> ; break ; } } if ( flag ) { is = <LITERAL> ; break ; } } for ( int i = <LITERAL> ; i < lenb ; i ++ ) { int flag = <LITERAL> ; for ( int j = lastb ; j < lenc ; j ++ ) { if ( c [ j ] == b [ i ] ) { flag = <LITERAL> ; lastb = j + <LITERAL> ; break ; } } if ( flag ) { is = <LITERAL> ; break ; } } if ( is ) cout << <LITERAL> ; else cout << <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { int t , n , m ; long long ans ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , & n , & m ) ; ans = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , str [ i ] ) ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m ; j ++ ) { board [ i ] [ j ] = <LITERAL> ; } } for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( str [ i ] [ j ] == <LITERAL> ) { i > <LITERAL> && str [ i - <LITERAL> ] [ j ] == <LITERAL> && board [ i ] [ j ] ++ ; j > <LITERAL> && str [ i ] [ j - <LITERAL> ] == <LITERAL> && board [ i ] [ j ] ++ ; i < n - <LITERAL> && str [ i + <LITERAL> ] [ j ] == <LITERAL> && board [ i ] [ j ] ++ ; j < m - <LITERAL> && str [ i ] [ j + <LITERAL> ] == <LITERAL> && board [ i ] [ j ] ++ ; } } } for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( str [ i ] [ j ] == <LITERAL> ) { i > <LITERAL> && str [ i - <LITERAL> ] [ j ] == <LITERAL> && ( board [ i ] [ j ] += board [ i - <LITERAL> ] [ j ] ) ; j > <LITERAL> && str [ i ] [ j - <LITERAL> ] == <LITERAL> && ( board [ i ] [ j ] += board [ i ] [ j - <LITERAL> ] ) ; i < n - <LITERAL> && str [ i + <LITERAL> ] [ j ] == <LITERAL> && ( board [ i ] [ j ] += board [ i + <LITERAL> ] [ j ] ) ; j < m - <LITERAL> && str [ i ] [ j + <LITERAL> ] == <LITERAL> && ( board [ i ] [ j ] += board [ i ] [ j + <LITERAL> ] ) ; } } } for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( str [ i ] [ j ] == <LITERAL> ) { i > <LITERAL> && str [ i - <LITERAL> ] [ j ] == <LITERAL> && ( ans += board [ i - <LITERAL> ] [ j ] ) ; j > <LITERAL> && str [ i ] [ j - <LITERAL> ] == <LITERAL> && ( ans += board [ i ] [ j - <LITERAL> ] ) ; i < n - <LITERAL> && str [ i + <LITERAL> ] [ j ] == <LITERAL> && ( ans += board [ i + <LITERAL> ] [ j ] ) ; j < m - <LITERAL> && str [ i ] [ j + <LITERAL> ] == <LITERAL> && ( ans += board [ i ] [ j + <LITERAL> ] ) ; } } } printf ( <LITERAL> , ans ) ; ans = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m ; j ++ ) { board [ i ] [ j ] = <LITERAL> ; } } for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( str [ i ] [ j ] == <LITERAL> ) { i > <LITERAL> && str [ i - <LITERAL> ] [ j ] == <LITERAL> && board [ i ] [ j ] ++ ; j > <LITERAL> && str [ i ] [ j - <LITERAL> ] == <LITERAL> && board [ i ] [ j ] ++ ; i < n - <LITERAL> && str [ i + <LITERAL> ] [ j ] == <LITERAL> && board [ i ] [ j ] ++ ; j < m - <LITERAL> && str [ i ] [ j + <LITERAL> ] == <LITERAL> && board [ i ] [ j ] ++ ; } } } for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( str [ i ] [ j ] == <LITERAL> ) { i > <LITERAL> && str [ i - <LITERAL> ] [ j ] == <LITERAL> && ( ans += board [ i - <LITERAL> ] [ j ] ) ; j > <LITERAL> && str [ i ] [ j - <LITERAL> ] == <LITERAL> && ( ans += board [ i ] [ j - <LITERAL> ] ) ; i < n - <LITERAL> && str [ i + <LITERAL> ] [ j ] == <LITERAL> && ( ans += board [ i + <LITERAL> ] [ j ] ) ; j < m - <LITERAL> && str [ i ] [ j + <LITERAL> ] == <LITERAL> && ( ans += board [ i ] [ j + <LITERAL> ] ) ; } } } printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
void work ( ) { int n , m ; scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , s [ i ] ) ; ans1 = ans2 = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( s [ i ] [ j ] != <LITERAL> ) { a [ i ] [ j ] = <LITERAL> ; continue ; } a [ i ] [ j ] = <LITERAL> ; } for ( int i = <LITERAL> ; i < n ; i ++ ) for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( s [ i ] [ j ] != <LITERAL> ) continue ; for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) { int x = i + dr [ k ] [ <LITERAL> ] , y = j + dr [ k ] [ <LITERAL> ] ; if ( x < <LITERAL> || x >= n || y < <LITERAL> || y >= m || s [ x ] [ y ] != <LITERAL> ) continue ; a [ i ] [ j ] += a [ x ] [ y ] ; } } for ( int i = <LITERAL> ; i < n ; i ++ ) for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( s [ i ] [ j ] != <LITERAL> ) continue ; for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) { int x = i + dr [ k ] [ <LITERAL> ] , y = j + dr [ k ] [ <LITERAL> ] ; if ( x < <LITERAL> || x >= n || y < <LITERAL> || y >= m || s [ x ] [ y ] != <LITERAL> ) continue ; a [ i ] [ j ] += a [ x ] [ y ] ; } } for ( int i = <LITERAL> ; i < n ; i ++ ) for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( s [ i ] [ j ] != <LITERAL> ) continue ; for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) { int x = i + dr [ k ] [ <LITERAL> ] , y = j + dr [ k ] [ <LITERAL> ] ; if ( x < <LITERAL> || x >= n || y < <LITERAL> || y >= m || s [ x ] [ y ] != <LITERAL> ) continue ; a [ i ] [ j ] += a [ x ] [ y ] ; } ans1 += a [ i ] [ j ] ; } for ( int i = <LITERAL> ; i < n ; i ++ ) for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( s [ i ] [ j ] != <LITERAL> ) { b [ i ] [ j ] = <LITERAL> ; continue ; } b [ i ] [ j ] = <LITERAL> ; } for ( int i = <LITERAL> ; i < n ; i ++ ) for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( s [ i ] [ j ] != <LITERAL> ) continue ; for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) { int x = i + dr [ k ] [ <LITERAL> ] , y = j + dr [ k ] [ <LITERAL> ] ; if ( x < <LITERAL> || x >= n || y < <LITERAL> || y >= m || s [ x ] [ y ] != <LITERAL> ) continue ; b [ i ] [ j ] += b [ x ] [ y ] ; } } for ( int i = <LITERAL> ; i < n ; i ++ ) for ( int j = <LITERAL> ; j < m ; j ++ ) { if ( s [ i ] [ j ] != <LITERAL> ) continue ; for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) { int x = i + dr [ k ] [ <LITERAL> ] , y = j + dr [ k ] [ <LITERAL> ] ; if ( x < <LITERAL> || x >= n || y < <LITERAL> || y >= m || s [ x ] [ y ] != <LITERAL> ) continue ; b [ i ] [ j ] += b [ x ] [ y ] ; } ans2 += b [ i ] [ j ] ; } printf ( <LITERAL> , ans1 , ans2 ) ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) work ( ) ; return <LITERAL> ; } 
void dfs ( int nn , int mm , int index , int typ ) { if ( a [ nn ] [ mm ] == str [ typ ] [ index ] ) { if ( index == strlen ( str [ typ ] ) - <LITERAL> ) { count [ typ ] ++ ; } else { index ++ ; if ( nn - <LITERAL> > <LITERAL> ) dfs ( nn - <LITERAL> , mm , index , typ ) ; if ( mm + <LITERAL> <= m ) dfs ( nn , mm + <LITERAL> , index , typ ) ; if ( nn + <LITERAL> <= n ) dfs ( nn + <LITERAL> , mm , index , typ ) ; if ( mm - <LITERAL> > <LITERAL> ) dfs ( nn , mm - <LITERAL> , index , typ ) ; } } } 
int main ( ) { { int T ; cin >> T ; while ( T -- ) { cin >> n >> m ; memset ( a , <LITERAL> , sizeof ( a ) ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , a [ i ] + <LITERAL> ) ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= m ; j ++ ) { dfs ( i , j , <LITERAL> , <LITERAL> ) ; dfs ( i , j , <LITERAL> , <LITERAL> ) ; } } printf ( <LITERAL> , count [ <LITERAL> ] , count [ <LITERAL> ] ) ; count [ <LITERAL> ] = <LITERAL> , count [ <LITERAL> ] = <LITERAL> ; } return <LITERAL> ; } 
int ok ( int x , int y ) { if ( x <= <LITERAL> || y <= <LITERAL> ) return <LITERAL> ; if ( x > n || y > m ) return <LITERAL> ; return <LITERAL> ; } 
int dfs ( int x , int y , int id ) { if ( vis [ x ] [ y ] ) return f [ x ] [ y ] ; vis [ x ] [ y ] = <LITERAL> ; if ( id == <LITERAL> ) return f [ x ] [ y ] = <LITERAL> ; if ( id == <LITERAL> ) return f [ x ] [ y ] = <LITERAL> ; for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) { int i = x + mx [ k ] , j = y + my [ k ] ; if ( ! ok ( i , j ) ) continue ; if ( id == <LITERAL> && Map [ i ] [ j ] != <LITERAL> ) continue ; if ( id == <LITERAL> && Map [ i ] [ j ] != <LITERAL> ) continue ; if ( id == <LITERAL> && Map [ i ] [ j ] != <LITERAL> ) continue ; if ( id == <LITERAL> && Map [ i ] [ j ] != <LITERAL> ) continue ; if ( id == <LITERAL> && Map [ i ] [ j ] != <LITERAL> ) continue ; f [ x ] [ y ] += dfs ( i , j , id + <LITERAL> ) ; } return f [ x ] [ y ] ; } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & n , & m ) ; char ch [ N ] ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , ch + <LITERAL> ) ; for ( int j = <LITERAL> ; j <= m ; j ++ ) { char c = ch [ j ] ; Map [ i ] [ j ] = c ; ; vis [ i ] [ j ] = f [ i ] [ j ] = <LITERAL> ; } } int girl = <LITERAL> ; int cat = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= m ; j ++ ) { if ( Map [ i ] [ j ] == <LITERAL> ) girl += dfs ( i , j , <LITERAL> ) ; if ( Map [ i ] [ j ] == <LITERAL> ) cat += dfs ( i , j , <LITERAL> ) ; } } } cout << girl << <LITERAL> << cat << endl ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
void dfs ( ll x , ll y , ll l , ll typ ) { if ( x < <LITERAL> || x >= n || y < <LITERAL> || y >= m || s [ x ] [ y ] != ans [ typ ] [ l ] ) return ; vis [ x ] [ y ] = <LITERAL> ; if ( l == <LITERAL> && typ == <LITERAL> ) ans1 ++ ; else if ( l == <LITERAL> && typ == <LITERAL> ) ans2 ++ ; dfs ( x + <LITERAL> , y , l + <LITERAL> , typ ) ; dfs ( x , y + <LITERAL> , l + <LITERAL> , typ ) ; dfs ( x - <LITERAL> , y , l + <LITERAL> , typ ) ; dfs ( x , y - <LITERAL> , l + <LITERAL> , typ ) ; } 
int main ( ) { scanf ( <LITERAL> , & t ) ; while ( t -- ) { ans1 = ans2 = <LITERAL> ; mst ( vis , <LITERAL> ) ; scanf ( <LITERAL> , & n , & m ) ; rep ( i , <LITERAL> , n - <LITERAL> ) { scanf ( <LITERAL> , s [ i ] ) ; } rep ( i , <LITERAL> , n - <LITERAL> ) rep ( j , <LITERAL> , m - <LITERAL> ) if ( ! vis [ i ] [ j ] ) { if ( s [ i ] [ j ] == <LITERAL> ) dfs ( i , j , <LITERAL> , <LITERAL> ) ; else if ( s [ i ] [ j ] == <LITERAL> ) dfs ( i , j , <LITERAL> , <LITERAL> ) ; } printf ( <LITERAL> , ans1 , ans2 ) ; } return <LITERAL> ; } 
void dfs ( int x , int y , char c ) { if ( c == <LITERAL> ) { if ( x + <LITERAL> <= n && s [ x + <LITERAL> ] [ y ] == <LITERAL> ) dfs ( x + <LITERAL> , y , <LITERAL> ) ; if ( x - <LITERAL> > <LITERAL> && s [ x - <LITERAL> ] [ y ] == <LITERAL> ) dfs ( x - <LITERAL> , y , <LITERAL> ) ; if ( y + <LITERAL> <= m && s [ x ] [ y + <LITERAL> ] == <LITERAL> ) dfs ( x , y + <LITERAL> , <LITERAL> ) ; if ( y - <LITERAL> > <LITERAL> && s [ x ] [ y - <LITERAL> ] == <LITERAL> ) dfs ( x , y - <LITERAL> , <LITERAL> ) ; } if ( c == <LITERAL> ) { if ( x + <LITERAL> <= n && s [ x + <LITERAL> ] [ y ] == <LITERAL> ) dfs ( x + <LITERAL> , y , <LITERAL> ) ; if ( x - <LITERAL> > <LITERAL> && s [ x - <LITERAL> ] [ y ] == <LITERAL> ) dfs ( x - <LITERAL> , y , <LITERAL> ) ; if ( y + <LITERAL> <= m && s [ x ] [ y + <LITERAL> ] == <LITERAL> ) dfs ( x , y + <LITERAL> , <LITERAL> ) ; if ( y - <LITERAL> > <LITERAL> && s [ x ] [ y - <LITERAL> ] == <LITERAL> ) dfs ( x , y - <LITERAL> , <LITERAL> ) ; } if ( c == <LITERAL> ) { if ( x + <LITERAL> <= n && s [ x + <LITERAL> ] [ y ] == <LITERAL> ) ++ girl ; if ( x - <LITERAL> > <LITERAL> && s [ x - <LITERAL> ] [ y ] == <LITERAL> ) ++ girl ; if ( y + <LITERAL> <= m && s [ x ] [ y + <LITERAL> ] == <LITERAL> ) ++ girl ; if ( y - <LITERAL> > <LITERAL> && s [ x ] [ y - <LITERAL> ] == <LITERAL> ) ++ girl ; } if ( c == <LITERAL> ) { if ( x + <LITERAL> <= n && s [ x + <LITERAL> ] [ y ] == <LITERAL> ) dfs ( x + <LITERAL> , y , <LITERAL> ) ; if ( x - <LITERAL> > <LITERAL> && s [ x - <LITERAL> ] [ y ] == <LITERAL> ) dfs ( x - <LITERAL> , y , <LITERAL> ) ; if ( y + <LITERAL> <= m && s [ x ] [ y + <LITERAL> ] == <LITERAL> ) dfs ( x , y + <LITERAL> , <LITERAL> ) ; if ( y - <LITERAL> > <LITERAL> && s [ x ] [ y - <LITERAL> ] == <LITERAL> ) dfs ( x , y - <LITERAL> , <LITERAL> ) ; } if ( c == <LITERAL> ) { if ( x + <LITERAL> <= n && s [ x + <LITERAL> ] [ y ] == <LITERAL> ) ++ cat ; if ( x - <LITERAL> > <LITERAL> && s [ x - <LITERAL> ] [ y ] == <LITERAL> ) ++ cat ; if ( y + <LITERAL> <= m && s [ x ] [ y + <LITERAL> ] == <LITERAL> ) ++ cat ; if ( y - <LITERAL> > <LITERAL> && s [ x ] [ y - <LITERAL> ] == <LITERAL> ) ++ cat ; } } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) scanf ( <LITERAL> , s [ i ] + <LITERAL> ) ; girl = <LITERAL> , cat = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) for ( int j = <LITERAL> ; j <= m ; ++ j ) if ( s [ i ] [ j ] == <LITERAL> ) dfs ( i , j , <LITERAL> ) ; else if ( s [ i ] [ j ] == <LITERAL> ) dfs ( i , j , <LITERAL> ) ; printf ( <LITERAL> , girl , cat ) ; } } 
int findgirl ( int x , int y , int cur ) { if ( cur == <LITERAL> ) { return <LITERAL> ; } if ( x < <LITERAL> || x > n || y < <LITERAL> || y > m || photo [ x ] [ y ] != girl [ cur ] ) { return <LITERAL> ; } int tmp = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; ++ i ) { tmp += findgirl ( x + tox [ i ] , y + toy [ i ] , cur + <LITERAL> ) ; } return tmp ; } 
int findcat ( int x , int y , int cur ) { if ( cur == <LITERAL> ) { return <LITERAL> ; } if ( x < <LITERAL> || x > n || y < <LITERAL> || y > m || photo [ x ] [ y ] != cat [ cur ] ) { return <LITERAL> ; } int tmp = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; ++ i ) { tmp += findcat ( x + tox [ i ] , y + toy [ i ] , cur + <LITERAL> ) ; } return tmp ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , photo [ i ] + <LITERAL> ) ; } ans [ <LITERAL> ] = ans [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { for ( int j = <LITERAL> ; j <= m ; ++ j ) { ans [ <LITERAL> ] += findgirl ( i , j , <LITERAL> ) ; ans [ <LITERAL> ] += findcat ( i , j , <LITERAL> ) ; } } printf ( <LITERAL> , ans [ <LITERAL> ] >> <LITERAL> , ans [ <LITERAL> ] >> <LITERAL> ) ; } return <LITERAL> ; } 
void dfs1 ( int x , int y , int s ) { if ( x < <LITERAL> || x >= m || y < <LITERAL> || y >= n || vis [ x ] [ y ] == <LITERAL> || s > <LITERAL> || s < <LITERAL> ) return ; if ( s == <LITERAL> ) { if ( input [ x ] [ y ] == girl [ <LITERAL> ] ) { ans1 ++ ; } return ; } else if ( input [ x ] [ y ] != girl [ s ] ) return ; else if ( input [ x ] [ y ] == girl [ s ] ) { vis [ x ] [ y ] = <LITERAL> ; int nx , ny ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { nx = x + dxy [ i ] [ <LITERAL> ] ; ny = y + dxy [ i ] [ <LITERAL> ] ; dfs1 ( nx , ny , s + <LITERAL> ) ; } vis [ x ] [ y ] = <LITERAL> ; } } 
void dfs2 ( int x , int y , int s ) { if ( x < <LITERAL> || x >= m || y < <LITERAL> || y >= n || vis [ x ] [ y ] == <LITERAL> || s > <LITERAL> || s < <LITERAL> ) return ; if ( s == <LITERAL> ) { if ( input [ x ] [ y ] == cat [ <LITERAL> ] ) { ans2 ++ ; } return ; } else if ( input [ x ] [ y ] != cat [ s ] ) return ; else if ( input [ x ] [ y ] == cat [ s ] ) { vis [ x ] [ y ] = <LITERAL> ; int nx , ny ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { nx = x + dxy [ i ] [ <LITERAL> ] ; ny = y + dxy [ i ] [ <LITERAL> ] ; dfs2 ( nx , ny , s + <LITERAL> ) ; } vis [ x ] [ y ] = <LITERAL> ; } } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { ans1 = ans2 = <LITERAL> ; memset ( vis , <LITERAL> , sizeof ( vis ) ) ; scanf ( <LITERAL> , & m , & n ) ; for ( int i = <LITERAL> ; i < m ; i ++ ) { scanf ( <LITERAL> , input [ i ] ) ; } if ( n * m < <LITERAL> ) { cout << <LITERAL> << <LITERAL> << <LITERAL> << endl ; continue ; } for ( int i = <LITERAL> ; i < m ; i ++ ) { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( input [ i ] [ j ] == <LITERAL> ) { dfs1 ( i , j , <LITERAL> ) ; } if ( input [ i ] [ j ] == <LITERAL> ) { dfs2 ( i , j , <LITERAL> ) ; } } } printf ( <LITERAL> , ans1 , ans2 ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
long long # define cin ( x ) scanf ( <LITERAL> , & x ) # define cout ( x ) printf ( <LITERAL> , x ) # define rep ( i , k , n ) for ( ll i = k ; i <= n ; i ++ ) # define mst ( a , k ) memset ( a , k , sizeof ( a ) ) ; const ll INF = <LITERAL> + <LITERAL> ; inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } ll n , T , a , b , s , num , z , f [ maxn ] ; ll gcd ( ll a , ll b ) { if ( b == <LITERAL> ) return a ; return gcd ( b , a % b ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; rep ( i , <LITERAL> , n ) { scanf ( <LITERAL> , & a , & b ) ; z = <LITERAL> ; if ( a > <LITERAL> * b || a * <LITERAL> < b ) printf ( <LITERAL> ) ; else { s = <LITERAL> * b ; num = <LITERAL> * b - a ; ll gcdd = gcd ( s , num ) ; s /= gcdd ; num /= gcdd ; while ( num -- ) { f [ ++ z ] = <LITERAL> ; s -= <LITERAL> ; } rep ( i , <LITERAL> , z ) { if ( s >= <LITERAL> ) { f [ i ] = <LITERAL> ; s -= <LITERAL> ; } else f [ i ] = s + <LITERAL> , s -= s ; } while ( s ) { if ( s >= <LITERAL> ) f [ ++ z ] = <LITERAL> , s -= <LITERAL> ; else f [ ++ z ] = s , s -= s ; } for ( ll i = z ; i >= <LITERAL> ; i -- ) printf ( <LITERAL> , f [ i ] ) ; printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
long long LL gcd ( LL a , LL b ) { return b ? gcd ( b , a % b ) : a ; } 
void P ( int x , int s ) { if ( x == <LITERAL> && s == <LITERAL> ) return ; if ( s <= x * <LITERAL> ) { for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( s - i <= ( x - <LITERAL> ) * <LITERAL> ) { printf ( <LITERAL> , i ) ; P ( x - <LITERAL> , s - i ) ; return ; } } } int w = ( s - <LITERAL> * x - <LITERAL> ) % <LITERAL> + <LITERAL> ; printf ( <LITERAL> , w ) , P ( x , s - w ) ; } 
int work ( ) { { { { { int a , b ; scanf ( <LITERAL> , & a , & b ) ; if ( <LITERAL> * b - a < <LITERAL> || <LITERAL> * b < <LITERAL> * ( <LITERAL> * b - a ) ) return puts ( <LITERAL> ) , <LITERAL> ; if ( <LITERAL> * b == a ) return puts ( <LITERAL> ) , <LITERAL> ; int x = ( <LITERAL> * b - a ) / gcd ( <LITERAL> * b , <LITERAL> * b - a ) , s = <LITERAL> * b * x / ( <LITERAL> * b - a ) ; P ( x , s ) ; puts ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) work ( ) ; return <LITERAL> ; } 
int work ( ) { for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & a [ i ] . l ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & a [ i ] . b ) ; sort ( a , a + n ) ; memset ( f , <LITERAL> , sizeof ( f ) ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = min ( i , k - <LITERAL> ) ; ~ j ; j -- ) { f [ j + <LITERAL> ] = max ( f [ j + <LITERAL> ] , f [ j ] + a [ i ] . l - a [ i ] . b * j ) ; } } printf ( <LITERAL> , f [ k ] ) ; return <LITERAL> ; } 
int main ( ) { while ( ~ scanf ( <LITERAL> , & n , & k ) ) work ( ) ; return <LITERAL> ; } 
bool comp ( boys a , boys b ) { return a . m > b . m ; } 
int main ( ) { int n , k , mi ; while ( cin >> n >> k ) { for ( int i = <LITERAL> ; i <= k ; i ++ ) { dp [ i ] = <LITERAL> ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & arr [ i ] . n ) ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & arr [ i ] . m ) ; } std :: sort ( arr , arr + n , comp ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = min ( i + <LITERAL> , k ) ; j > <LITERAL> ; j -- ) { dp [ j ] = max ( dp [ j - <LITERAL> ] + arr [ i ] . n - ( j - <LITERAL> ) * arr [ i ] . m , dp [ j ] ) ; } } printf ( <LITERAL> , dp [ k ] ) ; } return <LITERAL> ; } 
int main ( ) { int n , k ; while ( ~ scanf ( <LITERAL> , & n , & k ) ) { for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & node [ i ] . a ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & node [ i ] . b ) ; memset ( dp , <LITERAL> , sizeof ( dp ) ) ; sort ( node , node + n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = k ; j > <LITERAL> ; j -- ) { dp [ j ] = max ( dp [ j ] , dp [ j - <LITERAL> ] + node [ i ] . a - node [ i ] . b * ( j - <LITERAL> ) ) ; } } printf ( <LITERAL> , dp [ k ] ) ; } return <LITERAL> ; } 
bool cmp ( E e1 , E e2 ) { return e1 . b > e2 . b ; } 
int main ( ) { int n , k ; int dp [ <LITERAL> ] = { <LITERAL> } ; while ( ~ scanf ( <LITERAL> , & n , & k ) ) { memset ( dp , <LITERAL> , sizeof ( dp ) ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) cin >> boys [ i ] . l ; for ( int i = <LITERAL> ; i <= n ; i ++ ) cin >> boys [ i ] . b ; sort ( boys + <LITERAL> , boys + n + <LITERAL> , cmp ) ; for ( int j = <LITERAL> ; j <= n ; j ++ ) for ( int i = k ; i > <LITERAL> ; i -- ) { dp [ i ] = max ( dp [ i ] , dp [ i - <LITERAL> ] + boys [ j ] . l - boys [ j ] . b * ( i - <LITERAL> ) ) ; } } cout << dp [ k ] << endl ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
bool cmp ( node a , node b ) { return a . b > b . b ; } 
int main ( ) { while ( ~ scanf ( <LITERAL> , & n , & k ) ) { mst ( dp , <LITERAL> ) ; rep ( i , <LITERAL> , n ) { scanf ( <LITERAL> , & a [ i ] . l ) ; } rep ( i , <LITERAL> , n ) { scanf ( <LITERAL> , & a [ i ] . b ) ; } sort ( a + <LITERAL> , a + <LITERAL> + n , cmp ) ; rep ( i , <LITERAL> , n ) { for ( ll j = k ; j >= <LITERAL> ; j -- ) { dp [ j ] = max ( dp [ j ] , dp [ j - <LITERAL> ] + a [ i ] . l - a [ i ] . b * ( j - <LITERAL> ) ) ; } } printf ( <LITERAL> , dp [ k ] ) ; } return <LITERAL> ; } 
bool cmp ( node a , node b ) { return a . cost > b . cost ; } 
int main ( ) { while ( ~ scanf ( <LITERAL> , & n , & k ) ) { for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & stu [ i ] . love ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & stu [ i ] . cost ) ; sort ( stu + <LITERAL> , stu + n + <LITERAL> , cmp ) ; memset ( f , <LITERAL> , sizeof ( f ) ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = k ; j ; j -- ) f [ j ] = max ( f [ j ] , f [ j - <LITERAL> ] + stu [ i ] . love - stu [ i ] . cost * ( j - <LITERAL> ) ) ; printf ( <LITERAL> , f [ k ] ) ; } return <LITERAL> ; } 
bool cmp ( rec A , rec B ) { return A . b > B . b ; } 
int main ( ) { int n , k ; while ( ~ scanf ( <LITERAL> , & n , & k ) ) { for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & d [ i ] . a ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & d [ i ] . b ) ; sort ( d + <LITERAL> , d + <LITERAL> + n , cmp ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = <LITERAL> ; j <= k ; j ++ ) f [ i ] [ j ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= i , j <= k ; j ++ ) { f [ i ] [ j ] = f [ i - <LITERAL> ] [ j ] ; f [ i ] [ j ] = max ( f [ i ] [ j ] , f [ i - <LITERAL> ] [ j - <LITERAL> ] + d [ i ] . a - ( j - <LITERAL> ) * d [ i ] . b ) ; } } cout << f [ n ] [ k ] << endl ; } return <LITERAL> ; } 
bool cmp ( NODE x , NODE y ) { return x . b > y . b ; } 
int main ( ) { int n , k ; while ( scanf ( <LITERAL> , & n , & k ) != EOF ) { for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] . l ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] . b ) ; f [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) f [ i ] = - <LITERAL> ; sort ( a + <LITERAL> , a + <LITERAL> + n , cmp ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = min ( i , k ) ; j >= <LITERAL> ; j -- ) f [ j ] = max ( f [ j ] , f [ j - <LITERAL> ] + a [ i ] . l - ( j - <LITERAL> ) * a [ i ] . b ) ; printf ( <LITERAL> , f [ k ] ) ; } return <LITERAL> ; } 
int main ( ) { int T ; int n ; int a [ <LITERAL> ] ; cin >> T ; for ( int i = <LITERAL> ; i < T ; i ++ ) { cin >> n ; double sum = <LITERAL> ; for ( int j = <LITERAL> ; j < n - <LITERAL> ; j ++ ) { cin >> a [ j ] ; sum += a [ j ] ; } int ans = ( <LITERAL> * sum / ( <LITERAL> * n - <LITERAL> ) ) ; printf ( <LITERAL> , ans ) ; int count = <LITERAL> ; for ( int j = <LITERAL> ; j < n - <LITERAL> ; j ++ ) { if ( a [ j ] == ans ) { count ++ ; } } double pro = <LITERAL> / count ; printf ( <LITERAL> , pro ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { ll t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { cin >> n ; sum = <LITERAL> ; mst ( num , <LITERAL> ) ; rep ( i , <LITERAL> , n - <LITERAL> ) { scanf ( <LITERAL> , & a [ i ] ) ; sum += a [ i ] ; num [ a [ i ] ] ++ ; } x = ( <LITERAL> * sum ) / ( <LITERAL> * n - <LITERAL> ) ; printf ( <LITERAL> , x , ( double ) <LITERAL> / ( num [ x ] + <LITERAL> ) ) ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { int a [ <LITERAL> ] = { <LITERAL> } ; int n ; scanf ( <LITERAL> , & n ) ; double sum = <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { int temp ; scanf ( <LITERAL> , & temp ) ; a [ temp ] ++ ; sum += temp ; } int max = <LITERAL> ; double pos = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { a [ i ] ++ ; int flag = <LITERAL> ; double average = ( sum + i ) / n ; int ans = average * <LITERAL> / <LITERAL> ; for ( int j = i + <LITERAL> ; j <= ans ; j ++ ) { if ( a [ j ] ) { flag = <LITERAL> ; break ; } } if ( flag ) continue ; if ( i > ans ) break ; double post = <LITERAL> / a [ i ] ; if ( post >= pos ) { max = i ; pos = post ; } a [ i ] -- ; } printf ( <LITERAL> , max , pos ) ; } } 
void init ( ) { memset ( num , <LITERAL> , sizeof ( num ) ) ; cur = MAXN ; ans = <LITERAL> ; sum = <LITERAL> ; } 
int search ( int key ) { for ( int i = key ; i >= <LITERAL> ; -- i ) { if ( num [ i ] ) { return i ; } } return - <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { init ( ) ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; ++ i ) { scanf ( <LITERAL> , & arr [ i ] ) ; sum += arr [ i ] ; ++ num [ arr [ i ] ] ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) { int m = ( double ) ( sum + i ) * <LITERAL> / <LITERAL> / n ; ++ num [ i ] ; int tmp = search ( m ) ; if ( tmp == i ) { if ( num [ i ] <= cur ) { ans = i ; cur = num [ i ] ; } } -- num [ i ] ; } printf ( <LITERAL> , ans , ( double ) <LITERAL> / cur ) ; } return <LITERAL> ; } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int add = <LITERAL> , cont = <LITERAL> ; cin >> m ; for ( int j = <LITERAL> ; j < m - <LITERAL> ; j ++ ) { cin >> num [ j ] ; add += num [ j ] ; } while ( res [ k ] + <LITERAL> <= ( <LITERAL> * ( res [ k ] + add + <LITERAL> ) / m ) / <LITERAL> ) { res [ k ] ++ ; } for ( int i = <LITERAL> ; i < m - <LITERAL> ; i ++ ) { if ( res [ k ] == num [ i ] ) { cont ++ ; } } pp [ k ] = <LITERAL> / cont ; k ++ ; } for ( int i = <LITERAL> ; i < k ; i ++ ) { cout << res [ i ] << <LITERAL> << fixed << setprecision ( <LITERAL> ) << pp [ i ] << endl ; } return <LITERAL> ; } 
int main ( void ) { int cases ; int peo ; scanf ( <LITERAL> , & cases ) ; for ( int i = <LITERAL> ; i < cases ; i ++ ) { scanf ( <LITERAL> , & peo ) ; int * p = ( int * ) malloc ( sizeof ( int ) * peo - <LITERAL> ) ; int sum = <LITERAL> ; int n ; for ( int j = <LITERAL> ; j < peo - <LITERAL> ; j ++ ) { scanf ( <LITERAL> , & p [ j ] ) ; sum += p [ j ] ; } n = sum / ( <LITERAL> * peo / <LITERAL> - <LITERAL> ) ; sum = ( sum + n ) * <LITERAL> / ( peo * <LITERAL> ) ; printf ( <LITERAL> , n ) ; int k = <LITERAL> ; for ( int j = <LITERAL> ; j < peo - <LITERAL> ; j ++ ) { if ( p [ j ] > n && p [ j ] <= sum ) printf ( <LITERAL> ) ; if ( p [ j ] == n ) k ++ ; } printf ( <LITERAL> , <LITERAL> / k ) ; free ( p ) ; } } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { int n ; cin >> n ; int sum = <LITERAL> ; memset ( cnt , <LITERAL> , sizeof ( cnt ) ) ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) { cin >> num [ i ] ; cnt [ num [ i ] ] ++ ; sum += num [ i ] ; } sort ( num + <LITERAL> , num + n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( cnt [ i ] ) mg [ i ] = i ; else mg [ i ] = mg [ i - <LITERAL> ] ; } double posb = <LITERAL> ; int ans ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { sum += i ; int m = sum * <LITERAL> / ( n * <LITERAL> ) ; if ( i > mg [ m ] && i <= m ) ans = i , posb = <LITERAL> ; else if ( i == mg [ m ] ) { if ( cnt [ i ] == <LITERAL> ) ans = i , posb = <LITERAL> ; else if ( <LITERAL> / cnt [ i ] > posb ) ans = i , posb = <LITERAL> / ( cnt [ i ] + <LITERAL> ) ; } sum -= i ; } printf ( <LITERAL> , ans , posb ) ; } return <LITERAL> ; } 
int main ( ) { int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; int sum = <LITERAL> ; int a [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { cin >> a [ i ] ; sum += a [ i ] ; } int ans ; ans = sum << <LITERAL> ; ans /= ( <LITERAL> * n - <LITERAL> ) ; int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( a [ i ] == ans ) { cnt ++ ; } } cout << ans ; printf ( <LITERAL> , <LITERAL> / cnt ) ; } return <LITERAL> ; } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { int n ; scanf ( <LITERAL> , & n ) ; int sum = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; sum += a [ i ] ; } int ans = ( int ) ( <LITERAL> * sum / ( <LITERAL> * n - <LITERAL> ) ) ; sum = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) if ( a [ i ] == ans ) sum ++ ; printf ( <LITERAL> , ans , <LITERAL> / ( <LITERAL> + sum ) ) ; } return <LITERAL> ; } 
int main ( ) { int T ; cin >> T ; while ( T -- ) { int N ; cin >> N ; int summ = <LITERAL> ; int num [ maxn ] ; for ( int i = <LITERAL> ; i < N - <LITERAL> ; i ++ ) { cin >> num [ i ] ; summ = summ + num [ i ] ; } double stand = <LITERAL> * ( double ) summ / ( double ) ( <LITERAL> * N - <LITERAL> ) ; int i ; ; for ( i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( i > stand ) { i -- ; break ; } } int a = <LITERAL> ; for ( int j = <LITERAL> ; j < N ; j ++ ) { if ( num [ j ] == i ) a ++ ; } double per ; if ( a == <LITERAL> ) per = <LITERAL> ; else per = <LITERAL> / ( double ) a ; cout . setf ( ios :: fixed ) ; cout << i << <LITERAL> << fixed << setprecision ( <LITERAL> ) << per << endl ; } return <LITERAL> ; } 
int main ( ) { int n , l , t ; double sum ; scanf ( <LITERAL> , & n ) ; std :: map < int , int > M ; while ( n -- ) { scanf ( <LITERAL> , & l ) ; sum = <LITERAL> ; M . clear ( ) ; for ( int i = <LITERAL> ; i < l - <LITERAL> ; i ++ ) { scanf ( <LITERAL> , & t ) ; M [ t ] ++ ; sum += t ; } } t = sum / ( <LITERAL> * l - <LITERAL> ) ; printf ( <LITERAL> , t , <LITERAL> / ( M [ t ] + <LITERAL> ) ) ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; int N [ <LITERAL> ] ; int n ; while ( t -- ) { scanf ( <LITERAL> , & n ) ; int i ; int sum = <LITERAL> ; int key ; for ( i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) { scanf ( <LITERAL> , & N [ i ] ) ; sum += N [ i ] ; } key = <LITERAL> * sum / ( <LITERAL> * n - <LITERAL> ) ; int count = <LITERAL> ; for ( i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) { if ( N [ i ] == key ) { count ++ ; } } double p = <LITERAL> / count ; printf ( <LITERAL> , key , p ) ; } } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; s = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { a [ i ] = read ( ) ; s += a [ i ] ; } t = <LITERAL> * s / ( <LITERAL> * n - <LITERAL> ) ; num = ( ll ) t ; int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) if ( a [ i ] == num ) cnt ++ ; printf ( <LITERAL> , num , <LITERAL> / cnt ) ; } 
int main ( ) { int T = read ( ) ; while ( T -- ) solve ( ) ; } 
int main ( ) { { int t , n , i , sum , x ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { sum = <LITERAL> ; memset ( c , <LITERAL> , sizeof ( c ) ) ; scanf ( <LITERAL> , & n ) ; for ( i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & x ) ; c [ x ] ++ ; sum += x ; } x = <LITERAL> * sum / ( <LITERAL> * n - <LITERAL> ) ; printf ( <LITERAL> , x , <LITERAL> / ( c [ x ] + <LITERAL> ) ) ; } return <LITERAL> ; } 
void work ( ) { int n , sum = <LITERAL> , ans = <LITERAL> , w , num ; scanf ( <LITERAL> , & n ) ; double ans1 = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , a + i ) , sum += a [ i ] ; for ( int i = <LITERAL> ; i >= <LITERAL> ; i -- ) { if ( i > ( w = ( sum + i ) * <LITERAL> / <LITERAL> / n ) ) continue ; num = <LITERAL> ; bool fl = <LITERAL> ; for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( a [ j ] > i && a [ j ] <= w ) { fl = <LITERAL> ; break ; } if ( a [ j ] == w ) num ++ ; } if ( ! fl ) continue ; if ( <LITERAL> / num > ans1 ) ans1 = <LITERAL> / num , ans = i ; } printf ( <LITERAL> , ans , ans1 ) ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) work ( ) ; return <LITERAL> ; } 
int main ( ) { cin >> T ; while ( T -- ) { cin >> n ; double sum = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; ++ i ) cin >> a [ i ] , sum += a [ i ] ; double ans = <LITERAL> ; int tmp = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) { if ( ( sum + i ) / n * <LITERAL> / <LITERAL> < i ) continue ; ; bool flag = true ; int num = <LITERAL> ; for ( int j = <LITERAL> ; j < n ; ++ j ) if ( a [ j ] > i && a [ j ] <= ( sum + i ) / n * <LITERAL> / <LITERAL> ) { flag = false ; break ; } else if ( a [ j ] == i ) ++ num ; if ( ! flag ) continue ; if ( num <= tmp ) tmp = num , ans = i ; ; } printf ( <LITERAL> , ans , ( double ) <LITERAL> / ( tmp + <LITERAL> ) ) ; } } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { memset ( cnt , <LITERAL> , sizeof ( cnt ) ) ; int sum = <LITERAL> , maxx = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; sum += a [ i ] ; cnt [ a [ i ] ] ++ ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { double k = ( double ) sum + ( double ) i ; k /= ( double ) n ; double m = k * <LITERAL> / <LITERAL> ; if ( i <= floor ( m ) ) maxx = floor ( m ) ; } printf ( <LITERAL> , maxx , <LITERAL> / ( cnt [ maxx ] + <LITERAL> ) ) ; } return <LITERAL> ; } 
double Round ( double a ) { return ( int ) ( a * <LITERAL> + <LITERAL> ) / <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { memset ( q , <LITERAL> , sizeof ( q ) ) ; scanf ( <LITERAL> , & N ) ; int Q = <LITERAL> , R ; for ( int i = <LITERAL> ; i < N ; i ++ ) { int x ; scanf ( <LITERAL> , & x ) ; q [ x ] ++ ; Q += x ; } R = ( <LITERAL> * Q ) / ( <LITERAL> * N - <LITERAL> ) ; double prob = <LITERAL> / ( <LITERAL> + q [ R ] ) ; printf ( <LITERAL> , R , Round ( prob ) ) ; } return <LITERAL> ; } 
int judge ( int k ) { if ( ( double ) ( k + sum ) / n * <LITERAL> / <LITERAL> < k ) { return <LITERAL> ; } else { return <LITERAL> ; } } 
int main ( ) { cin >> t ; for ( int i = <LITERAL> ; i < t ; i ++ ) { sum = <LITERAL> ; cin >> n ; for ( int j = <LITERAL> ; j < n ; j ++ ) { cin >> num [ j ] ; sum += num [ j ] ; } int l = <LITERAL> , r = <LITERAL> , ans ; while ( l <= r ) { int mid = ( l + r ) >> <LITERAL> ; if ( judge ( mid ) ) ans = mid , l = mid + <LITERAL> ; else r = mid - <LITERAL> ; } int pro = <LITERAL> ; for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( num [ j ] == ans ) { pro ++ ; } } cout << ans << <LITERAL> << fixed << setprecision ( <LITERAL> ) << <LITERAL> / pro << endl ; } } 
int array_sum ( int * p , int num ) 
int main ( ) { int T ; scanf_s ( <LITERAL> , & T ) ; while ( T -- ) { int n , N ; scanf_s ( <LITERAL> , & n ) ; int number [ <LITERAL> ] = { <LITERAL> } ; int sume = <LITERAL> ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) { scanf_s ( <LITERAL> , & number [ i ] ) ; sume += number [ i ] ; } int Nmax = ceil ( sume / ( <LITERAL> * n - <LITERAL> ) ) ; if ( Nmax > <LITERAL> ) Nmax = <LITERAL> ; int ideal = <LITERAL> ; for ( N = Nmax ; N >= <LITERAL> ; N -- ) { number [ n - <LITERAL> ] = N ; int sum = array_sum ( number , n ) ; double m = ( <LITERAL> / <LITERAL> ) * double ( sum ) / double ( n ) ; double min_distance = <LITERAL> ; for ( int i = n - <LITERAL> ; i >= <LITERAL> ; i -- ) if ( number [ i ] <= m && m - number [ i ] < min_distance ) { min_distance = m - number [ i ] ; ideal = i ; } if ( ideal == n - <LITERAL> ) break ; } double probability = <LITERAL> ; for ( int i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) if ( number [ i ] == N ) probability ++ ; probability = <LITERAL> / probability ; printf ( <LITERAL> , N , probability ) ; } return <LITERAL> ; } 
int array_sum ( int * p , int num ) { int sum = <LITERAL> ; for ( int i = <LITERAL> ; i <= num - <LITERAL> ; i ++ ) sum += p [ i ] ; return sum ; } 
int main ( ) { int t , n ; cin >> t ; while ( t -- ) { scanf ( <LITERAL> , & n ) ; int s = <LITERAL> ; double mxans1 = <LITERAL> ; int ans1 ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) num [ i ] = <LITERAL> ; for ( int x , i = <LITERAL> ; i < n ; i ++ ) cin >> x , s += x , num [ x ] ++ ; for ( int x = <LITERAL> ; x >= <LITERAL> ; x -- ) { double m = <LITERAL> * ( s + x ) / <LITERAL> / n ; int res = <LITERAL> ; bool flag = <LITERAL> ; bool flag2 = <LITERAL> ; num [ x ] ++ ; for ( int j = m ; j >= <LITERAL> ; j -- ) { if ( num [ j ] ) { res = num [ j ] ; if ( j != x ) flag = <LITERAL> ; flag2 = <LITERAL> ; break ; } } num [ x ] -- ; if ( flag || ! flag2 ) continue ; double mxans2 = <LITERAL> / res ; if ( mxans2 > mxans1 ) { mxans1 = mxans2 ; ans1 = x ; } } cout << ans1 << <LITERAL> ; printf ( <LITERAL> , mxans1 ) ; } } 
int main ( ) { int t , n , i , j , k ; cout << fixed << setprecision ( <LITERAL> ) ; cin >> t ; for ( j = <LITERAL> ; j < t ; j ++ ) { cin >> n ; int a [ <LITERAL> ] = { <LITERAL> } ; double total = <LITERAL> , m ; int ans = <LITERAL> , rate = <LITERAL> ; for ( i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { int num ; cin >> num ; a [ num ] ++ ; total += num ; } for ( i = <LITERAL> ; i < total / ( n - <LITERAL> ) ; i ++ ) { int trate = <LITERAL> ; m = ( ( total + i ) * <LITERAL> ) / ( n * <LITERAL> ) ; k = int ( m ) ; a [ i ] ++ ; while ( a [ k ] == <LITERAL> ) { k -- ; if ( k < <LITERAL> ) break ; } if ( k == i ) { trate = a [ k ] ; } if ( trate < rate ) { ans = k ; rate = trate ; } else if ( trate == rate && k > ans && k == i ) { ans = k ; rate = trate ; } a [ i ] -- ; } cout << ans << <LITERAL> << double ( <LITERAL> ) / double ( rate ) << endl ; } } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { int n ; scanf ( <LITERAL> , & n ) ; int sum = <LITERAL> ; int tot = <LITERAL> ; int chos = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & d [ i ] ) , sum += d [ i ] ; for ( int i = <LITERAL> ; i >= <LITERAL> ; i -- ) { d [ n ] = i ; int M = ( sum + i ) * <LITERAL> / n / <LITERAL> , x = <LITERAL> , t = <LITERAL> ; for ( int j = <LITERAL> ; j <= n ; j ++ ) { if ( d [ j ] <= M && d [ j ] > x ) t = <LITERAL> , x = d [ j ] ; if ( d [ j ] == x ) t ++ ; } if ( t < tot && i == x ) tot = t , chos = i ; } printf ( <LITERAL> , chos , <LITERAL> / tot ) ; } return <LITERAL> ; } 
int main ( ) { long long a [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; long long max = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( a [ i ] > <LITERAL> ) { long long all = a [ i ] ; a [ i ] = <LITERAL> ; long long b [ <LITERAL> ] = { <LITERAL> } ; for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) b [ j ] = a [ j ] + all / <LITERAL> ; int next = all % <LITERAL> , now = i + <LITERAL> ; a [ i ] = all ; while ( next > <LITERAL> ) { if ( now > <LITERAL> ) now -= <LITERAL> ; b [ now ] ++ ; next -- ; now ++ ; } long long score = <LITERAL> ; for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) { if ( b [ j ] % <LITERAL> == <LITERAL> ) score += b [ j ] ; } if ( score > max ) max = score ; ; } } printf ( <LITERAL> , max ) ; return <LITERAL> ; } 
void mov ( int x ) { if ( ! ( A [ x ] & <LITERAL> ) && A [ x ] != <LITERAL> ) return ; long long B [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= n ; ++ i ) B [ i ] = A [ i ] ; int now = x + <LITERAL> , val = A [ x ] ; B [ x ] = <LITERAL> ; if ( val > n ) { int tmp = val / n ; val %= n ; for ( int i = <LITERAL> ; i <= n ; ++ i ) B [ i ] += tmp ; } while ( val ) { if ( now == n + <LITERAL> ) now = <LITERAL> ; ++ B [ now ] ; ++ now ; -- val ; } long long ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) if ( ! ( B [ i ] & <LITERAL> ) ) ans += B [ i ] ; if ( ans > fans ) fans = ans ; } 
int main ( ) { for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & A [ i ] ) ; } for ( int i = <LITERAL> ; i <= n ; ++ i ) { mov ( i ) ; } printf ( <LITERAL> , fans ) ; return <LITERAL> ; } 
int main ( ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; b [ i ] = a [ i ] ; } long long max = <LITERAL> , sum = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { long long num = a [ i ] / <LITERAL> ; long long temp = a [ i ] - num * <LITERAL> ; b [ i ] = <LITERAL> ; for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { b [ j ] += num ; } for ( int j = ( i + <LITERAL> + <LITERAL> ) % <LITERAL> ; temp ; j = ( j + <LITERAL> + <LITERAL> ) % <LITERAL> ) { b [ j ] ++ ; temp -- ; } for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( b [ i ] % <LITERAL> == <LITERAL> ) sum += b [ i ] ; } if ( sum > max ) max = sum ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { b [ i ] = a [ i ] ; } sum = <LITERAL> ; } cout << max ; } 
void calc ( long long x , long long y ) { if ( y == <LITERAL> ) return ; if ( x == <LITERAL> ) { calc ( <LITERAL> , y ) ; return ; } b [ x ] ++ ; calc ( x + <LITERAL> , y - <LITERAL> ) ; } 
int main ( ) { for ( long long i = <LITERAL> ; i < <LITERAL> ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; long long ans = <LITERAL> ; for ( long long i = <LITERAL> ; i < <LITERAL> ; i ++ ) { long long sum = <LITERAL> ; for ( long long j = <LITERAL> ; j < <LITERAL> ; j ++ ) b [ j ] = a [ j ] ; long long x = b [ i ] ; b [ i ] = <LITERAL> ; for ( long long j = <LITERAL> ; j < <LITERAL> ; j ++ ) b [ j ] += x / <LITERAL> ; calc ( i + <LITERAL> , x % <LITERAL> ) ; for ( long long j = <LITERAL> ; j < <LITERAL> ; j ++ ) if ( b [ j ] % <LITERAL> == <LITERAL> ) sum += b [ j ] ; ans = max ( ans , sum ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { for ( int i = <LITERAL> ; i < <LITERAL> ; ++ i ) { scanf ( <LITERAL> , & a [ i ] ) ; } for ( int w = <LITERAL> ; w < <LITERAL> ; ++ w ) { for ( int i = <LITERAL> ; i < <LITERAL> ; ++ i ) { b [ i ] = a [ i ] ; } b [ w ] = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; ++ i ) { b [ i ] += a [ w ] / <LITERAL> ; } for ( int i = <LITERAL> ; i <= a [ w ] % <LITERAL> ; ++ i ) { ++ b [ ( w + i ) % <LITERAL> ] ; } ll tmp = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; ++ i ) { { if ( b [ i ] % <LITERAL> == <LITERAL> ) { tmp += b [ i ] ; } } } ans = std :: max ( ans , tmp ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) scanf ( <LITERAL> , a + i ) ; long long ans = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) b [ j ] = a [ j ] ; int x = b [ i ] ; long long w = <LITERAL> ; b [ i ] = <LITERAL> ; for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { if ( i != j ) b [ j ] += ceil ( ( ( x - ( j + <LITERAL> - i ) % <LITERAL> ) + <LITERAL> ) / <LITERAL> ) ; else b [ j ] = x / <LITERAL> ; if ( b [ j ] % <LITERAL> == <LITERAL> ) w += b [ j ] ; } ans = max ( ans , w ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( void ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) scanf ( <LITERAL> , & arr [ i ] ) ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) afarr [ j ] = arr [ j ] ; afarr [ i ] = <LITERAL> ; for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) afarr [ j ] += arr [ i ] / <LITERAL> ; left = arr [ i ] % <LITERAL> ; long long k = <LITERAL> ; while ( left ) { left -- ; afarr [ ( k + i ) % <LITERAL> ] ++ ; k ++ ; } long long now = <LITERAL> ; for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) if ( ! ( afarr [ j ] % <LITERAL> ) ) now += afarr [ j ] ; ans = max ( ans , now ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( a [ i ] == <LITERAL> ) continue ; long long x = a [ i ] / <LITERAL> ; for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) { if ( i == j ) b [ j ] = x ; else b [ j ] = a [ j ] + x ; } long long res = a [ i ] % <LITERAL> ; int now = i + <LITERAL> ; while ( res ) { if ( now == <LITERAL> ) now = <LITERAL> ; b [ now ] ++ ; res -- ; now ++ ; } long long temp = <LITERAL> ; for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) if ( ! ( b [ j ] & <LITERAL> ) ) temp += b [ j ] ; ans = max ( ans , temp ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { long long cnt , mxcnt = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { scanf ( <LITERAL> , & arr [ i ] ) ; } for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( ( arr [ i ] / <LITERAL> ) % <LITERAL> == <LITERAL> ) { cnt = ( arr [ i ] / <LITERAL> ) ; } else { cnt = <LITERAL> ; } for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { { if ( ( arr [ ( i + j ) % <LITERAL> ] + arr [ i ] / <LITERAL> + ( j <= arr [ i ] % <LITERAL> ) ) % <LITERAL> == <LITERAL> ) { cnt += ( arr [ ( i + j ) % <LITERAL> ] + arr [ i ] / <LITERAL> + ( j <= arr [ i ] % <LITERAL> ) ) ; } } } cnt > mxcnt && ( mxcnt = cnt ) ; } printf ( <LITERAL> , mxcnt ) ; return <LITERAL> ; } 
int main ( ) { long long ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) cin >> a [ i ] ; for ( int num = <LITERAL> ; num <= <LITERAL> ; ++ num ) { long long sum = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) tmp [ i ] = a [ i ] ; tmp [ num ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) tmp [ i ] += a [ num ] / <LITERAL> ; for ( int i = num + <LITERAL> , j = <LITERAL> ; j <= a [ num ] % <LITERAL> ; ++ i , ++ j ) { if ( i == <LITERAL> ) i = <LITERAL> ; tmp [ i ] ++ ; } for ( int i = <LITERAL> ; i <= n ; ++ i ) if ( tmp [ i ] % <LITERAL> == <LITERAL> ) sum += tmp [ i ] ; ans = max ( ans , sum ) ; } cout << ans ; } 
int main ( ) { int a [ <LITERAL> ] , a_cp [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { cin >> a [ i ] ; } long long maxn = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( a [ i ] != <LITERAL> ) { long long cnt = <LITERAL> ; memcpy ( a_cp , a , sizeof ( a ) ) ; a_cp [ i ] = <LITERAL> ; int u = a [ i ] % <LITERAL> , t = a [ i ] / <LITERAL> ; for ( int j = i + <LITERAL> ; j < <LITERAL> ; j ++ ) { a_cp [ j ] ++ ; u -- ; if ( u == <LITERAL> ) break ; } for ( int j = <LITERAL> ; j < u ; j ++ ) { a_cp [ j ] ++ ; } for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { a_cp [ j ] += t ; } for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { if ( a_cp [ j ] % <LITERAL> == <LITERAL> ) { cnt += a_cp [ j ] ; } } maxn = max ( maxn , cnt ) ; } } cout << maxn ; return <LITERAL> ; } 
int main ( ) { for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) if ( a [ i ] != <LITERAL> ) { for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) b [ j ] = a [ j ] ; int x = b [ i ] % <LITERAL> , y = b [ i ] / <LITERAL> ; b [ i ] = <LITERAL> ; int pos = i ; for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) { pos = pos + <LITERAL> ; if ( pos == <LITERAL> ) pos = <LITERAL> ; if ( x == <LITERAL> ) b [ pos ] += y ; else b [ pos ] += y + <LITERAL> , x -- ; } ll sum = <LITERAL> ; for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) { if ( ! ( b [ j ] & <LITERAL> ) ) sum += b [ j ] ; } ans = max ( ans , sum ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { ll a [ <LITERAL> ] ; ll i , j , max = <LITERAL> ; for ( i = <LITERAL> ; i < <LITERAL> ; i ++ ) cin >> a [ i ] ; for ( i = <LITERAL> ; i < <LITERAL> ; i ++ ) { ll temp [ <LITERAL> ] , tmax = <LITERAL> ; if ( a [ i ] == <LITERAL> ) continue ; for ( j = <LITERAL> ; j < <LITERAL> ; j ++ ) temp [ j ] = a [ j ] ; temp [ i ] = <LITERAL> ; for ( j = <LITERAL> ; j < <LITERAL> ; j ++ ) temp [ j ] += a [ i ] / <LITERAL> ; for ( j = <LITERAL> ; j < a [ i ] % <LITERAL> ; j ++ ) { temp [ ( i + j + <LITERAL> ) % <LITERAL> ] ++ ; } for ( j = <LITERAL> ; j < <LITERAL> ; j ++ ) { if ( temp [ j ] % <LITERAL> == <LITERAL> ) tmax += temp [ j ] ; } if ( tmax > max ) max = tmax ; } cout << max << endl ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; scanf ( <LITERAL> , s + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int x = s [ i ] - <LITERAL> , y = s [ i + <LITERAL> ] - <LITERAL> ; a [ x ] [ y ] ++ ; if ( a [ x ] [ y ] > mx ) { mx = a [ x ] [ y ] ; ansx = x , ansy = y ; } } printf ( <LITERAL> , ansx + <LITERAL> , ansy + <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , st ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int q = st [ i - <LITERAL> ] - <LITERAL> , w = st [ i ] - <LITERAL> ; a [ q * <LITERAL> + w ] ++ ; } int maxx = <LITERAL> , pos ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) if ( a [ i ] > maxx ) { maxx = a [ i ] , pos = i ; } printf ( <LITERAL> , pos / <LITERAL> + <LITERAL> , pos % <LITERAL> + <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , k = <LITERAL> , ans , cnt = <LITERAL> ; scanf ( <LITERAL> , & n ) ; getchar ( ) ; gets ( s ) ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { ans = <LITERAL> ; for ( int j = i ; j < n - <LITERAL> ; j ++ ) { if ( s [ j ] == s [ i ] && s [ j + <LITERAL> ] == s [ i + <LITERAL> ] ) ans ++ ; } if ( ans > cnt ) { cnt = ans ; k = i ; } } printf ( <LITERAL> , s [ k ] , s [ k + <LITERAL> ] ) ; } 
int main ( ) { cin >> n >> s ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { int cont = <LITERAL> ; for ( int j = i ; j < n - <LITERAL> ; j ++ ) { if ( s [ i ] == s [ j ] && s [ i + <LITERAL> ] == s [ j + <LITERAL> ] ) { cont ++ ; } } if ( cont > maxx ) { a = s [ i ] ; b = s [ i + <LITERAL> ] ; maxx = cont ; } } cout << a << b ; return <LITERAL> ; } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; } pcc p [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { p [ i ] . first = a [ i ] ; p [ i ] . second = a [ i + <LITERAL> ] ; } int mm = - <LITERAL> , record = <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { int max = <LITERAL> ; for ( int j = <LITERAL> ; j < n - <LITERAL> ; j ++ ) { if ( p [ i ] == p [ j ] ) { max ++ ; } } if ( max >= mm ) { mm = max ; record = i ; } } cout << p [ record ] . first << p [ record ] . second ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & len ) ; gets ( str ) ; for ( char i = <LITERAL> ; i <= <LITERAL> ; i ++ ) for ( char j = <LITERAL> ; j <= <LITERAL> ; j ++ ) { int now = <LITERAL> ; for ( int k = <LITERAL> ; k < len ; k ++ ) if ( str [ k - <LITERAL> ] == i && str [ k ] == j ) now ++ ; if ( now > maxn ) { maxn = now ; nowstr [ <LITERAL> ] = i ; nowstr [ <LITERAL> ] = j ; } } nowstr [ <LITERAL> ] = <LITERAL> ; puts ( nowstr ) ; } 
int main ( ) { map < string , int > counter ; int n , m = <LITERAL> ; string s , ans ; cin >> n >> s ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { counter [ s . substr ( i , <LITERAL> ) ] ++ ; int c = counter [ s . substr ( i , <LITERAL> ) ] ; if ( c > m ) { m = c ; ans = s . substr ( i , <LITERAL> ) ; } } cout << ans ; return <LITERAL> ; } 
int main ( ) { int n , i , j ; cin >> n ; string s ; cin >> s ; for ( i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { int a , b ; a = int ( s [ i ] - <LITERAL> ) ; b = int ( s [ i + <LITERAL> ] - <LITERAL> ) ; cnt [ a ] [ b ] ++ ; } int ma , mb , max ; max = <LITERAL> ; for ( i = <LITERAL> ; i < <LITERAL> ; i ++ ) for ( j = <LITERAL> ; j < <LITERAL> ; j ++ ) { if ( cnt [ i ] [ j ] > max ) { max = cnt [ i ] [ j ] ; ma = i ; mb = j ; } } cout << char ( ma + <LITERAL> ) << char ( mb + <LITERAL> ) << endl ; } 
int main ( void ) { int n ; scanf ( <LITERAL> , & n ) ; char str [ <LITERAL> ] ; scanf ( <LITERAL> , str ) ; char str2 [ <LITERAL> ] [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { str2 [ i ] [ <LITERAL> ] = str [ i ] ; str2 [ i ] [ <LITERAL> ] = str [ i + <LITERAL> ] ; } int str3 [ <LITERAL> ] = { <LITERAL> } ; char str4 [ <LITERAL> ] [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { int pd = <LITERAL> ; for ( int j = <LITERAL> ; j < n - <LITERAL> ; j ++ ) { if ( str4 [ j ] [ <LITERAL> ] == str2 [ i ] [ <LITERAL> ] && str4 [ j ] [ <LITERAL> ] == str2 [ i ] [ <LITERAL> ] ) { pd = <LITERAL> ; break ; } } if ( pd ) { str4 [ i ] [ <LITERAL> ] = str2 [ i ] [ <LITERAL> ] ; str4 [ i ] [ <LITERAL> ] = str2 [ i ] [ <LITERAL> ] ; } } for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < n - <LITERAL> ; j ++ ) { if ( str4 [ i ] [ <LITERAL> ] == str2 [ j ] [ <LITERAL> ] && str4 [ i ] [ <LITERAL> ] == str2 [ j ] [ <LITERAL> ] ) str3 [ i ] ++ ; } } int max = str3 [ <LITERAL> ] , out = <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( str3 [ i ] > max ) { max = str3 [ i ] ; out = i ; } } printf ( <LITERAL> , str4 [ out ] [ <LITERAL> ] , str4 [ out ] [ <LITERAL> ] ) ; } 
int main ( ) { int n , mx = <LITERAL> ; string s , mxs ; map < string , int > cnt ; cin >> n >> s ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { cnt [ s . substr ( i , <LITERAL> ) ] ++ ; cnt [ s . substr ( i , <LITERAL> ) ] > mx && ( mxs = s . substr ( i , <LITERAL> ) , mx = cnt [ s . substr ( i , <LITERAL> ) ] ) ; } cout << mxs << endl ; return <LITERAL> ; } 
int main ( ) { int n ; string line ; cin >> n >> line ; string s , r ; int count = - <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { s . assign ( line , i , <LITERAL> ) ; re [ s ] ++ ; if ( count < re [ s ] ) { r = s ; count = re [ s ] ; } } cout << r ; } 
int main ( ) { int n ; cin >> n ; char ch [ <LITERAL> ] ; cin >> ch ; int count = <LITERAL> , max = <LITERAL> ; int maxindex = <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { char t [ <LITERAL> ] = { <LITERAL> } ; t [ <LITERAL> ] = ch [ i ] ; t [ <LITERAL> ] = ch [ i + <LITERAL> ] ; char * temp = ch + i ; while ( <LITERAL> ) { if ( strstr ( temp , t ) ) { count ++ ; temp = strstr ( temp , t ) + <LITERAL> ; } else { count = <LITERAL> ; break ; } if ( count > max ) { max = count ; maxindex = i ; } } } cout << ch [ maxindex ] << ch [ maxindex + <LITERAL> ] ; } 
int main ( ) { int n , i , j , max = <LITERAL> ; int judge ; char str [ <LITERAL> ] = { <LITERAL> } ; int arr [ <LITERAL> ] = { <LITERAL> } ; scanf ( <LITERAL> , & n ) ; for ( i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & str [ i ] ) ; } arr [ <LITERAL> ] = <LITERAL> ; for ( i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { judge = <LITERAL> ; for ( j = <LITERAL> ; j < i ; j ++ ) { if ( str [ i ] == str [ j ] && str [ i + <LITERAL> ] == str [ j + <LITERAL> ] ) { arr [ j ] ++ ; judge = <LITERAL> ; break ; } } if ( judge == <LITERAL> ) { arr [ i ] ++ ; } } for ( i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } for ( i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( arr [ i ] == max ) { printf ( <LITERAL> , str [ i ] , str [ i + <LITERAL> ] ) ; break ; } } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; scanf ( <LITERAL> , str + <LITERAL> ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { string temp = <LITERAL> ; temp += str [ i ] ; temp += str [ i + <LITERAL> ] ; mp [ temp ] ++ ; if ( mp [ temp ] > maxx ) { maxx = mp [ temp ] ; ans = temp ; } } cout << ans ; return <LITERAL> ; } 
int main ( ) { int a ; char b [ <LITERAL> ] ; cin >> a >> b ; int d [ <LITERAL> ] [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { d [ i ] [ j ] = <LITERAL> ; } } for ( int i = <LITERAL> ; i < a - <LITERAL> ; i ++ ) { d [ b [ i ] - <LITERAL> ] [ b [ i + <LITERAL> ] - <LITERAL> ] ++ ; } int max = <LITERAL> ; int t1 = <LITERAL> , t2 = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { if ( d [ i ] [ j ] > max ) { max = d [ i ] [ j ] ; t1 = i ; t2 = j ; } } } cout << ( char ) ( t1 + <LITERAL> ) << ( char ) ( t2 + <LITERAL> ) ; } 
int main ( ) { int n ; while ( cin >> n ) { int a [ <LITERAL> ] [ <LITERAL> ] = { <LITERAL> } ; string s ; cin >> s ; int d = <LITERAL> ; int c ; for ( int i = <LITERAL> ; i < s . size ( ) - <LITERAL> ; i ++ ) { a [ s [ i ] - <LITERAL> ] [ s [ i + <LITERAL> ] - <LITERAL> ] ++ ; if ( a [ s [ i ] - <LITERAL> ] [ s [ i + <LITERAL> ] - <LITERAL> ] > d ) { d = a [ s [ i ] - <LITERAL> ] [ s [ i + <LITERAL> ] - <LITERAL> ] ; c = i ; } } cout << s [ c ] << s [ c + <LITERAL> ] << endl ; } return <LITERAL> ; } 
int main ( ) { cin >> n ; scanf ( <LITERAL> , s ) ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; ++ i ) { a [ ( s [ i ] - <LITERAL> ) * <LITERAL> + s [ i + <LITERAL> ] - <LITERAL> ] ++ ; if ( ans < a [ ( s [ i ] - <LITERAL> ) * <LITERAL> + s [ i + <LITERAL> ] - <LITERAL> ] ) ans = a [ ( s [ i ] - <LITERAL> ) * <LITERAL> + s [ i + <LITERAL> ] - <LITERAL> ] , num = ( s [ i ] - <LITERAL> ) * <LITERAL> + s [ i + <LITERAL> ] - <LITERAL> ; } printf ( <LITERAL> , num / <LITERAL> + <LITERAL> , num % <LITERAL> + <LITERAL> ) ; } 
int max ( int a , int b ) { return ( a > b ? a : b ) ; } 
int main ( ) { int n , temp = <LITERAL> , temp1 = <LITERAL> , ans = <LITERAL> , arr1 [ <LITERAL> ] ; string s ; cin >> n ; cin >> s ; for ( int i = <LITERAL> ; i < n ; i ++ ) { char ch1 = s [ i ] , ch2 = s [ i + <LITERAL> ] ; for ( int j = i + <LITERAL> ; j < n ; j ++ ) { if ( ch1 == s [ j ] ) { if ( ch2 == s [ j + <LITERAL> ] ) { ans ++ ; } } } arr1 [ i ] = ans ; ans = <LITERAL> ; } for ( int x = <LITERAL> ; x < n ; x ++ ) { temp = max ( temp , arr1 [ x ] ) ; } for ( int y = <LITERAL> ; y < n ; y ++ ) { if ( arr1 [ y ] == temp ) { temp1 = y ; break ; } } cout << s [ temp1 ] << s [ temp1 + <LITERAL> ] ; } 
int main ( ) { cin >> len >> s ; for ( int i = <LITERAL> ; i < len - <LITERAL> ; ++ i ) { string substring = <LITERAL> ; substring += s [ i ] ; substring += s [ i + <LITERAL> ] ; if ( mp . count ( substring ) == false ) { mp . insert ( make_pair ( substring , <LITERAL> ) ) ; } else { ++ mp [ substring ] ; } } for ( map < string , int > :: iterator it = mp . begin ( ) ; it != mp . end ( ) ; ++ it ) { if ( it -> second > cnt ) { cnt = it -> second ; ans = it -> first ; } } cout << ans ; return <LITERAL> ; } 
int main ( ) { int n , ans = <LITERAL> ; scanf ( <LITERAL> , & n , s ) ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j <= <LITERAL> ; j ++ ) { int w = <LITERAL> ; for ( int k = <LITERAL> ; s [ k ] ; k ++ ) { if ( s [ k ] == j && s [ k - <LITERAL> ] == i ) w ++ ; } if ( w > ans ) ans = w , ans1 [ <LITERAL> ] = i , ans1 [ <LITERAL> ] = j ; } } puts ( ans1 ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; getchar ( ) ; char str [ n + <LITERAL> ] , pair [ <LITERAL> ] [ <LITERAL> ] ; int i , j , len , max = <LITERAL> ; scanf ( <LITERAL> , str ) ; ; getchar ( ) ; int sum [ n + <LITERAL> ] = { <LITERAL> } ; int x ; len = strlen ( str ) ; for ( i = <LITERAL> ; i < len - <LITERAL> ; i ++ ) { pair [ i ] [ <LITERAL> ] = str [ i ] ; pair [ i ] [ <LITERAL> ] = str [ i + <LITERAL> ] ; pair [ i ] [ <LITERAL> ] = <LITERAL> ; } for ( i = <LITERAL> ; i < len - <LITERAL> ; i ++ ) { for ( j = i ; j < len - <LITERAL> ; j ++ ) { if ( pair [ i ] [ <LITERAL> ] == pair [ j ] [ <LITERAL> ] && pair [ i ] [ <LITERAL> ] == pair [ j ] [ <LITERAL> ] && pair [ j ] [ <LITERAL> ] == <LITERAL> ) { if ( sum [ i ] != <LITERAL> ) pair [ j ] [ <LITERAL> ] = <LITERAL> ; sum [ i ] ++ ; if ( sum [ i ] > max ) { max = sum [ i ] ; x = i ; } } } } printf ( <LITERAL> , pair [ x ] [ <LITERAL> ] , pair [ x ] [ <LITERAL> ] ) ; return <LITERAL> ; } 
int main ( ) { int n ; char a [ <LITERAL> ] , b [ <LITERAL> ] [ <LITERAL> ] ; scanf ( <LITERAL> , & n ) ; getchar ( ) ; int num = <LITERAL> , u = <LITERAL> , ans [ <LITERAL> ] = { <LITERAL> } ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { u = <LITERAL> ; for ( int j = <LITERAL> ; j <= num ; j ++ ) { if ( a [ i ] == b [ j ] [ <LITERAL> ] && a [ i + <LITERAL> ] == b [ j ] [ <LITERAL> ] ) { ans [ j ] ++ ; u = <LITERAL> ; break ; } } if ( u == <LITERAL> ) { num ++ ; b [ num ] [ <LITERAL> ] = a [ i ] , b [ num ] [ <LITERAL> ] = a [ i + <LITERAL> ] ; ans [ num ] ++ ; } } int an = <LITERAL> , max = <LITERAL> ; for ( int i = <LITERAL> ; i <= num ; i ++ ) { if ( max < ans [ i ] ) { max = ans [ i ] ; an = i ; } } printf ( <LITERAL> , b [ an ] [ <LITERAL> ] , b [ an ] [ <LITERAL> ] ) ; return <LITERAL> ; } 
int main ( ) { char str [ <LITERAL> ] ; int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> str [ i ] ; } for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { a [ str [ i ] - <LITERAL> ] [ str [ i + <LITERAL> ] - <LITERAL> ] ++ ; } int x = <LITERAL> ; int y = <LITERAL> ; int max = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { if ( a [ i ] [ j ] > max ) { x = i ; y = j ; max = a [ i ] [ j ] ; } } } cout << ( char ) ( x + <LITERAL> ) << ( char ) ( y + <LITERAL> ) ; ; return <LITERAL> ; } 
int main ( ) { long long n , q , pdmg = <LITERAL> , dmg ; scanf ( <LITERAL> , & n , & q ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & arr [ i ] ) ; arr [ i ] += arr [ i - <LITERAL> ] ; } for ( int i = <LITERAL> ; i < q ; i ++ ) { scanf ( <LITERAL> , & dmg ) ; int l = <LITERAL> , r = n ; while ( l != r ) { int mid = ( l + r + <LITERAL> ) / <LITERAL> ; if ( pdmg + dmg >= arr [ mid ] ) { l = mid ; } else { r = mid - <LITERAL> ; } } if ( l == n ) { printf ( <LITERAL> , n ) ; pdmg = <LITERAL> ; } else { printf ( <LITERAL> , n - l ) ; pdmg += dmg ; } } return <LITERAL> ; } 
int search ( ll key ) { int left = <LITERAL> , right = n , tmp = <LITERAL> ; while ( left <= right ) { int mid = ( left + right ) >> <LITERAL> ; if ( sum [ mid ] <= key ) { tmp = mid ; left = mid + <LITERAL> ; } else { right = mid - <LITERAL> ; } } return tmp ; } 
int main ( ) { scanf ( <LITERAL> , & n , & q ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & a [ i ] ) ; sum [ i ] = sum [ i - <LITERAL> ] + a [ i ] ; } for ( int i = <LITERAL> ; i <= q ; ++ i ) { scanf ( <LITERAL> , & k [ i ] ) ; } for ( int i = <LITERAL> ; i <= q ; ++ i ) { cur += k [ i ] ; int tmp = search ( cur ) ; printf ( <LITERAL> , ( tmp == n ) ? n : ( n - tmp ) ) ; if ( tmp == n ) { cur = <LITERAL> ; } } return <LITERAL> ; } 
int erfen ( long long x ) { int l = <LITERAL> , r = n ; while ( l < r ) { int mid = ( l + r ) / <LITERAL> ; if ( a [ mid ] >= x ) r = mid ; else l = mid + <LITERAL> ; } if ( a [ l ] == x ) return l ; else return l - <LITERAL> ; } 
int main ( ) { cin >> n >> q ; for ( int i = <LITERAL> ; i <= n ; ++ i ) cin >> a [ i ] ; for ( int i = <LITERAL> ; i <= n ; ++ i ) a [ i ] += a [ i - <LITERAL> ] ; for ( int i = <LITERAL> ; i <= q ; ++ i ) { cin >> x ; long long tmp = x ; x += sum ; sum += tmp ; if ( x >= a [ n ] ) { cout << n << endl ; sum = <LITERAL> ; continue ; } int ans = erfen ( x ) ; cout << n - ans << endl ; } } 
int findf ( long long k , int l , int r ) { int mid , last ; while ( l < r ) { mid = ( l + r ) >> <LITERAL> ; if ( s [ mid ] <= k ) l = mid + <LITERAL> , last = l ; else r = mid , last = r ; } return last ; } 
int main ( ) { cin >> n >> q ; s [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> a [ i ] ; s [ i ] = s [ i - <LITERAL> ] + a [ i ] ; } long long atk = <LITERAL> , k ; while ( q -- ) { cin >> k ; atk += k ; int f = findf ( atk , <LITERAL> , n + <LITERAL> ) ; ; if ( n - f + <LITERAL> == <LITERAL> ) atk = <LITERAL> , cout << n << <LITERAL> ; else if ( s [ f ] == k ) cout << n - f << <LITERAL> ; else cout << n - f + <LITERAL> << <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; sum [ i ] = sum [ i - <LITERAL> ] + a [ i ] ; } ll pre = <LITERAL> ; while ( m -- ) { ll K ; scanf ( <LITERAL> , & K ) ; pre += K ; if ( pre >= sum [ n ] ) { printf ( <LITERAL> , n ) ; pre = <LITERAL> ; continue ; } int x = lower_bound ( sum + <LITERAL> , sum + <LITERAL> + n , pre ) - sum ; int ans = n - x + <LITERAL> ; if ( sum [ x ] - pre == <LITERAL> ) ans -- ; printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
int main ( ) { int n , q ; scanf ( <LITERAL> , & n , & q ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , s + i ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) s [ i ] += s [ i - <LITERAL> ] ; s [ n ] = <LITERAL> ; for ( int i = <LITERAL> ; i < q ; i ++ ) scanf ( <LITERAL> , k + i ) ; long long sum = <LITERAL> ; for ( int i = <LITERAL> ; i < q ; i ++ ) { sum += k [ i ] ; int w = upper_bound ( s , s + n , sum ) - s ; printf ( <LITERAL> , n - w ? n - w : n ) ; if ( w == n ) sum = <LITERAL> ; } return <LITERAL> ; } 
int find ( long long val , int p , long long r ) { return lower_bound ( sum + <LITERAL> , sum + n + <LITERAL> , val + sum [ p + <LITERAL> ] - r ) - sum ; } 
int main ( ) { scanf ( <LITERAL> , & n , & q ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & A [ i ] ) ; sum [ i ] = sum [ i - <LITERAL> ] + A [ i ] ; } for ( int i = <LITERAL> ; i <= q ; ++ i ) { scanf ( <LITERAL> , & K [ i ] ) ; } int last_pos = <LITERAL> ; long long rest = sum [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= q ; ++ i ) { int pos = find ( K [ i ] , last_pos , rest ) ; ; if ( pos == n + <LITERAL> ) { printf ( <LITERAL> , n ) ; rest = sum [ <LITERAL> ] ; last_pos = <LITERAL> ; } else if ( sum [ pos ] == K [ i ] + sum [ last_pos + <LITERAL> ] - rest ) { last_pos = pos ; rest = sum [ pos + <LITERAL> ] - sum [ pos ] ; if ( n - pos == <LITERAL> ) { printf ( <LITERAL> , n ) ; last_pos = <LITERAL> ; rest = sum [ <LITERAL> ] ; } else printf ( <LITERAL> , n - pos ) ; } else { rest = sum [ pos ] - sum [ last_pos + <LITERAL> ] + rest - K [ i ] ; ; last_pos = pos - <LITERAL> ; printf ( <LITERAL> , n - pos + <LITERAL> ) ; } } return <LITERAL> ; } 
int main ( ) { int n , m ; scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) b [ i ] = b [ i - <LITERAL> ] + a [ i ] ; ; long long sum = <LITERAL> ; for ( int i = <LITERAL> ; i <= m ; i ++ ) { long long x ; scanf ( <LITERAL> , & x ) ; sum += x ; ; long long l = <LITERAL> , r = n , ans = <LITERAL> ; while ( l <= r ) { long long mid = ( l + r ) / <LITERAL> ; if ( b [ mid ] <= sum ) l = mid + <LITERAL> , ans = mid ; else r = mid - <LITERAL> ; ; } if ( ans == n ) sum = <LITERAL> , ans = <LITERAL> ; printf ( <LITERAL> , n - ans ) ; } } 
bool operator < ( point a , point b ) { return a . x == b . x ? a . y < b . y : a . x < b . x ; } 
int main ( ) { int n ; long long a , b , x , vx , vy , sum = <LITERAL> ; map < long long , int > slcnt ; map < point , int > svcnt ; cin >> n >> a >> b ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> x >> vx >> vy ; vy -= a * vx ; sum += ( slcnt [ vy ] ++ ) ; sum -= ( svcnt [ { vx , vy } ] ++ ) ; } cout << sum * <LITERAL> << endl ; return <LITERAL> ; } 
int main ( ) { int n , a , b ; LL x , y , y1 , ans = <LITERAL> ; scanf ( <LITERAL> , & n , & a , & b ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; y1 = y , y -= a * x ; ans += mp [ y ] - mp1 [ make_pair ( x , y1 ) ] ; mp [ y ] ++ , mp1 [ make_pair ( x , y1 ) ] ++ ; } printf ( <LITERAL> , ans * <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & a , & b ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x , vx , vy ; scanf ( <LITERAL> , & x , & vx , & vy ) ; ll now = <LITERAL> * a * vx - vy ; ans += ( mp [ now ] - m [ make_pair ( vx , vy ) ] ) ; mp [ now ] ++ ; m [ make_pair ( vx , vy ) ] ++ ; } printf ( <LITERAL> , ans << <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> ) n -- ; else n /= <LITERAL> ; } printf ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> == <LITERAL> ) { n /= <LITERAL> ; } else { n -- ; } } printf ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( ) { int k ; int n ; cin >> n >> k ; for ( int h = <LITERAL> ; h < k ; h ++ ) { int m = n % <LITERAL> ; if ( m == <LITERAL> ) n = n / <LITERAL> ; else n -= <LITERAL> ; } cout << n ; } 
int main ( ) { cin >> n >> num ; for ( int i = <LITERAL> ; i < num ; i ++ ) { if ( n % <LITERAL> == <LITERAL> ) { n /= <LITERAL> ; } else { n -= <LITERAL> ; } } cout << n ; return <LITERAL> ; } 
int main ( ) { cin >> n >> k ; for ( int i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> == <LITERAL> ) { n /= <LITERAL> ; } else { n -- ; } } cout << n ; } 
int main ( ) { long long n ; int k ; cin >> n >> k ; int count = <LITERAL> ; while ( count < k ) { if ( n % <LITERAL> == <LITERAL> ) { n = n / <LITERAL> ; } else { n = n - <LITERAL> ; } count ++ ; } cout << n ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= k ; i ++ ) { if ( n % <LITERAL> == <LITERAL> ) n = n / <LITERAL> ; else n = n - <LITERAL> ; } printf ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( ) { int n , k ; cin >> n >> k ; for ( int i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> != <LITERAL> ) { n = n - <LITERAL> ; } else { n = n / <LITERAL> ; } } cout << n << endl ; } 
int main ( ) { long int n ; int k ; cin >> n >> k ; while ( k -- ) { long int m = n % <LITERAL> , a ; if ( m == <LITERAL> ) { a = n / <LITERAL> ; n = a ; } else { a = n - <LITERAL> ; n = a ; } } cout << n ; } 
int main ( ) { cin >> x >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( x % <LITERAL> == <LITERAL> ) x = x / <LITERAL> ; else x -- ; } cout << x << endl ; return <LITERAL> ; } 
int main ( ) { cin >> n >> k ; for ( int i = <LITERAL> ; i <= k ; ++ i ) if ( n % <LITERAL> == <LITERAL> ) n /= <LITERAL> ; else -- n ; cout << n << endl ; } 
int main ( ) { int n , k ; cin >> n >> k ; for ( int i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> == <LITERAL> ) n /= <LITERAL> ; else n -- ; } cout << n ; } 
int main ( ) { int n , k , i ; cin >> n >> k ; for ( i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> == <LITERAL> ) n = n / <LITERAL> ; else n -= <LITERAL> ; } cout << n << endl ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= k ; i ++ ) { if ( n % <LITERAL> ) n -- ; else n /= <LITERAL> ; } printf ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( ) { int a , b ; cin >> a >> b ; for ( int i = <LITERAL> ; i < b ; i ++ ) { if ( a % <LITERAL> != <LITERAL> ) a -- ; else a /= <LITERAL> ; } cout << a ; } 
int main ( ) { char n [ <LITERAL> ] ; int k , i ; scanf ( <LITERAL> , n , & k ) ; getchar ( ) ; int len ; len = strlen ( n ) ; while ( k > <LITERAL> ) { if ( n [ len - <LITERAL> ] > <LITERAL> ) { n [ len - <LITERAL> ] -= <LITERAL> ; } else { len -- ; } k -- ; } for ( i = <LITERAL> ; i < len ; i ++ ) { putchar ( n [ i ] ) ; } return <LITERAL> ; } 
int main ( void ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> != <LITERAL> ) n -- ; else n /= <LITERAL> ; } printf ( <LITERAL> , n ) ; } 
int main ( ) { long long n ; int k ; scanf ( <LITERAL> , & n , & k ) ; while ( k -- ) { if ( n % <LITERAL> == <LITERAL> ) n /= <LITERAL> ; else n -= <LITERAL> ; } printf ( <LITERAL> , n ) ; } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= m ; i ++ ) { int x = n % <LITERAL> ; if ( x ) n -- ; else n /= <LITERAL> ; } printf ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; while ( k -- ) { if ( n % <LITERAL> != <LITERAL> ) n -- ; else n /= <LITERAL> ; } printf ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( ) { int n ; int k ; cin >> n >> k ; for ( int i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> == <LITERAL> ) { n /= <LITERAL> ; } else { n -- ; } } cout << n ; return <LITERAL> ; } 
int main ( ) { int n , k ; cin >> n >> k ; for ( int i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> == <LITERAL> ) n /= <LITERAL> ; else n -- ; } cout << n ; return <LITERAL> ; } 
int main ( ) { int n , k , i ; scanf ( <LITERAL> , & n , & k ) ; for ( i = <LITERAL> ; i < k ; i ++ ) { if ( n % <LITERAL> == <LITERAL> ) { n = n / <LITERAL> ; } else { n = n - <LITERAL> ; } } printf ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= k ; i ++ ) { if ( n % <LITERAL> ) n -- ; else n /= <LITERAL> ; } printf ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( ) { long long n , k ; cin >> n >> k ; while ( k -- ) { if ( n % <LITERAL> != <LITERAL> ) { n -= <LITERAL> ; } else { n /= <LITERAL> ; } } cout << n ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; while ( k -- ) { if ( n % <LITERAL> == <LITERAL> ) { n /= <LITERAL> ; } else { -- n ; } } printf ( <LITERAL> , n ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & a ) ; arr [ i ] . num = a ; while ( a % <LITERAL> == <LITERAL> ) { ++ arr [ i ] . two ; a /= <LITERAL> ; } while ( a % <LITERAL> == <LITERAL> ) { ++ arr [ i ] . three ; a /= <LITERAL> ; } } std :: sort ( arr + <LITERAL> , arr + n + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { printf ( <LITERAL> , arr [ i ] . num ) ; } return <LITERAL> ; } 
int get ( ll x ) { int ans = <LITERAL> ; while ( x % <LITERAL> == <LITERAL> ) { ans ++ ; x = x / <LITERAL> ; } return ans ; } 
bool cmp ( ll a , ll b ) { ll x = get ( a ) ; ll y = get ( b ) ; if ( x == y ) return a < b ; else return x > y ; } 
int main ( ) { ll n , i ; cin >> n ; for ( i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; } sort ( a , a + n , cmp ) ; cout << a [ <LITERAL> ] ; for ( i = <LITERAL> ; i < n ; i ++ ) cout << <LITERAL> << a [ i ] ; } 
void dfs ( int x ) { if ( x == n ) { for ( int i = <LITERAL> ; i <= n ; i ++ ) printf ( <LITERAL> , ans [ i ] ) ; exit ( <LITERAL> ) ; } long long temp = ans [ x ] * <LITERAL> ; set < long long > :: iterator it ; it = s . find ( temp ) ; if ( it != s . end ( ) ) { s . erase ( it ) ; ans [ x + <LITERAL> ] = temp ; dfs ( x + <LITERAL> ) ; s . insert ( temp ) ; } if ( ans [ x ] % <LITERAL> != <LITERAL> ) return ; temp = ans [ x ] / <LITERAL> ; it = s . find ( temp ) ; if ( it != s . end ( ) ) { s . erase ( it ) ; ans [ x + <LITERAL> ] = temp ; dfs ( x + <LITERAL> ) ; s . insert ( temp ) ; } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; s . insert ( a [ i ] ) ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { ans [ <LITERAL> ] = a [ i ] ; s . erase ( ans [ <LITERAL> ] ) ; dfs ( <LITERAL> ) ; s . insert ( ans [ <LITERAL> ] ) ; } return <LITERAL> ; } 
void print ( ) { for ( int i = <LITERAL> ; i <= n ; ++ i ) cout << ans [ i ] << <LITERAL> ; exit ( <LITERAL> ) ; } 
void dfs ( long long x , int num ) { ans [ num ] = x ; if ( num == n ) print ( ) ; if ( mp . count ( x * <LITERAL> ) && ! vis [ mp [ x * <LITERAL> ] ] ) vis [ mp [ x * <LITERAL> ] ] = true , dfs ( x * <LITERAL> , num + <LITERAL> ) , vis [ mp [ x * <LITERAL> ] ] = false ; if ( x % <LITERAL> == <LITERAL> && mp . count ( x / <LITERAL> ) && ! vis [ mp [ x / <LITERAL> ] ] ) vis [ mp [ x / <LITERAL> ] ] = true , dfs ( x / <LITERAL> , num + <LITERAL> ) , vis [ mp [ x / <LITERAL> ] ] = false ; } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i <= n ; ++ i ) cin >> a [ i ] , mp [ a [ i ] ] = i ; for ( int i = <LITERAL> ; i <= n ; ++ i ) vis [ i ] = true , dfs ( a [ i ] , <LITERAL> ) , vis [ i ] = false ; } 
int main ( ) { int n ; LL x ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & x ) , a [ i ] . x = x ; while ( x % <LITERAL> == <LITERAL> ) x /= <LITERAL> , a [ i ] . num2 ++ ; while ( x % <LITERAL> == <LITERAL> ) x /= <LITERAL> , a [ i ] . num3 ++ ; } sort ( a , a + n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , a [ i ] . x ) ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; b [ i ] = a [ i ] ; m [ a [ i ] ] = n ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { int flag = <LITERAL> , cnt = <LITERAL> ; long long temp = a [ i ] ; b [ <LITERAL> ] = a [ i ] ; while ( flag ) { if ( temp % <LITERAL> == <LITERAL> ) { if ( m . count ( temp / <LITERAL> ) == <LITERAL> ) { if ( m . count ( temp * <LITERAL> ) == <LITERAL> ) flag = <LITERAL> ; else { temp *= <LITERAL> ; cnt ++ ; b [ cnt ] = temp ; } } else { temp /= <LITERAL> ; cnt ++ ; b [ cnt ] = temp ; } } else { if ( m . count ( temp * <LITERAL> ) == <LITERAL> ) { flag = <LITERAL> ; } else { temp *= <LITERAL> ; cnt ++ ; b [ cnt ] = temp ; } } if ( cnt == n ) break ; } if ( flag ) { for ( int i = <LITERAL> ; i <= n ; i ++ ) cout << b [ i ] << <LITERAL> ; return <LITERAL> ; } } } 
void dfs ( int cnt , int x ) { if ( endp ) return ; if ( cnt == n - <LITERAL> && ! endp ) { endp = true ; for ( int i = <LITERAL> ; i < n ; i ++ ) cout << ans [ i ] << <LITERAL> ; } vis [ x ] = true ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( ! vis [ i ] && ( ans [ cnt ] << <LITERAL> == a [ i ] || ans [ cnt ] == a [ i ] * <LITERAL> ) ) { ans [ cnt + <LITERAL> ] = a [ i ] ; dfs ( cnt + <LITERAL> , i ) ; } } vis [ x ] = false ; } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) cin >> a [ i ] ; for ( int i = <LITERAL> ; i < n ; i ++ ) { ans [ <LITERAL> ] = a [ i ] ; memset ( vis , <LITERAL> , sizeof ( vis ) ) ; dfs ( <LITERAL> , i ) ; } return <LITERAL> ; } 
bool cmp ( NODE x , NODE y ) { if ( x . id == y . id ) return x . val < y . val ; return x . id > y . id ; } 
long long idd ( long long x ) { long long sum = <LITERAL> ; while ( x % <LITERAL> == <LITERAL> ) sum ++ , x /= <LITERAL> ; return sum ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] . val ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) a [ i ] . id = idd ( a [ i ] . val ) ; sort ( a + <LITERAL> , a + n + <LITERAL> , cmp ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) printf ( <LITERAL> , a [ i ] . val ) ; return <LITERAL> ; } 
bool comp ( long long a , long long b ) { int a2 = <LITERAL> , a3 = <LITERAL> , b2 = <LITERAL> , b3 = <LITERAL> ; while ( a % <LITERAL> == <LITERAL> ) { a2 ++ ; a /= <LITERAL> ; } while ( b % <LITERAL> == <LITERAL> ) { b2 ++ ; b /= <LITERAL> ; } while ( a % <LITERAL> == <LITERAL> ) { a3 ++ ; a /= <LITERAL> ; } while ( b % <LITERAL> == <LITERAL> ) { b3 ++ ; b /= <LITERAL> ; } return a3 == b3 ? a2 < b2 : a3 > b3 ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & arr [ i ] ) ; } std :: sort ( arr , arr + n , comp ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { printf ( <LITERAL> , arr [ i ] ) ; } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = <LITERAL> ; j <= n ; j ++ ) if ( i != j ) { if ( a [ i ] == a [ j ] * <LITERAL> ) Next [ i ] = j , Pre [ j ] = i ; if ( a [ i ] * <LITERAL> == a [ j ] ) Next [ i ] = j , Pre [ j ] = i ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) if ( Pre [ i ] == <LITERAL> ) { int x = i ; for ( int j = <LITERAL> ; j <= n ; j ++ , x = Next [ x ] ) { printf ( <LITERAL> , a [ x ] ) ; } } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , w , cnt = <LITERAL> ; scanf ( <LITERAL> , & n ) ; while ( n -- ) { scanf ( <LITERAL> , str ) ; int l = strlen ( str ) ; w = <LITERAL> ; for ( int i = <LITERAL> ; i < l ; i ++ ) { w |= <LITERAL> << ( str [ i ] - <LITERAL> ) ; } if ( ! arr [ w ] ) { arr [ w ] = true ; cnt ++ ; } } printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , str + <LITERAL> ) ; int len = strlen ( str + <LITERAL> ) ; int temp = <LITERAL> ; for ( int j = <LITERAL> ; j <= len ; j ++ ) { int p = str [ j ] - <LITERAL> ; temp |= ( <LITERAL> << p ) ; } if ( ! mp [ temp ] ) ans ++ ; mp [ temp ] = true ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , s ) ; int sum = <LITERAL> , len = strlen ( s ) ; for ( int j = <LITERAL> ; j < len ; ++ j ) sum |= <LITERAL> << ( s [ j ] - <LITERAL> ) ; if ( ! mp . count ( sum ) ) ++ num ; mp [ sum ] ++ ; } cout << num ; } 
int main ( ) { int n , ans = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , s ) , memset ( num , <LITERAL> , sizeof ( num ) ) ; int w = <LITERAL> ; for ( int j = <LITERAL> ; s [ j ] ; j ++ ) num [ s [ j ] - <LITERAL> ] ++ ; for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) if ( num [ j ] ) w |= ( <LITERAL> << j ) ; if ( ! vis [ w ] ) vis [ w ] = <LITERAL> , ans ++ ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { memset ( cou , <LITERAL> , sizeof ( cou ) ) ; while ( isalpha ( ch = getchar ( ) ) ) cou [ ch - <LITERAL> ] ++ ; int k = <LITERAL> ; for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { if ( cou [ j ] ) { arr [ k ] = j + <LITERAL> ; k ++ ; } } arr [ k ] = <LITERAL> ; int flag = <LITERAL> ; for ( int i = <LITERAL> ; i < ans ; i ++ ) if ( ! strcmp ( strs [ i ] , arr ) ) flag = <LITERAL> ; if ( flag ) { strcpy ( strs [ ans ] , arr ) ; ans ++ ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; char str [ <LITERAL> ] ; bool s [ <LITERAL> ] = { <LITERAL> } ; long long id = <LITERAL> ; set < long long > set ; while ( n -- ) { scanf ( <LITERAL> , str ) ; ; for ( int i = <LITERAL> ; i < strlen ( str ) ; i ++ ) { s [ str [ i ] - <LITERAL> ] = true ; } for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( s [ i ] ) id += <LITERAL> << i ; } } set . insert ( id ) ; memset ( s , <LITERAL> , sizeof ( s ) ) ; id = <LITERAL> ; } cout << set . size ( ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; char st [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , st ) ; array < bool , <LITERAL> > a ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) a [ i ] = <LITERAL> ; int len = strlen ( st ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) a [ st [ i ] - <LITERAL> ] = <LITERAL> ; s . insert ( a ) ; } printf ( <LITERAL> , s . size ( ) ) ; return <LITERAL> ; } 
int change ( char x ) { return ( int ( x ) - <LITERAL> ) ; } 
int main ( ) { int n , i , j , total ; cin >> n ; string s [ <LITERAL> ] ; string ans [ <LITERAL> ] ; for ( i = <LITERAL> ; i < n ; i ++ ) cin >> s [ i ] ; bool zimu [ <LITERAL> ] ; total = <LITERAL> ; for ( i = <LITERAL> ; i < n ; i ++ ) { string temp ; bool flag = true ; memset ( zimu , <LITERAL> , sizeof ( zimu ) ) ; for ( j = <LITERAL> ; j < s [ i ] . size ( ) ; j ++ ) if ( zimu [ change ( s [ i ] [ j ] ) ] == <LITERAL> ) zimu [ change ( s [ i ] [ j ] ) ] = <LITERAL> ; for ( j = <LITERAL> ; j < <LITERAL> ; j ++ ) if ( zimu [ j ] == <LITERAL> ) temp += char ( j + <LITERAL> ) ; for ( j = <LITERAL> ; j < total ; j ++ ) if ( ans [ j ] == temp ) { flag = false ; break ; } if ( flag == true ) { ans [ total ] = temp ; total ++ ; } } cout << total << endl ; } 
bool search ( string key ) { for ( int i = <LITERAL> ; i <= cnt ; ++ i ) { if ( ans [ i ] == key ) { return true ; } } return false ; } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { cin >> s ; sort ( s . begin ( ) , s . end ( ) ) ; string tmp = <LITERAL> ; len = s . length ( ) ; for ( int i = <LITERAL> ; i < len - <LITERAL> ; ++ i ) { if ( s [ i ] != s [ i + <LITERAL> ] ) { tmp += s [ i ] ; } } tmp += s [ len - <LITERAL> ] ; if ( search ( tmp ) == false ) { ans [ ++ cnt ] = tmp ; } } printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
int my ( char x , char y ) { return x < y ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; getchar ; char biao [ <LITERAL> ] [ <LITERAL> ] ; int ans = <LITERAL> , bia [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { char a [ <LITERAL> ] ; scanf ( <LITERAL> , a ) ; getchar ( ) ; int m = strlen ( a ) ; sort ( a , a + m , my ) ; ; char b [ <LITERAL> ] ; int now = <LITERAL> ; for ( int j = <LITERAL> ; j < m ; j ++ ) { int u = <LITERAL> ; for ( int k = <LITERAL> ; k < now ; k ++ ) { if ( a [ j ] == b [ k ] ) { u = <LITERAL> ; break ; } } if ( u == <LITERAL> ) { b [ now ] = a [ j ] ; now ++ ; } } } int o = <LITERAL> ; for ( int k = <LITERAL> ; k <= ans ; k ++ ) { if ( bia [ k ] == now ) { int nu = <LITERAL> ; for ( int p = <LITERAL> ; p < now ; p ++ ) { if ( biao [ k ] [ p ] == b [ p ] ) nu ++ ; else break ; } if ( nu == now ) { o = <LITERAL> ; break ; } } } if ( o == <LITERAL> ) { ans ++ ; for ( int v = <LITERAL> ; v < now ; v ++ ) biao [ ans ] [ v ] = b [ v ] ; bia [ ans ] = now ; ; } } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> c ; sort ( c . begin ( ) , c . end ( ) ) ; c . erase ( unique ( c . begin ( ) , c . end ( ) ) , c . end ( ) ) ; s . insert ( c ) ; } printf ( <LITERAL> , s . size ( ) ) ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; } int cnt = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int word [ <LITERAL> ] = { <LITERAL> } ; int size = a [ i ] . size ( ) ; for ( int j = <LITERAL> ; j < size ; j ++ ) { word [ a [ i ] [ j ] - <LITERAL> ] ++ ; } string s = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( word [ i ] ) s += <LITERAL> + i ; } if ( m . count ( s ) == <LITERAL> ) { cnt ++ ; m [ s ] = <LITERAL> ; } } cout << cnt ; } 
int main ( ) { int n ; cin >> n ; int count = <LITERAL> ; int t = <LITERAL> ; string line ; while ( t < n ) { string H ; char F [ <LITERAL> ] ; memset ( F , <LITERAL> , sizeof ( F ) ) ; int m = <LITERAL> ; cin >> line ; int check [ <LITERAL> ] = { <LITERAL> } ; int len = line . length ( ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( check [ line [ i ] - <LITERAL> ] == <LITERAL> ) { check [ line [ i ] - <LITERAL> ] ++ ; F [ m ] = line [ i ] ; m ++ ; } } H = F ; sort ( H . begin ( ) , H . end ( ) ) ; if ( t == <LITERAL> ) { KK . push_back ( H ) ; count ++ ; } else { int check = <LITERAL> ; int g = KK . size ( ) ; for ( int i = <LITERAL> ; i < g ; i ++ ) { if ( H == KK [ i ] ) { check = <LITERAL> ; break ; } } if ( check == <LITERAL> ) { count ++ ; KK . push_back ( H ) ; } } t ++ ; } cout << count ; } 
int main ( ) { cin >> n >> num ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; } sort ( a , a + n ) ; if ( num == <LITERAL> ) { if ( a [ <LITERAL> ] - <LITERAL> <= <LITERAL> ) { cout << <LITERAL> ; } else { cout << a [ <LITERAL> ] - <LITERAL> ; } return <LITERAL> ; } int cont = <LITERAL> ; for ( int i = num - <LITERAL> ; i < n ; i ++ ) { if ( a [ i ] <= a [ num - <LITERAL> ] ) { cont ++ ; } } if ( cont == <LITERAL> ) { cout << a [ num - <LITERAL> ] ; } else { cout << - <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , a + i ) ; sort ( a , a + n ) ; if ( ! k ) return printf ( <LITERAL> , a [ <LITERAL> ] == <LITERAL> ? - <LITERAL> : <LITERAL> ) , <LITERAL> ; if ( a [ k ] == a [ k - <LITERAL> ] ) return puts ( <LITERAL> ) , <LITERAL> ; printf ( <LITERAL> , a [ k - <LITERAL> ] ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; sort ( a + <LITERAL> , a + n + <LITERAL> ) ; if ( k ) { if ( a [ k ] == a [ k + <LITERAL> ] ) printf ( <LITERAL> ) ; else printf ( <LITERAL> , a [ k ] ) ; } else { if ( a [ <LITERAL> ] == <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int a , b ; cin >> a >> b ; int aa [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < a ; i ++ ) { cin >> aa [ i ] ; } sort ( aa , aa + a ) ; if ( a <= b ) { cout << ( aa [ a - <LITERAL> ] ) ; } else { if ( b == <LITERAL> ) { if ( aa [ <LITERAL> ] > <LITERAL> ) cout << <LITERAL> ; else cout << <LITERAL> ; } else { if ( aa [ b - <LITERAL> ] == aa [ b ] ) { cout << <LITERAL> ; } else { cout << ( aa [ b - <LITERAL> ] ) ; } } } } 
int main ( ) { scanf ( <LITERAL> , & n , & m ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; sort ( a + <LITERAL> , a + <LITERAL> + n ) ; if ( m == <LITERAL> && a [ <LITERAL> ] == <LITERAL> ) printf ( <LITERAL> ) ; else if ( m == <LITERAL> ) printf ( <LITERAL> , a [ <LITERAL> ] - <LITERAL> ) ; else if ( a [ m ] == a [ m + <LITERAL> ] && m != n ) printf ( <LITERAL> ) ; else printf ( <LITERAL> , a [ m ] ) ; return <LITERAL> ; } 
int main ( ) { int n , k , num = <LITERAL> ; int a [ <LITERAL> ] ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; sort ( a + <LITERAL> , a + <LITERAL> + n ) ; if ( k == <LITERAL> ) { if ( a [ <LITERAL> ] > <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; return <LITERAL> ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { num ++ ; if ( num == k ) { if ( a [ i + <LITERAL> ] != a [ i ] ) printf ( <LITERAL> , a [ i ] ) ; else printf ( <LITERAL> ) ; break ; } } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & arr [ i ] ) ; } std :: sort ( arr + <LITERAL> , arr + n + <LITERAL> ) ; if ( k == <LITERAL> ) { printf ( <LITERAL> , ( arr [ <LITERAL> ] == <LITERAL> ) ? - <LITERAL> : <LITERAL> ) ; } else { printf ( <LITERAL> , ( arr [ k ] == arr [ k + <LITERAL> ] ) ? - <LITERAL> : arr [ k ] ) ; } return <LITERAL> ; } 
int main ( ) { int n , k ; int num [ <LITERAL> ] ; cin >> n >> k ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> num [ i ] ; } sort ( num , num + n ) ; int ans = <LITERAL> ; if ( k == <LITERAL> ) { ans = num [ <LITERAL> ] - <LITERAL> ; if ( ans < <LITERAL> ) { cout << <LITERAL> << endl ; } else { cout << ans ; } } else if ( num [ k - <LITERAL> ] == num [ k ] ) { cout << <LITERAL> << endl ; } else { cout << num [ k - <LITERAL> ] << endl ; } } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; sort ( a + <LITERAL> , a + n + <LITERAL> ) ; if ( k == <LITERAL> && a [ <LITERAL> ] == <LITERAL> ) { cout << <LITERAL> << endl ; return <LITERAL> ; } else if ( k == <LITERAL> ) { cout << <LITERAL> << endl ; return <LITERAL> ; } if ( a [ k ] == a [ k + <LITERAL> ] ) cout << <LITERAL> << endl ; else { if ( a [ k ] <= <LITERAL> ) cout << a [ k ] << endl ; else cout << <LITERAL> << endl ; } return <LITERAL> ; } 
int main ( ) { int n , k ; cin >> n >> k ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; } sort ( a , a + n ) ; if ( k == n ) { cout << a [ n - <LITERAL> ] ; return <LITERAL> ; } if ( k == <LITERAL> ) { if ( a [ <LITERAL> ] == <LITERAL> ) cout << - <LITERAL> ; else cout << a [ <LITERAL> ] - <LITERAL> ; return <LITERAL> ; } if ( a [ k - <LITERAL> ] == a [ k ] ) { cout << - <LITERAL> ; return <LITERAL> ; } else cout << a [ k - <LITERAL> ] ; } 
int main ( void ) { scanf ( <LITERAL> , & n , & k ) ; arr [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & arr [ i ] ) ; sort ( arr + <LITERAL> , arr + n + <LITERAL> ) ; if ( arr [ k + <LITERAL> ] != arr [ k ] ) printf ( <LITERAL> , arr [ k ] ) ; else printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , k , ans = <LITERAL> ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; } sort ( a + <LITERAL> , a + n ) ; if ( k == <LITERAL> ) { ans = a [ <LITERAL> ] - <LITERAL> ; if ( ans < <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> , ans ) ; } else if ( a [ k - <LITERAL> ] == a [ k ] ) printf ( <LITERAL> ) ; else printf ( <LITERAL> , a [ k - <LITERAL> ] ) ; } 
int main ( ) { int n , k ; cin >> n >> k ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> arr [ i ] ; } sort ( arr , arr + n ) ; if ( k == <LITERAL> && arr [ <LITERAL> ] > <LITERAL> ) { cout << arr [ <LITERAL> ] - <LITERAL> << endl ; } else if ( k != <LITERAL> && ( n == k || arr [ k - <LITERAL> ] != arr [ k ] ) ) { cout << arr [ k - <LITERAL> ] << endl ; } else { cout << - <LITERAL> << endl ; } return <LITERAL> ; } 
int main ( ) { int n , k , a [ <LITERAL> ] ; cin >> n >> k ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; } sort ( a , a + n ) ; if ( k == <LITERAL> ) { if ( a [ <LITERAL> ] - <LITERAL> >= <LITERAL> ) cout << a [ <LITERAL> ] - <LITERAL> ; else cout << - <LITERAL> ; return <LITERAL> ; } if ( a [ k - <LITERAL> ] == a [ k ] ) { cout << - <LITERAL> ; return <LITERAL> ; } else cout << a [ k - <LITERAL> ] ; return <LITERAL> ; } 
int main ( ) { cin >> n >> k ; for ( int i = <LITERAL> ; i <= n ; ++ i ) cin >> a [ i ] ; sort ( a + <LITERAL> , a + n + <LITERAL> ) ; int ans = a [ k ] ; if ( k == <LITERAL> ) ans = a [ <LITERAL> ] - <LITERAL> ; if ( ans == a [ k + <LITERAL> ] ) ans = - <LITERAL> ; if ( ! ans ) ans = - <LITERAL> ; cout << ans ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; sort ( a + <LITERAL> , a + n + <LITERAL> ) ; a [ <LITERAL> ] = <LITERAL> , a [ n + <LITERAL> ] = <LITERAL> + <LITERAL> ; if ( a [ k ] == a [ k + <LITERAL> ] ) printf ( <LITERAL> ) ; else printf ( <LITERAL> , a [ k ] ) ; return <LITERAL> ; } 
void qsort ( int l , int r ) { int mid ; mid = a [ ( l + r ) / <LITERAL> ] ; int m , n , p ; m = l ; n = r ; do { while ( a [ m ] < mid ) m ++ ; while ( a [ n ] > mid ) n -- ; if ( m <= n ) { p = a [ m ] ; a [ m ] = a [ n ] ; a [ n ] = p ; m ++ ; n -- ; } } while ( m <= n ) ; if ( l < n ) qsort ( l , n ) ; if ( m < r ) qsort ( m , r ) ; } 
int main ( ) { int n , k , i ; cin >> n >> k ; for ( i = <LITERAL> ; i < n ; i ++ ) cin >> a [ i ] ; sort ( a , a + n ) ; if ( k == <LITERAL> ) { if ( a [ <LITERAL> ] == <LITERAL> ) cout << - <LITERAL> << endl ; else cout << <LITERAL> << endl ; } else { if ( a [ k - <LITERAL> ] == a [ k ] ) cout << - <LITERAL> << endl ; else cout << a [ k - <LITERAL> ] << endl ; } } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; rep ( i , <LITERAL> , n ) { scanf ( <LITERAL> , & x , & y ) ; ans = max ( ans , x + y ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; ans = <LITERAL> ; while ( n -- ) { scanf ( <LITERAL> , & x , & y ) ; ans = std :: max ( ans , x + y ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { cin >> x >> y ; ans = max ( ans , x + y ) ; } cout << ans ; } 
int main ( ) { int n ; int ans = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x , y ; scanf ( <LITERAL> , & x , & y ) ; ans = max ( ans , x + y ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { long long a , b ; long long k = <LITERAL> ; int n ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> a >> b ; if ( a + b > k ) { k = a + b ; } } cout << k << endl ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; long long maxx = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { long long a , b ; scanf ( <LITERAL> , & a , & b ) ; maxx = max ( maxx , a + b ) ; } printf ( <LITERAL> , maxx ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x = read ( ) , y = read ( ) ; ans = max ( ans , x + y ) ; } printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { int n ; cin >> n ; long long x , y ; int t = <LITERAL> ; long long minlen = <LITERAL> ; while ( t < n ) { cin >> x >> y ; if ( x + y > minlen ) { minlen = x + y ; } t ++ ; } cout << minlen ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; int i , x [ n + <LITERAL> ] , y [ n + <LITERAL> ] , xmax = <LITERAL> , x0 ; for ( i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x [ i ] , & y [ i ] ) ; x0 = x [ i ] + y [ i ] ; if ( x0 > xmax ) xmax = x0 ; } printf ( <LITERAL> , xmax ) ; return <LITERAL> ; } 
int main ( ) { cin >> n ; ll max = - <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> p [ i ] . first >> p [ i ] . second ; if ( p [ i ] . first + p [ i ] . second >= max ) { max = p [ i ] . first + p [ i ] . second ; } } cout << max ; return <LITERAL> ; } 
int main ( ) { ll n , i , max = <LITERAL> ; cin >> n ; for ( i = <LITERAL> ; i < n ; i ++ ) { ll x , y , len ; cin >> x >> y ; len = x + y ; if ( max == <LITERAL> || max < len ) max = len ; } cout << max << endl ; } 
int main ( void ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; maxn = max ( maxn , x + y ) ; } printf ( <LITERAL> , maxn ) ; return <LITERAL> ; } 
int comp ( const void * x , const void * y ) { return ( * ( int * ) y - * ( int * ) x ) ; } 
int main ( ) { int n ; int dian [ <LITERAL> ] , x , y ; scanf ( <LITERAL> , & n ) ; int i ; for ( i = <LITERAL> ; i <= n - <LITERAL> ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; dian [ i ] = x + y ; } qsort ( dian , n , <LITERAL> , comp ) ; printf ( <LITERAL> , dian [ <LITERAL> ] ) ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; int max = <LITERAL> ; while ( n -- ) { int a , b ; cin >> a >> b ; if ( a + b > max ) max = a + b ; } cout << max ; } 
int main ( ) { int n ; long long ans = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] . x , & a [ i ] . y ) ; if ( a [ i ] . x + a [ i ] . y > ans ) ans = a [ i ] . x + a [ i ] . y ; } printf ( <LITERAL> , ans ) ; } 
int main ( ) { int max = <LITERAL> ; int tempX ; int tempY ; int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & tempX , & tempY ) ; if ( tempX + tempY > max ) { max = tempX + tempY ; } } printf ( <LITERAL> , max ) ; return <LITERAL> ; } 
LL max ( LL a , LL b ) { return a > b ? a : b ; } 
int main ( ) { scanf ( <LITERAL> , & N ) ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; ans = max ( ans , x + y ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } 
int main ( ) { long long n , x , y , i = <LITERAL> , ans = <LITERAL> , temp2 ; long long arr [ <LITERAL> ] ; cin >> n ; temp2 = n ; while ( n -- ) { cin >> x >> y ; arr [ i ] = x + y ; i ++ ; } for ( int j = <LITERAL> ; j < temp2 ; j ++ ) { ans = max ( ans , arr [ j ] ) ; } cout << ans ; } 
int main ( ) { int n , a , b , mx = <LITERAL> ; scanf ( <LITERAL> , & n ) ; while ( n -- ) { scanf ( <LITERAL> , & a , & b ) ; if ( a + b > mx ) { mx = a + b ; } } printf ( <LITERAL> , mx ) ; return <LITERAL> ; } 
int comp ( const void * , const void * ) 
int main ( ) { long n ; long long su [ MAX ] , x , y ; scanf ( <LITERAL> , & n ) ; for ( long i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; su [ i ] = x + y ; } qsort ( su , n , sizeof ( long long ) , comp ) ; printf ( <LITERAL> , su [ <LITERAL> ] ) ; ; return <LITERAL> ; } 
int comp ( const void * x , const void * y ) { return ( * ( int * ) y - * ( int * ) x ) ; } 
int main ( ) { int n ; long int x , y , sum = <LITERAL> ; cin >> n ; while ( n -- ) { cin >> x >> y ; if ( ( x + y ) > sum ) { sum = x + y ; } } cout << sum << endl ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; ll maxn = - <LITERAL> ; int x , y ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x , & y ) ; ll tmp = x + y ; if ( tmp > maxn ) maxn = tmp ; } printf ( <LITERAL> , maxn ) ; return <LITERAL> ; } 
int main ( ) { int a , m = <LITERAL> ; cin >> a ; for ( int i = <LITERAL> ; i < a ; i ++ ) { int x , y ; cin >> x >> y ; if ( x + y > m ) m = x + y ; } cout << m ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { int a , b ; scanf ( <LITERAL> , & a , & b ) ; if ( ans < a + b ) ans = a + b ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , i , max = <LITERAL> ; int arr [ <LITERAL> ] [ <LITERAL> ] ; int sum [ <LITERAL> ] ; scanf ( <LITERAL> , & n ) ; for ( i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & arr [ i ] [ <LITERAL> ] , & arr [ i ] [ <LITERAL> ] ) ; sum [ i ] = arr [ i ] [ <LITERAL> ] + arr [ i ] [ <LITERAL> ] ; } for ( i = <LITERAL> ; i < n ; i ++ ) { if ( sum [ i ] > max ) { max = sum [ i ] ; } } printf ( <LITERAL> , max ) ; return <LITERAL> ; } 
int main ( ) { int n , ans = <LITERAL> , x , y ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & x , & y ) , ans = max ( ans , x + y ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; int a [ <LITERAL> ] [ <LITERAL> ] ; scanf ( <LITERAL> , & n ) ; long long ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ <LITERAL> ] [ i ] , & a [ <LITERAL> ] [ i ] ) ; if ( a [ <LITERAL> ] [ i ] + a [ <LITERAL> ] [ i ] > ans ) ans = a [ <LITERAL> ] [ i ] + a [ <LITERAL> ] [ i ] ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & N ) ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; stat [ a [ i ] ] ++ ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( stat [ i ] == <LITERAL> ) count1 ++ ; if ( stat [ i ] > <LITERAL> ) pre_nice = i ; } if ( pre_nice == - <LITERAL> && count1 % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> ) ; return <LITERAL> ; } printf ( <LITERAL> ) ; if ( count1 % <LITERAL> ) on = true ; ; int cnt1 = <LITERAL> ; for ( int i = <LITERAL> ; i <= N ; i ++ ) { if ( stat [ a [ i ] ] == <LITERAL> ) { if ( cnt1 < count1 / <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; cnt1 ++ ; } else { if ( a [ i ] == pre_nice ) { if ( on ) { printf ( <LITERAL> ) ; on = false ; } else printf ( <LITERAL> ) ; } else printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
void solve ( ) { int tot = <LITERAL> ; bool flag = false ; if ( one % <LITERAL> == <LITERAL> ) flag = true ; for ( int i = <LITERAL> ; i <= MAXS ; i ++ ) { for ( int j = <LITERAL> ; j < num [ i ] ; j ++ ) { if ( num [ i ] > <LITERAL> && flag == false ) { s [ id [ i ] [ j ] ] = <LITERAL> ; flag = true ; continue ; } if ( num [ i ] > <LITERAL> ) { s [ id [ i ] [ j ] ] = <LITERAL> ; continue ; } if ( tot < one / <LITERAL> ) { s [ id [ i ] [ j ] ] = <LITERAL> ; tot ++ ; } else { s [ id [ i ] [ j ] ] = <LITERAL> ; } } } s [ n + <LITERAL> ] = <LITERAL> ; return ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & A [ i ] ) ; id [ A [ i ] ] [ num [ A [ i ] ] ] = i ; num [ A [ i ] ] ++ ; } for ( int i = <LITERAL> ; i <= MAXS ; i ++ ) { switch ( num [ i ] ) { case <LITERAL> : { one ++ ; break ; } case <LITERAL> : { two ++ ; break ; } case <LITERAL> : break ; default : other ++ ; } } if ( one % <LITERAL> == <LITERAL> && other == <LITERAL> ) { printf ( <LITERAL> ) ; } else { solve ( ) ; printf ( <LITERAL> ) ; printf ( <LITERAL> , s + <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; int t = <LITERAL> ; while ( t < n ) { cin >> num [ t ] ; many [ num [ t ] ] ++ ; t ++ ; } int one = <LITERAL> , two = <LITERAL> , three = <LITERAL> ; int d = * max_element ( num , num + t ) ; for ( int i = <LITERAL> ; i <= d ; i ++ ) { if ( many [ i ] == <LITERAL> ) { one = one + <LITERAL> ; } if ( many [ i ] == <LITERAL> ) { two = two + <LITERAL> ; } if ( many [ i ] >= <LITERAL> ) { three = three + <LITERAL> ; } } if ( one % <LITERAL> != <LITERAL> && three == <LITERAL> ) { cout << <LITERAL> ; } else if ( one % <LITERAL> == <LITERAL> ) { int count = <LITERAL> , s = <LITERAL> ; for ( int k = <LITERAL> ; k < t ; k ++ ) { if ( count < ( one / <LITERAL> ) && many [ num [ k ] ] == <LITERAL> ) { ans [ s ] = <LITERAL> ; s ++ ; count ++ ; } else if ( many [ num [ k ] ] != <LITERAL> ) { ans [ s ] = <LITERAL> ; s ++ ; } else if ( count >= ( one / <LITERAL> ) && many [ num [ k ] ] == <LITERAL> ) { ans [ s ] = <LITERAL> ; s ++ ; } } cout << <LITERAL> << endl ; string line = ans ; cout << line ; } else if ( one % <LITERAL> != <LITERAL> && three != <LITERAL> ) { int count = <LITERAL> , s = <LITERAL> ; int check = <LITERAL> ; for ( int k = <LITERAL> ; k < t ; k ++ ) { if ( count < ( one / <LITERAL> ) && many [ num [ k ] ] == <LITERAL> ) { ans [ s ] = <LITERAL> ; s ++ ; count ++ ; } else if ( many [ num [ k ] ] == <LITERAL> || ( many [ num [ k ] ] >= <LITERAL> && check == <LITERAL> ) ) { ans [ s ] = <LITERAL> ; s ++ ; } else if ( many [ num [ k ] ] >= <LITERAL> && check == <LITERAL> ) { ans [ s ] = <LITERAL> ; s ++ ; check = <LITERAL> ; } else if ( count >= ( one / <LITERAL> ) && many [ num [ k ] ] == <LITERAL> ) { ans [ s ] = <LITERAL> ; s ++ ; } } cout << <LITERAL> << endl ; string line = ans ; cout << line ; } } 
inline void rev ( char & c ) { if ( c == <LITERAL> ) { c = <LITERAL> ; } else { c = <LITERAL> ; } } 
int main ( ) { int n , lst = - <LITERAL> ; char state = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & ms [ i ] ) ; cnt [ ms [ i ] ] ++ ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( cnt [ ms [ i ] ] == <LITERAL> ) { op [ i ] = state ; rev ( state ) ; } else if ( cnt [ ms [ i ] ] == <LITERAL> ) { op [ i ] = <LITERAL> ; } else { op [ i ] = <LITERAL> ; cnt [ ms [ i ] ] == <LITERAL> ; lst = i ; } } if ( state == <LITERAL> ) { printf ( <LITERAL> , op ) ; } else if ( lst != - <LITERAL> ) { rev ( op [ lst ] ) ; printf ( <LITERAL> , op ) ; } else { printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int n , b = <LITERAL> , c = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , a + i ) , num [ a [ i ] ] ++ ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) if ( num [ i ] == <LITERAL> ) b ++ ; else if ( num [ i ] > <LITERAL> ) c ++ ; if ( ( b & <LITERAL> ) && c == <LITERAL> ) return puts ( <LITERAL> ) , <LITERAL> ; puts ( <LITERAL> ) ; int fl = ( b & <LITERAL> ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( fl && num [ a [ i ] ] > <LITERAL> ) putchar ( <LITERAL> ) , fl = <LITERAL> ; else if ( num [ a [ i ] ] == <LITERAL> ) { if ( b & <LITERAL> ) putchar ( <LITERAL> ) ; else putchar ( <LITERAL> ) ; b -- ; } else putchar ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int n , pos = - <LITERAL> , flag2 = <LITERAL> , count = <LITERAL> ; scanf ( <LITERAL> , & n ) ; int i ; for ( i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & s [ i ] ) ; aux [ s [ i ] ] ++ ; } for ( i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( aux [ i ] == <LITERAL> ) count ++ ; if ( aux [ i ] > <LITERAL> ) pos = i ; } if ( pos == - <LITERAL> && count % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> ) ; return <LITERAL> ; } printf ( <LITERAL> ) ; if ( count % <LITERAL> ) flag2 = <LITERAL> ; int auxcout = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( aux [ s [ i ] ] == <LITERAL> ) { if ( auxcout < count / <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; auxcout ++ ; } else { if ( s [ i ] == pos ) { if ( flag2 ) { printf ( <LITERAL> ) ; flag2 = <LITERAL> ; } else printf ( <LITERAL> ) ; } else printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
int main ( ) { int n , i , one ; cin >> n ; for ( i = <LITERAL> ; i < n ; i ++ ) { cin >> s [ i ] ; num [ s [ i ] ] ++ ; } one = <LITERAL> ; for ( i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( num [ i ] == <LITERAL> ) one ++ ; } if ( one % <LITERAL> == <LITERAL> ) { cout << <LITERAL> << endl ; int k = <LITERAL> ; for ( i = <LITERAL> ; i < n ; i ++ ) { if ( k >= one / <LITERAL> ) break ; if ( num [ s [ i ] ] == <LITERAL> ) { cout << <LITERAL> ; k ++ ; } else cout << <LITERAL> ; } while ( i < n ) { cout << <LITERAL> ; i ++ ; } cout << endl ; } else { bool flag = false ; char ans [ <LITERAL> ] = { <LITERAL> } ; int key , k = <LITERAL> ; for ( i = <LITERAL> ; i < n ; i ++ ) { if ( num [ s [ i ] ] >= <LITERAL> ) { flag = true ; key = s [ i ] ; break ; } } if ( flag == false ) cout << <LITERAL> << endl ; else { cout << <LITERAL> << endl ; for ( i = <LITERAL> ; i < n ; i ++ ) { if ( s [ i ] == key ) { ans [ i ] = <LITERAL> ; break ; } } for ( i = <LITERAL> ; i < n ; i ++ ) { if ( k >= ( one - <LITERAL> ) / <LITERAL> ) break ; if ( num [ s [ i ] ] == <LITERAL> ) { ans [ i ] = <LITERAL> ; k ++ ; } else if ( ans [ i ] != <LITERAL> ) ans [ i ] = <LITERAL> ; } while ( i < n ) { if ( ans [ i ] != <LITERAL> ) ans [ i ] = <LITERAL> ; i ++ ; } for ( i = <LITERAL> ; i < n ; i ++ ) cout << ans [ i ] ; cout << endl ; } } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & A [ i ] ) ; ++ cnt [ A [ i ] ] ; } int now = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( cnt [ A [ i ] ] == <LITERAL> ) { bel [ i ] = now ; now ^= <LITERAL> ; } } if ( now == <LITERAL> ) { for ( int i = <LITERAL> ; i <= n ; ++ i ) if ( cnt [ A [ i ] ] > <LITERAL> && ! bel [ i ] ) { bel [ i ] = now ; now ^= <LITERAL> ; break ; } } if ( now == <LITERAL> ) { printf ( <LITERAL> ) ; } else { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) printf ( <LITERAL> , bel [ i ] + <LITERAL> ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { a [ i ] = read ( ) ; cnt [ a [ i ] ] ++ ; } int num1 = <LITERAL> , num3 = <LITERAL> , ok = <LITERAL> , t = <LITERAL> , flag = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( cnt [ i ] == <LITERAL> ) num1 ++ ; if ( cnt [ i ] > <LITERAL> ) num3 ++ ; } if ( num1 % <LITERAL> == <LITERAL> && num3 == <LITERAL> ) ok = <LITERAL> ; if ( ! ok ) { puts ( <LITERAL> ) ; return ; } puts ( <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( cnt [ a [ i ] ] == <LITERAL> ) { if ( t < num1 / <LITERAL> ) printf ( <LITERAL> ) , t ++ ; else printf ( <LITERAL> ) ; } else if ( cnt [ a [ i ] ] > <LITERAL> ) { if ( ! flag && num1 % <LITERAL> == <LITERAL> ) printf ( <LITERAL> ) , flag = <LITERAL> ; else printf ( <LITERAL> ) ; } else printf ( <LITERAL> ) ; } } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { int shunxu [ <LITERAL> ] = { <LITERAL> } , cnt [ <LITERAL> ] = { <LITERAL> } ; int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int t ; cin >> t ; shunxu [ i ] = t ; cnt [ t ] ++ ; } int count1 = <LITERAL> , countother = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( cnt [ i ] == <LITERAL> ) count1 ++ ; else if ( cnt [ i ] && cnt [ i ] != <LITERAL> ) countother ++ ; } if ( count1 % <LITERAL> && countother == <LITERAL> ) { cout << <LITERAL> ; } else { cout << <LITERAL> ; if ( count1 % <LITERAL> == <LITERAL> ) { int isa = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( cnt [ shunxu [ i ] ] == <LITERAL> ) { if ( isa ) { cout << <LITERAL> ; isa = <LITERAL> ; } else { cout << <LITERAL> ; isa = <LITERAL> ; } } else cout << <LITERAL> ; } } else { int isa = <LITERAL> , first = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( cnt [ shunxu [ i ] ] == <LITERAL> ) { if ( isa ) { cout << <LITERAL> ; isa = <LITERAL> ; } else { cout << <LITERAL> ; isa = <LITERAL> ; } } else { if ( cnt [ shunxu [ i ] ] == <LITERAL> ) cout << <LITERAL> ; else { if ( first == <LITERAL> ) { cout << <LITERAL> ; first = <LITERAL> ; } else cout << <LITERAL> ; } } } } } } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i <= n ; ++ i ) scanf ( <LITERAL> , & a [ i ] ) , t [ a [ i ] ] ++ ; int pos = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) if ( t [ a [ i ] ] == <LITERAL> ) { s [ i ] = pos ; pos ^= <LITERAL> ; } if ( pos == <LITERAL> ) { for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( t [ a [ i ] ] > <LITERAL> && ! s [ i ] ) { s [ i ] = pos ; pos ^= <LITERAL> ; break ; } } } if ( pos == <LITERAL> ) printf ( <LITERAL> ) ; else { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) printf ( <LITERAL> , s [ i ] + <LITERAL> ) ; } } 
int main ( ) { int n ; int q = <LITERAL> , e = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; b [ a [ i ] ] ++ ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( b [ i ] == <LITERAL> ) q ++ ; if ( b [ i ] >= <LITERAL> ) e ++ ; } if ( q % <LITERAL> == <LITERAL> || ( q % <LITERAL> == <LITERAL> && e != <LITERAL> ) ) printf ( <LITERAL> ) ; else { printf ( <LITERAL> ) ; return <LITERAL> ; } bool bo = <LITERAL> , fix = q % <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( b [ a [ i ] ] == <LITERAL> ) { if ( bo ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; bo = ! bo ; } if ( b [ a [ i ] ] == <LITERAL> ) printf ( <LITERAL> ) ; if ( b [ a [ i ] ] >= <LITERAL> ) { if ( c [ a [ i ] ] ) { printf ( <LITERAL> ) ; continue ; } if ( fix ) { fix = <LITERAL> ; c [ a [ i ] ] = <LITERAL> ; } printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; int num [ <LITERAL> ] = { <LITERAL> } ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] . v ) ; a [ i ] . p = i ; num [ a [ i ] . v ] ++ ; a [ i ] . p = <LITERAL> ; } int u1 = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( num [ i ] == <LITERAL> ) u1 ++ ; } int A = <LITERAL> , B = <LITERAL> ; ; if ( u1 % <LITERAL> == <LITERAL> ) { for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( A == u1 / <LITERAL> ) break ; if ( num [ a [ i ] . v ] == <LITERAL> ) { a [ i ] . p = <LITERAL> ; A ++ ; } } printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i ] . p == <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; } } else { int u = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( num [ a [ i ] . v ] >= <LITERAL> ) { a [ i ] . p = <LITERAL> ; u ++ ; break ; } } if ( u == <LITERAL> ) { printf ( <LITERAL> ) ; } else { int A = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( A == u1 / <LITERAL> ) { for ( int j = i + <LITERAL> ; j <= n ; j ++ ) { if ( num [ a [ j ] . v ] == <LITERAL> ) a [ j ] . p = <LITERAL> ; } break ; } if ( num [ a [ i ] . v ] == <LITERAL> ) { a [ i ] . p = <LITERAL> ; A ++ ; } } printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i ] . p == <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; } } } } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> a [ i ] ; b [ a [ i ] ] ++ ; } int s0 = <LITERAL> , num = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) { if ( b [ i ] == <LITERAL> ) s0 ++ ; if ( b [ i ] >= <LITERAL> ) num ++ ; } if ( s0 % <LITERAL> == <LITERAL> && num == <LITERAL> ) { printf ( <LITERAL> ) ; return <LITERAL> ; } printf ( <LITERAL> ) ; if ( s0 % <LITERAL> == <LITERAL> ) { s0 /= <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( b [ a [ i ] ] == <LITERAL> && s0 ) { -- s0 ; printf ( <LITERAL> ) ; } else printf ( <LITERAL> ) ; } } else { bool flag = <LITERAL> ; s0 /= <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( b [ a [ i ] ] == <LITERAL> ) { if ( s0 ) { -- s0 ; printf ( <LITERAL> ) ; } else printf ( <LITERAL> ) ; } else if ( b [ a [ i ] ] >= <LITERAL> ) { if ( flag == <LITERAL> ) { flag = <LITERAL> ; printf ( <LITERAL> ) ; } else printf ( <LITERAL> ) ; } else printf ( <LITERAL> ) ; } } } 
int main ( ) { int n , x = <LITERAL> , y = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; b [ a [ i ] ] ++ ; } for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) { if ( b [ i ] == <LITERAL> ) { x ++ ; } if ( b [ i ] > <LITERAL> ) y ++ ; } if ( x % <LITERAL> == <LITERAL> && y == <LITERAL> ) { printf ( <LITERAL> ) ; } else { printf ( <LITERAL> ) ; int j = <LITERAL> ; for ( int i = <LITERAL> ; i <= x / <LITERAL> ; j ++ ) { if ( b [ a [ j ] ] == <LITERAL> ) { c [ j ] = <LITERAL> ; i ++ ; } } if ( x % <LITERAL> == <LITERAL> ) { for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( b [ a [ i ] ] > <LITERAL> ) { c [ i ] = <LITERAL> ; break ; } } } for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( c [ i ] == <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> ) ; } } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & arr [ i ] ) ; if ( num [ arr [ i ] ] == <LITERAL> ) { ++ cnt ; } ++ num [ arr [ i ] ] ; if ( num [ arr [ i ] ] > <LITERAL> ) { ++ many ; } } for ( int i = <LITERAL> ; i <= <LITERAL> ; ++ i ) { if ( num [ i ] == <LITERAL> ) { ++ once ; } } if ( once % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> ) ; int cur = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( num [ arr [ i ] ] != <LITERAL> ) { printf ( <LITERAL> ) ; } else { printf ( <LITERAL> , choose [ cur ] ) ; cur ^= <LITERAL> ; } } } else { if ( many ) { printf ( <LITERAL> ) ; int cur = <LITERAL> ; bool flag = true ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( num [ arr [ i ] ] != <LITERAL> ) { if ( flag && num [ arr [ i ] ] > <LITERAL> ) { printf ( <LITERAL> ) ; flag = false ; } else { printf ( <LITERAL> ) ; } } else { printf ( <LITERAL> , choose [ cur ] ) ; cur ^= <LITERAL> ; } } } else { printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; num [ a [ i ] ] ++ ; } int sum1 = <LITERAL> , sum2 = <LITERAL> , sum3 = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( num [ i ] == <LITERAL> ) sum1 ++ ; else if ( num [ i ] == <LITERAL> ) sum2 ++ ; else if ( num [ i ] > <LITERAL> ) sum3 ++ ; } if ( sum1 % <LITERAL> && sum3 == <LITERAL> ) { printf ( <LITERAL> ) ; return <LITERAL> ; } if ( sum1 % <LITERAL> && sum3 ) { printf ( <LITERAL> ) ; int flag = <LITERAL> , mark = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( num [ a [ i ] ] == <LITERAL> && ! flag ) { printf ( <LITERAL> ) ; flag = <LITERAL> ; continue ; } if ( num [ a [ i ] ] == <LITERAL> && flag ) { printf ( <LITERAL> ) ; flag = <LITERAL> ; continue ; } if ( num [ a [ i ] ] == <LITERAL> ) { printf ( <LITERAL> ) ; continue ; } if ( num [ a [ i ] ] > <LITERAL> && book [ a [ i ] ] < num [ a [ i ] ] - <LITERAL> && mark == <LITERAL> ) { printf ( <LITERAL> ) ; book [ a [ i ] ] += <LITERAL> ; continue ; } if ( num [ a [ i ] ] > <LITERAL> && num [ a [ i ] ] - book [ a [ i ] ] == <LITERAL> && mark == <LITERAL> ) { printf ( <LITERAL> ) ; mark = <LITERAL> ; continue ; } else printf ( <LITERAL> ) ; } printf ( <LITERAL> ) ; return <LITERAL> ; } if ( sum1 % <LITERAL> == <LITERAL> ) { int flag = <LITERAL> ; printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( num [ a [ i ] ] == <LITERAL> && ! flag ) { printf ( <LITERAL> ) ; flag = <LITERAL> ; continue ; } if ( num [ a [ i ] ] == <LITERAL> && flag ) { printf ( <LITERAL> ) ; flag = <LITERAL> ; continue ; } else if ( num [ a [ i ] ] > <LITERAL> ) printf ( <LITERAL> ) ; } printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int n , m ; scanf ( <LITERAL> , & n , & m ) ; if ( n > m ) swap ( n , m ) ; if ( n == <LITERAL> ) return printf ( <LITERAL> , m / <LITERAL> * <LITERAL> + ( m % <LITERAL> == <LITERAL> ? <LITERAL> : ( m % <LITERAL> == <LITERAL> ) ? <LITERAL> : <LITERAL> ) ) , <LITERAL> ; if ( m <= <LITERAL> ) return puts ( <LITERAL> ) , <LITERAL> ; if ( n == <LITERAL> && ( m == <LITERAL> || m == <LITERAL> ) ) return printf ( <LITERAL> , <LITERAL> * n * m - <LITERAL> ) , <LITERAL> ; if ( n % <LITERAL> == <LITERAL> || m % <LITERAL> == <LITERAL> ) return printf ( <LITERAL> , <LITERAL> * n * m ) , <LITERAL> ; else printf ( <LITERAL> , <LITERAL> * n * m - <LITERAL> ) ; return <LITERAL> ; } 
inline void read ( int & d ) { d = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) ch = getchar ( ) ; while ( ch >= <LITERAL> && ch <= <LITERAL> ) { d = d * <LITERAL> + ch - <LITERAL> ; ch = getchar ( ) ; } } 
inline void add ( int u , int v , int c ) { { edge [ ++ tot ] . to = v ; edge [ tot ] . nex = head [ u ] ; edge [ tot ] . cap = c ; head [ u ] = tot ; edge [ ++ tot ] . to = u ; edge [ tot ] . nex = head [ v ] ; edge [ tot ] . cap = <LITERAL> ; head [ v ] = tot ; } 
int dfs ( int u , int maxf ) { if ( u == t || ! maxf ) return maxf ; int ret = <LITERAL> ; for ( int & i = cur [ u ] ; i ; i = edge [ i ] . nex ) { { int v = edge [ i ] . to , cap = edge [ i ] . cap ; if ( dist [ v ] == dist [ u ] + <LITERAL> && cap > <LITERAL> ) { int flow = dfs ( v , min ( maxf - ret , cap ) ) ; edge [ i ] . cap -= flow ; edge [ i ^ <LITERAL> ] . cap += flow ; ret += flow ; if ( ret == maxf ) break ; } } } if ( ! ret ) dist [ u ] = - <LITERAL> ; return ret ; } 
bool bfs ( ) { clr ( dist , <LITERAL> ) ; dist [ s ] = <LITERAL> ; que . push ( s ) ; while ( ! que . empty ( ) ) { int u = que . front ( ) ; que . pop ( ) ; for ( int i = head [ u ] ; i ; i = edge [ i ] . nex ) { int v = edge [ i ] . to , cap = edge [ i ] . cap ; if ( dist [ v ] > INF && cap > <LITERAL> ) { dist [ v ] = dist [ u ] + <LITERAL> ; que . push ( v ) ; } } } return dist [ t ] < INF ; } 
int dinic ( ) { int ret = <LITERAL> , flow ; while ( bfs ( ) ) { for ( int i = s ; i <= t ; i ++ ) cur [ i ] = head [ i ] ; while ( flow = dfs ( s , INF ) ) ret += flow ; } return ret ; } 
bool out ( int x , int y ) { return x <= <LITERAL> || x > n || y <= <LITERAL> || y > m ; } 
int id ( int x , int y ) { return ( x - <LITERAL> ) * m + y ; } 
int main ( ) { cin >> n >> m ; if ( n > m ) swap ( n , m ) ; if ( n == <LITERAL> ) { if ( m % <LITERAL> <= <LITERAL> ) printf ( <LITERAL> , ( ll ) m / <LITERAL> * <LITERAL> ) ; if ( m % <LITERAL> == <LITERAL> ) printf ( <LITERAL> , ( ll ) m / <LITERAL> * <LITERAL> + <LITERAL> ) ; if ( m % <LITERAL> == <LITERAL> ) printf ( <LITERAL> , ( ll ) m / <LITERAL> * <LITERAL> + <LITERAL> ) ; } else if ( n == <LITERAL> ) { if ( m <= <LITERAL> ) printf ( <LITERAL> ) ; if ( m == <LITERAL> ) printf ( <LITERAL> ) ; if ( m == <LITERAL> ) printf ( <LITERAL> ) ; if ( m >= <LITERAL> && m != <LITERAL> ) printf ( <LITERAL> , <LITERAL> * n * m ) ; } else { long long ans = <LITERAL> * n * m ; if ( n % <LITERAL> == <LITERAL> && m % <LITERAL> == <LITERAL> ) ans -- ; printf ( <LITERAL> , ans ) ; } } } } } } } } } } } } } return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n ) ; if ( ( n - <LITERAL> ) % <LITERAL> ) printf ( <LITERAL> , <LITERAL> , <LITERAL> , n - <LITERAL> ) ; else printf ( <LITERAL> , <LITERAL> , <LITERAL> , n - <LITERAL> ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; if ( n % <LITERAL> == <LITERAL> ) printf ( <LITERAL> , <LITERAL> , <LITERAL> , n - <LITERAL> ) ; else printf ( <LITERAL> , <LITERAL> , <LITERAL> , n - <LITERAL> ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { long long n , a , b , c ; cin >> n ; if ( n % <LITERAL> == <LITERAL> ) { a = b = <LITERAL> ; c = n - <LITERAL> ; cout << a << <LITERAL> << b << <LITERAL> << c ; } else { a = <LITERAL> ; b = <LITERAL> ; c = n - <LITERAL> ; cout << a << <LITERAL> << b << <LITERAL> << c ; } } 
int main ( ) { int n , a , b , c ; scanf ( <LITERAL> , & n ) ; if ( n % <LITERAL> == <LITERAL> && n % <LITERAL> != <LITERAL> ) { a = b = c = n / <LITERAL> ; } else if ( n % <LITERAL> == <LITERAL> ) { a = b = n / <LITERAL> - <LITERAL> ; c = n / <LITERAL> + <LITERAL> ; } else if ( n % <LITERAL> == <LITERAL> ) { a = b = n / <LITERAL> ; c = n / <LITERAL> + <LITERAL> ; if ( a % <LITERAL> == <LITERAL> ) { a ++ ; b ++ ; c = c - <LITERAL> ; } if ( c % <LITERAL> == <LITERAL> ) { a -- ; b -- ; c = c + <LITERAL> ; } } else { a = n / <LITERAL> ; b = c = n / <LITERAL> + <LITERAL> ; if ( a % <LITERAL> == <LITERAL> ) { a -- ; b ++ ; } if ( b % <LITERAL> == <LITERAL> ) { a = a + <LITERAL> ; b -- ; c -- ; } } printf ( <LITERAL> , a , b , c ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int a = <LITERAL> ; ; ++ a ) { if ( a % <LITERAL> != <LITERAL> ) { for ( int b = <LITERAL> ; ; ++ b ) { if ( b % <LITERAL> != <LITERAL> ) { int c = n - a - b ; if ( c % <LITERAL> != <LITERAL> ) { printf ( <LITERAL> , a , b , c ) ; return <LITERAL> ; } } } } } } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; int key = n / <LITERAL> ; if ( n % <LITERAL> == <LITERAL> ) { if ( key % <LITERAL> != <LITERAL> ) printf ( <LITERAL> , key , key , key ) ; else printf ( <LITERAL> , key - <LITERAL> , key + <LITERAL> , key + <LITERAL> ) ; } else { int i , j , k ; for ( i = key - <LITERAL> ; i <= key + <LITERAL> ; i ++ ) { if ( i % <LITERAL> != <LITERAL> ) { for ( j = key - <LITERAL> ; j <= key + <LITERAL> ; j ++ ) { if ( j % <LITERAL> != <LITERAL> ) { for ( k = key - <LITERAL> ; k <= key + <LITERAL> ; k ++ ) { if ( k % <LITERAL> != <LITERAL> ) { if ( ( i + k + j ) == n ) { printf ( <LITERAL> , i , j , k ) ; return <LITERAL> ; } } } } } } } } } 
int main ( ) { int n , x ; int a ; scanf ( <LITERAL> , & n ) ; a = n / <LITERAL> ; if ( n % <LITERAL> == <LITERAL> ) { if ( n / <LITERAL> % <LITERAL> == <LITERAL> ) printf ( <LITERAL> , a - <LITERAL> , a - <LITERAL> , a + <LITERAL> ) ; else printf ( <LITERAL> , a , a , a ) ; } else if ( n % <LITERAL> == <LITERAL> ) { if ( n / <LITERAL> % <LITERAL> == <LITERAL> ) printf ( <LITERAL> , a - <LITERAL> , a - <LITERAL> , a + <LITERAL> ) ; else if ( n / <LITERAL> % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , a , a , a + <LITERAL> ) ; } else printf ( <LITERAL> , a - <LITERAL> , a , a + <LITERAL> ) ; } else { if ( n / <LITERAL> % <LITERAL> == <LITERAL> ) printf ( <LITERAL> , a - <LITERAL> , a + <LITERAL> , a + <LITERAL> ) ; else if ( n / <LITERAL> % <LITERAL> == <LITERAL> ) printf ( <LITERAL> , a , a + <LITERAL> , a + <LITERAL> ) ; else printf ( <LITERAL> , a , a , a + <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { long long n ; cin >> n ; long long a , b , c ; if ( n % <LITERAL> == <LITERAL> ) { a = n / <LITERAL> ; b = n / <LITERAL> ; c = n / <LITERAL> ; if ( a % <LITERAL> == <LITERAL> ) { a = a - <LITERAL> ; b = b + <LITERAL> ; c = c + <LITERAL> ; } } else { int plus = n % <LITERAL> ; a = n / <LITERAL> ; b = n / <LITERAL> ; c = n / <LITERAL> ; if ( a % <LITERAL> == <LITERAL> && plus >= <LITERAL> ) { a = a - <LITERAL> ; b = b + <LITERAL> ; c = c + <LITERAL> ; } else if ( a % <LITERAL> == <LITERAL> && plus < <LITERAL> ) { if ( plus == <LITERAL> ) { a = a + <LITERAL> ; b = b - <LITERAL> ; c = c + <LITERAL> ; } if ( plus == <LITERAL> ) { a = a + <LITERAL> ; b = b - <LITERAL> ; c = c + <LITERAL> ; } } else if ( a % <LITERAL> != <LITERAL> && plus < <LITERAL> ) { if ( plus == <LITERAL> ) { if ( ( a + <LITERAL> ) % <LITERAL> != <LITERAL> ) { a = a + <LITERAL> ; } else { a = a + <LITERAL> ; b = b - <LITERAL> ; } } if ( plus == <LITERAL> ) { if ( ( a + <LITERAL> ) % <LITERAL> != <LITERAL> ) { a = a + <LITERAL> ; } else { a = a + <LITERAL> ; b = b + <LITERAL> ; } } } else if ( plus >= <LITERAL> && a % <LITERAL> != <LITERAL> ) { if ( ( plus + a ) % <LITERAL> == <LITERAL> ) { if ( ( b + <LITERAL> ) % <LITERAL> == <LITERAL> ) { a = plus + a - <LITERAL> ; b = b + <LITERAL> ; } else { a = plus + a - <LITERAL> ; b = b + <LITERAL> ; } } else { a = a + plus ; } } } cout << a << <LITERAL> << b << <LITERAL> << c ; } 
int main ( ) { int a = <LITERAL> ; cin >> a ; int b = a % <LITERAL> ; int c = a / <LITERAL> ; int d = c % <LITERAL> ; switch ( b ) { case <LITERAL> : switch ( d ) { case <LITERAL> : cout << c - <LITERAL> << <LITERAL> << c - <LITERAL> << <LITERAL> << c + <LITERAL> ; break ; case <LITERAL> : cout << c << <LITERAL> << c << <LITERAL> << c ; break ; case <LITERAL> : cout << c << <LITERAL> << c << <LITERAL> << c ; break ; } break ; case <LITERAL> : switch ( d ) { case <LITERAL> : cout << c - <LITERAL> << <LITERAL> << c - <LITERAL> << <LITERAL> << c + <LITERAL> ; break ; case <LITERAL> : cout << c << <LITERAL> << c << <LITERAL> << c + <LITERAL> ; break ; case <LITERAL> : cout << c - <LITERAL> << <LITERAL> << c << <LITERAL> << c + <LITERAL> ; break ; } break ; case <LITERAL> : switch ( d ) { case <LITERAL> : cout << c - <LITERAL> << <LITERAL> << c - <LITERAL> << <LITERAL> << c + <LITERAL> ; break ; case <LITERAL> : cout << c << <LITERAL> << c + <LITERAL> << <LITERAL> << c + <LITERAL> ; break ; case <LITERAL> : cout << c << <LITERAL> << c << <LITERAL> << c + <LITERAL> ; break ; } break ; } } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; if ( ( n - <LITERAL> ) % <LITERAL> ) printf ( <LITERAL> , <LITERAL> , <LITERAL> , n - <LITERAL> ) ; else printf ( <LITERAL> , <LITERAL> , <LITERAL> , n - <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( i % <LITERAL> == <LITERAL> ) continue ; if ( ( n - i - <LITERAL> ) % <LITERAL> == <LITERAL> ) continue ; printf ( <LITERAL> , i , n - i - <LITERAL> ) ; return <LITERAL> ; } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; if ( ( n - <LITERAL> ) % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n - <LITERAL> ) ; } else printf ( <LITERAL> , n - <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n - <LITERAL> ) ; } else { printf ( <LITERAL> , n - <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int n , i ; cin >> n ; if ( n % <LITERAL> == <LITERAL> || n % <LITERAL> == <LITERAL> ) { cout << <LITERAL> << <LITERAL> << <LITERAL> << <LITERAL> << n - <LITERAL> ; } else if ( n % <LITERAL> == <LITERAL> ) { cout << <LITERAL> << <LITERAL> << <LITERAL> << <LITERAL> << n - <LITERAL> ; } } 
int main ( ) { long long n ; cin >> n ; int a = <LITERAL> ; int b = <LITERAL> ; int x = n - a - b ; if ( x % <LITERAL> != <LITERAL> ) { cout << a << <LITERAL> << b << <LITERAL> << x << endl ; } else { if ( ( x - <LITERAL> ) % <LITERAL> != <LITERAL> ) { cout << a << <LITERAL> << b + <LITERAL> << <LITERAL> << x - <LITERAL> << endl ; } else { if ( ( x - <LITERAL> ) % <LITERAL> != <LITERAL> ) { cout << a + <LITERAL> << <LITERAL> << b + <LITERAL> << <LITERAL> << x - <LITERAL> << endl ; } } } } 
int main ( ) { int n , a , b , c ; scanf ( <LITERAL> , & n ) ; if ( n % <LITERAL> == <LITERAL> && n % <LITERAL> != <LITERAL> ) printf ( <LITERAL> , n / <LITERAL> , n / <LITERAL> , n / <LITERAL> ) ; else if ( n % <LITERAL> == <LITERAL> ) { int av = n / <LITERAL> ; printf ( <LITERAL> , av - <LITERAL> , av - <LITERAL> , av + <LITERAL> ) ; } else { int av = n / <LITERAL> ; if ( av % <LITERAL> == <LITERAL> ) av -- ; int sheng = n - av ; for ( int i = av ; i < n ; i ++ ) { if ( i % <LITERAL> == <LITERAL> ) continue ; if ( ( sheng - i ) % <LITERAL> == <LITERAL> ) continue ; printf ( <LITERAL> , sheng - i , av , i ) ; break ; } } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; if ( n % <LITERAL> == <LITERAL> ) printf ( <LITERAL> , n - <LITERAL> ) ; else printf ( <LITERAL> , n - <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { cin >> n ; int d = n / <LITERAL> ; int e = n % <LITERAL> ; if ( d % <LITERAL> != <LITERAL> && ( d + <LITERAL> ) % <LITERAL> != <LITERAL> ) { if ( e == <LITERAL> ) { cout << d << <LITERAL> << d << <LITERAL> << d ; } else if ( e == <LITERAL> ) { cout << d + <LITERAL> << <LITERAL> << d << <LITERAL> << d ; } else if ( e == <LITERAL> ) { cout << d + <LITERAL> << <LITERAL> << d + <LITERAL> << <LITERAL> << d ; } } else if ( d % <LITERAL> != <LITERAL> && ( d + <LITERAL> ) % <LITERAL> != <LITERAL> ) { if ( e == <LITERAL> ) { cout << d << <LITERAL> << d << <LITERAL> << d ; } else if ( e == <LITERAL> ) { cout << d - <LITERAL> << <LITERAL> << d + <LITERAL> << <LITERAL> << d ; } else if ( e == <LITERAL> ) { cout << d + <LITERAL> << <LITERAL> << d << <LITERAL> << d ; } } else if ( d % <LITERAL> == <LITERAL> ) { if ( e == <LITERAL> ) { cout << d - <LITERAL> << <LITERAL> << d + <LITERAL> << <LITERAL> << d + <LITERAL> ; } else if ( e == <LITERAL> ) { cout << d - <LITERAL> << <LITERAL> << d + <LITERAL> << <LITERAL> << d + <LITERAL> ; } else if ( e == <LITERAL> ) { cout << d - <LITERAL> << <LITERAL> << d + <LITERAL> << <LITERAL> << d + <LITERAL> ; } } return <LITERAL> ; } 
int main ( ) { long long n , a , b , c ; scanf ( <LITERAL> , & n ) ; if ( n % <LITERAL> == <LITERAL> ) { a = n / <LITERAL> ; printf ( <LITERAL> , a - <LITERAL> , a + <LITERAL> , a + <LITERAL> ) ; } else { if ( n == <LITERAL> ) { printf ( <LITERAL> ) ; return <LITERAL> ; } a = n / <LITERAL> ; b = n % <LITERAL> ; c = a + b ; while ( a % <LITERAL> == <LITERAL> || c % <LITERAL> == <LITERAL> ) { a -= <LITERAL> ; c += <LITERAL> ; } printf ( <LITERAL> , a , a , c ) ; } } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; if ( n % <LITERAL> == <LITERAL> ) { printf ( <LITERAL> , n - <LITERAL> ) ; } else { printf ( <LITERAL> , n - <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { cin >> n ; int a = <LITERAL> , b = <LITERAL> , c = n - <LITERAL> ; if ( c % <LITERAL> == <LITERAL> ) c -- , b ++ ; cout << a << <LITERAL> << b << <LITERAL> << c << endl ; } 
int main ( ) { cin >> n ; if ( n % <LITERAL> == <LITERAL> ) { a = b = <LITERAL> ; c = n - <LITERAL> ; } else { a = <LITERAL> ; b = <LITERAL> ; c = n - <LITERAL> ; } cout << a << <LITERAL> << b << <LITERAL> << c ; return <LITERAL> ; } 
int main ( ) { long int n , a , b , c ; cin >> n ; if ( n % <LITERAL> == <LITERAL> ) { a = <LITERAL> ; b = <LITERAL> ; c = n - a - b ; cout << a << <LITERAL> << b << <LITERAL> << c ; } else { a = <LITERAL> ; b = <LITERAL> ; c = n - a - b ; cout << a << <LITERAL> << b << <LITERAL> << c ; } } 
int main ( ) { int n ; cin >> n ; int a = <LITERAL> , b = <LITERAL> , c = n - <LITERAL> ; if ( c % <LITERAL> == <LITERAL> ) { c -- ; a ++ ; } if ( c % <LITERAL> == <LITERAL> ) { c -- ; b ++ ; } cout << a << <LITERAL> << b << <LITERAL> << c ; } 
int main ( ) { scanf ( <LITERAL> , & N ) ; if ( N % <LITERAL> == <LITERAL> ) printf ( <LITERAL> , N - <LITERAL> ) ; else printf ( <LITERAL> , N - <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { int a = <LITERAL> , b = <LITERAL> , c = <LITERAL> ; scanf ( <LITERAL> , st ) ; int len = strlen ( st ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( st [ i ] >= <LITERAL> && st [ i ] <= <LITERAL> ) a ++ ; if ( st [ i ] >= <LITERAL> && st [ i ] <= <LITERAL> ) b ++ ; if ( st [ i ] >= <LITERAL> && st [ i ] <= <LITERAL> ) c ++ ; } if ( a && b && c ) { printf ( <LITERAL> , st ) ; continue ; } if ( a && b ) { if ( st [ <LITERAL> ] >= <LITERAL> && st [ <LITERAL> ] <= <LITERAL> ) { if ( a > <LITERAL> ) { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } else { printf ( <LITERAL> , st [ <LITERAL> ] ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } } if ( a == <LITERAL> ) { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } else { printf ( <LITERAL> , st [ <LITERAL> ] ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } } if ( a && c ) { if ( st [ <LITERAL> ] >= <LITERAL> && st [ <LITERAL> ] <= <LITERAL> ) { if ( a > <LITERAL> ) { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } else { printf ( <LITERAL> , st [ <LITERAL> ] ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } } if ( a == <LITERAL> ) { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } else { printf ( <LITERAL> , st [ <LITERAL> ] ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } } if ( b && c ) { if ( st [ <LITERAL> ] >= <LITERAL> && st [ <LITERAL> ] <= <LITERAL> ) { if ( b > <LITERAL> ) { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } else { printf ( <LITERAL> , st [ <LITERAL> ] ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } } if ( b == <LITERAL> ) { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } else { printf ( <LITERAL> , st [ <LITERAL> ] ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; continue ; } } if ( a ) { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; } if ( b ) { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; } if ( c ) { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < len ; i ++ ) printf ( <LITERAL> , st [ i ] ) ; printf ( <LITERAL> ) ; } } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , raw ) ; int len = strlen ( raw ) , up = <LITERAL> , low = <LITERAL> , digit = <LITERAL> ; for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( raw [ i ] >= <LITERAL> && raw [ i ] <= <LITERAL> ) up ++ ; else if ( raw [ i ] >= <LITERAL> && raw [ i ] <= <LITERAL> ) low ++ ; else digit ++ ; } if ( up == <LITERAL> && low == <LITERAL> ) printf ( <LITERAL> , raw + <LITERAL> ) ; else if ( up == <LITERAL> && digit == <LITERAL> ) printf ( <LITERAL> , raw + <LITERAL> ) ; else if ( low == <LITERAL> && digit == <LITERAL> ) printf ( <LITERAL> , raw + <LITERAL> ) ; else if ( ! up ) { if ( low == <LITERAL> ) { for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( raw [ i ] >= <LITERAL> && raw [ i ] <= <LITERAL> ) { raw [ i ] = <LITERAL> ; break ; } } } else { for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( raw [ i ] >= <LITERAL> && raw [ i ] <= <LITERAL> ) { raw [ i ] = <LITERAL> ; break ; } } } printf ( <LITERAL> , raw ) ; } else if ( ! low ) { if ( up == <LITERAL> ) { for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( raw [ i ] >= <LITERAL> && raw [ i ] <= <LITERAL> ) { raw [ i ] = <LITERAL> ; break ; } } } else { for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( raw [ i ] >= <LITERAL> && raw [ i ] <= <LITERAL> ) { raw [ i ] = <LITERAL> ; break ; } } } printf ( <LITERAL> , raw ) ; } else if ( ! digit ) { if ( up == <LITERAL> ) { for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( raw [ i ] >= <LITERAL> && raw [ i ] <= <LITERAL> ) { raw [ i ] = <LITERAL> ; break ; } } } else { for ( int i = <LITERAL> ; i < len ; i ++ ) { if ( raw [ i ] >= <LITERAL> && raw [ i ] <= <LITERAL> ) { raw [ i ] = <LITERAL> ; break ; } } } printf ( <LITERAL> , raw ) ; } else printf ( <LITERAL> , raw ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; rep ( i , <LITERAL> , n ) { scanf ( <LITERAL> , & s ) ; lower = <LITERAL> , upper = <LITERAL> , digit = <LITERAL> ; ll l = strlen ( s ) ; rep ( i , <LITERAL> , l - <LITERAL> ) { if ( isdigit ( s [ i ] ) ) { if ( digit ) a [ ++ la ] = i ; digit = <LITERAL> ; } if ( islower ( s [ i ] ) ) { if ( lower ) a [ ++ la ] = i ; lower = <LITERAL> ; } if ( isupper ( s [ i ] ) ) { if ( upper ) a [ ++ la ] = i ; upper = <LITERAL> ; } } if ( ! digit ) { s [ a [ la ] ] = <LITERAL> ; la -- ; } if ( ! lower ) { s [ a [ la ] ] = <LITERAL> ; la -- ; } if ( ! upper ) { s [ a [ la ] ] = <LITERAL> ; } printf ( <LITERAL> , s ) ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; getchar ( ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { char s [ <LITERAL> ] ; scanf ( <LITERAL> , s ) ; getchar ( ) ; int n = strlen ( s ) , num = <LITERAL> , A = <LITERAL> , a = <LITERAL> ; for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) num ++ ; if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) a ++ ; if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) A ++ ; } if ( num != <LITERAL> && a != <LITERAL> && A != <LITERAL> ) printf ( <LITERAL> , s ) ; else if ( num == <LITERAL> && a != <LITERAL> && A != <LITERAL> ) { if ( a > <LITERAL> ) { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) { s [ j ] = <LITERAL> ; break ; } } } else { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) { s [ j ] = <LITERAL> ; break ; } } } printf ( <LITERAL> , s ) ; } else if ( num != <LITERAL> && a == <LITERAL> && A != <LITERAL> ) { if ( num > <LITERAL> ) { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) { s [ j ] = <LITERAL> ; break ; } } } else { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) { s [ j ] = <LITERAL> ; break ; } } } printf ( <LITERAL> , s ) ; } else if ( num != <LITERAL> && a != <LITERAL> && A == <LITERAL> ) { if ( num > <LITERAL> ) { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) { s [ j ] = <LITERAL> ; break ; } } } else { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) { s [ j ] = <LITERAL> ; break ; } } } printf ( <LITERAL> , s ) ; } else if ( num == <LITERAL> && a == <LITERAL> && A != <LITERAL> ) { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) { s [ j ] = <LITERAL> ; s [ j + <LITERAL> ] = <LITERAL> ; break ; } } printf ( <LITERAL> , s ) ; } else if ( num != <LITERAL> && a == <LITERAL> && A == <LITERAL> ) { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) { s [ j ] = <LITERAL> ; s [ j + <LITERAL> ] = <LITERAL> ; break ; } } printf ( <LITERAL> , s ) ; } else if ( num == <LITERAL> && a != <LITERAL> && A == <LITERAL> ) { for ( int j = <LITERAL> ; j < n ; j ++ ) { if ( s [ j ] <= <LITERAL> && s [ j ] >= <LITERAL> ) { s [ j ] = <LITERAL> ; s [ j + <LITERAL> ] = <LITERAL> ; break ; } } printf ( <LITERAL> , s ) ; } } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
bool check ( string s ) { { clr ( f , <LITERAL> ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) f [ <LITERAL> ] ++ ; if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) f [ <LITERAL> ] ++ ; if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) f [ <LITERAL> ] ++ ; } return ( f [ <LITERAL> ] && f [ <LITERAL> ] && f [ <LITERAL> ] ) ; } 
void solve ( ) { cin >> s ; n = s . size ( ) ; if ( check ( s ) ) { cout << s << endl ; return ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { if ( check ( s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) ) ) { cout << s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) << endl ; return ; } if ( check ( s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) ) ) { cout << s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) << endl ; return ; } if ( check ( s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) ) ) { cout << s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) << endl ; return ; } } for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) { if ( check ( s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) ) ) { cout << s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) << endl ; return ; } if ( check ( s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) ) ) { cout << s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) << endl ; return ; } if ( check ( s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) ) ) { cout << s . substr ( <LITERAL> , i ) + <LITERAL> + s . substr ( i + <LITERAL> , n ) << endl ; return ; } } } 
int main ( ) { int T = read ( ) ; while ( T -- ) solve ( ) ; } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { char a [ <LITERAL> ] ; int num = <LITERAL> , low = <LITERAL> , up = <LITERAL> , firstnum = - <LITERAL> , firstlow = - <LITERAL> , firstup = - <LITERAL> ; scanf ( <LITERAL> , a ) ; getchar ( ) ; int len = strlen ( a ) ; for ( int i = <LITERAL> ; a [ i ] ; i ++ ) { if ( a [ i ] <= <LITERAL> && a [ i ] >= <LITERAL> ) { num ++ ; if ( num == <LITERAL> ) firstnum = i ; } if ( a [ i ] <= <LITERAL> && a [ i ] >= <LITERAL> ) { low ++ ; if ( low == <LITERAL> ) firstlow = i ; } if ( a [ i ] <= <LITERAL> && a [ i ] >= <LITERAL> ) { up ++ ; if ( up == <LITERAL> ) firstup = i ; } } if ( num == <LITERAL> ) { if ( low == <LITERAL> ) { a [ <LITERAL> ] = <LITERAL> ; a [ <LITERAL> ] = <LITERAL> ; } else if ( up == <LITERAL> ) { a [ <LITERAL> ] = <LITERAL> ; a [ <LITERAL> ] = <LITERAL> ; } else { if ( low >= <LITERAL> ) { if ( up >= <LITERAL> ) a [ <LITERAL> ] = <LITERAL> ; else a [ firstlow ] = <LITERAL> ; } else a [ firstup ] = <LITERAL> ; } } else if ( low == <LITERAL> ) { if ( up == <LITERAL> ) { a [ <LITERAL> ] = <LITERAL> ; a [ <LITERAL> ] = <LITERAL> ; } else { if ( up >= <LITERAL> ) { if ( num >= <LITERAL> ) a [ <LITERAL> ] = <LITERAL> ; else a [ firstup ] = <LITERAL> ; } else a [ firstnum ] = <LITERAL> ; } } else if ( up == <LITERAL> ) { if ( low >= <LITERAL> ) { if ( num >= <LITERAL> ) { a [ <LITERAL> ] = <LITERAL> ; } else a [ firstlow ] = <LITERAL> ; } else a [ firstnum ] = <LITERAL> ; } cout << a << endl ; } } 
bool j1 ( int i ) { return str [ i ] <= <LITERAL> && str [ i ] >= <LITERAL> ; } 
bool j2 ( int i ) { return str [ i ] <= <LITERAL> && str [ i ] >= <LITERAL> ; } 
bool j3 ( int i ) { return str [ i ] <= <LITERAL> && str [ i ] >= <LITERAL> ; } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , str + <LITERAL> ) ; memset ( a , <LITERAL> , sizeof ( a ) ) ; memset ( b , <LITERAL> , sizeof ( b ) ) ; memset ( c , <LITERAL> , sizeof ( c ) ) ; int len = strlen ( str + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= len ; i ++ ) { if ( j1 ( i ) ) a [ i ] ++ ; else if ( j2 ( i ) ) b [ i ] ++ ; else if ( j3 ( i ) ) c [ i ] ++ ; } for ( int i = <LITERAL> ; i <= len ; i ++ ) { a [ i ] += a [ i - <LITERAL> ] ; b [ i ] += b [ i - <LITERAL> ] ; c [ i ] += c [ i - <LITERAL> ] ; } if ( a [ len ] && b [ len ] && c [ len ] ) { printf ( <LITERAL> , str + <LITERAL> ) ; continue ; } bool ok = false ; for ( int k = <LITERAL> ; k <= len ; k ++ ) { for ( int i = <LITERAL> ; i <= len - k + <LITERAL> ; i ++ ) { bool fa = false , fb = false , fc = false ; int j = i + k - <LITERAL> ; int ra = a [ len ] - a [ j ] + a [ i - <LITERAL> ] ; int rb = b [ len ] - b [ j ] + b [ i - <LITERAL> ] ; int rc = c [ len ] - c [ j ] + c [ i - <LITERAL> ] ; int na = a [ j ] - a [ i - <LITERAL> ] ; int nb = b [ j ] - b [ i - <LITERAL> ] ; int nc = c [ j ] - c [ i - <LITERAL> ] ; int ta = a [ len ] , tb = b [ len ] , tc = c [ len ] ; bool sa = false , sb = false , sc = false ; if ( a [ len ] ) sa = true ; if ( b [ len ] ) sb = true ; if ( c [ len ] ) sc = true ; int ma = <LITERAL> , mb = <LITERAL> , mc = <LITERAL> ; if ( ra ) fa = true , ma = <LITERAL> ; if ( rb ) fb = true , mb = <LITERAL> ; if ( rc ) fc = true , mc = <LITERAL> ; if ( ! ra ) { if ( nb > mb ) fa = true , nb -- ; else if ( nc > mc ) fa = true , nc -- ; } if ( ! rb ) { if ( na > ma ) fb = true , na -- ; else if ( nc > mc ) fb = true , nc -- ; } if ( ! rc ) { if ( na > ma ) fc = true , na -- ; else if ( nb > mb ) fc = true , nb -- ; } if ( fa && fb && fc ) { ok = true ; for ( int p = <LITERAL> ; p < i ; p ++ ) printf ( <LITERAL> , str [ p ] ) ; for ( int p = i ; p <= j ; p ++ ) { if ( j1 ( p ) && ta > <LITERAL> && ( ! sb ) ) { sb = true ; ta -- ; printf ( <LITERAL> ) ; continue ; } if ( j1 ( p ) && ta > <LITERAL> && ( ! sc ) ) { sc = true ; ta -- ; printf ( <LITERAL> ) ; continue ; } if ( j2 ( p ) && tb > <LITERAL> && ( ! sa ) ) { sa = true ; tb -- ; printf ( <LITERAL> ) ; continue ; } if ( j2 ( p ) && tb > <LITERAL> && ( ! sc ) ) { sc = true ; tb -- ; printf ( <LITERAL> ) ; continue ; } if ( j3 ( p ) && tc > <LITERAL> && ( ! sa ) ) { sa = true ; tc -- ; printf ( <LITERAL> ) ; continue ; } if ( j3 ( p ) && tc > <LITERAL> && ( ! sb ) ) { sb = true ; tc -- ; printf ( <LITERAL> ) ; continue ; } printf ( <LITERAL> , str [ p ] ) ; } for ( int p = j + <LITERAL> ; p <= len ; p ++ ) printf ( <LITERAL> , str [ p ] ) ; printf ( <LITERAL> ) ; } } if ( ok ) break ; } if ( ok ) break ; } } return <LITERAL> ; } 
int main ( ) { cin >> T ; while ( T -- ) { memset ( a , <LITERAL> , sizeof ( a ) ) ; scanf ( <LITERAL> , s ) ; int len = strlen ( s ) ; for ( int i = <LITERAL> ; i < len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) a [ <LITERAL> ] ++ ; if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) a [ <LITERAL> ] ++ ; if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) a [ <LITERAL> ] ++ ; } int num = <LITERAL> ; if ( a [ <LITERAL> ] > <LITERAL> ) ++ num ; if ( a [ <LITERAL> ] > <LITERAL> ) ++ num ; if ( a [ <LITERAL> ] > <LITERAL> ) ++ num ; if ( num == <LITERAL> ) printf ( <LITERAL> , s ) ; else if ( num == <LITERAL> ) { if ( ! a [ <LITERAL> ] ) { for ( int i = <LITERAL> ; i < len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> && a [ <LITERAL> ] > <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> && a [ <LITERAL> ] > <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } } } if ( ! a [ <LITERAL> ] ) { for ( int i = <LITERAL> ; i < len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> && a [ <LITERAL> ] > <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> && a [ <LITERAL> ] > <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } } } if ( ! a [ <LITERAL> ] ) { for ( int i = <LITERAL> ; i < len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> && a [ <LITERAL> ] > <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> && a [ <LITERAL> ] > <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } } } for ( int i = <LITERAL> ; i < len ; ++ i ) cout << s [ i ] ; cout << endl ; } else { if ( a [ <LITERAL> ] ) s [ <LITERAL> ] = <LITERAL> , s [ <LITERAL> ] = <LITERAL> ; if ( a [ <LITERAL> ] ) s [ <LITERAL> ] = <LITERAL> , s [ <LITERAL> ] = <LITERAL> ; if ( a [ <LITERAL> ] ) s [ <LITERAL> ] = <LITERAL> , s [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < len ; ++ i ) cout << s [ i ] ; cout << endl ; } } } 
int main ( ) { int t , i ; cin >> t ; for ( i = <LITERAL> ; i < t ; i ++ ) { string s ; int j , k ; int up , low , di ; up = low = di = <LITERAL> ; cin >> s ; for ( j = <LITERAL> ; j < s . size ( ) ; j ++ ) { if ( int ( s [ j ] ) >= <LITERAL> && int ( s [ j ] ) <= <LITERAL> ) di ++ ; if ( int ( s [ j ] ) >= <LITERAL> && int ( s [ j ] ) <= <LITERAL> ) up ++ ; if ( int ( s [ j ] ) >= <LITERAL> && int ( s [ j ] ) <= <LITERAL> ) low ++ ; } if ( up > <LITERAL> && low > <LITERAL> && di > <LITERAL> ) { cout << s << endl ; continue ; } else if ( up > <LITERAL> && low > <LITERAL> && di == <LITERAL> ) { k = <LITERAL> ; if ( up >= <LITERAL> ) { while ( int ( s [ k ] ) < <LITERAL> || int ( s [ k ] ) > <LITERAL> ) k ++ ; s [ k ] = <LITERAL> ; cout << s << endl ; } else { while ( int ( s [ k ] ) < <LITERAL> || int ( s [ k ] ) > <LITERAL> ) k ++ ; s [ k ] = <LITERAL> ; cout << s << endl ; } } else if ( up > <LITERAL> && low == <LITERAL> && di > <LITERAL> ) { k = <LITERAL> ; if ( up >= <LITERAL> ) { while ( int ( s [ k ] ) < <LITERAL> || int ( s [ k ] ) > <LITERAL> ) k ++ ; s [ k ] = <LITERAL> ; cout << s << endl ; } else { while ( int ( s [ k ] ) < <LITERAL> || int ( s [ k ] ) > <LITERAL> ) k ++ ; s [ k ] = <LITERAL> ; cout << s << endl ; } } else if ( up == <LITERAL> && low > <LITERAL> && di > <LITERAL> ) { k = <LITERAL> ; if ( low >= <LITERAL> ) { while ( int ( s [ k ] ) < <LITERAL> || int ( s [ k ] ) > <LITERAL> ) k ++ ; s [ k ] = <LITERAL> ; cout << s << endl ; } else { while ( int ( s [ k ] ) < <LITERAL> || int ( s [ k ] ) > <LITERAL> ) k ++ ; s [ k ] = <LITERAL> ; cout << s << endl ; } } else if ( up > <LITERAL> && low == <LITERAL> && di == <LITERAL> ) { s [ <LITERAL> ] = <LITERAL> ; s [ <LITERAL> ] = <LITERAL> ; cout << s << endl ; } else if ( up == <LITERAL> && low > <LITERAL> && di == <LITERAL> ) { s [ <LITERAL> ] = <LITERAL> ; s [ <LITERAL> ] = <LITERAL> ; cout << s << endl ; } else if ( up == <LITERAL> && low == <LITERAL> && di > <LITERAL> ) { s [ <LITERAL> ] = <LITERAL> ; s [ <LITERAL> ] = <LITERAL> ; cout << s << endl ; } } } 
inline int jud ( char c ) { if ( isupper ( c ) ) { return <LITERAL> ; } else if ( islower ( c ) ) { return <LITERAL> ; } else { return <LITERAL> ; } } 
int main ( ) { int t , l , cnt [ <LITERAL> ] ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , str ) ; l = strlen ( str ) ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { cnt [ i ] = <LITERAL> ; } for ( int i = <LITERAL> ; i < l ; i ++ ) { cnt [ jud ( str [ i ] ) ] ++ ; } if ( cnt [ <LITERAL> ] * cnt [ <LITERAL> ] * cnt [ <LITERAL> ] != <LITERAL> ) { ; } else if ( cnt [ <LITERAL> ] == <LITERAL> && cnt [ <LITERAL> ] != <LITERAL> && cnt [ <LITERAL> ] != <LITERAL> ) { if ( cnt [ <LITERAL> ] == <LITERAL> && jud ( str [ <LITERAL> ] ) == <LITERAL> || cnt [ <LITERAL> ] == <LITERAL> && jud ( str [ <LITERAL> ] ) == <LITERAL> ) { str [ <LITERAL> ] = <LITERAL> ; } else { str [ <LITERAL> ] = <LITERAL> ; } } else if ( cnt [ <LITERAL> ] != <LITERAL> && cnt [ <LITERAL> ] == <LITERAL> && cnt [ <LITERAL> ] != <LITERAL> ) { if ( cnt [ <LITERAL> ] == <LITERAL> && jud ( str [ <LITERAL> ] ) == <LITERAL> || cnt [ <LITERAL> ] == <LITERAL> && jud ( str [ <LITERAL> ] ) == <LITERAL> ) { str [ <LITERAL> ] = <LITERAL> ; } else { str [ <LITERAL> ] = <LITERAL> ; } } else if ( cnt [ <LITERAL> ] != <LITERAL> && cnt [ <LITERAL> ] != <LITERAL> && cnt [ <LITERAL> ] == <LITERAL> ) { if ( cnt [ <LITERAL> ] == <LITERAL> && jud ( str [ <LITERAL> ] ) == <LITERAL> || cnt [ <LITERAL> ] == <LITERAL> && jud ( str [ <LITERAL> ] ) == <LITERAL> ) { str [ <LITERAL> ] = <LITERAL> ; } else { str [ <LITERAL> ] = <LITERAL> ; } } else if ( cnt [ <LITERAL> ] != <LITERAL> ) { str [ <LITERAL> ] = <LITERAL> ; str [ <LITERAL> ] = <LITERAL> ; } else if ( cnt [ <LITERAL> ] != <LITERAL> ) { str [ <LITERAL> ] = <LITERAL> ; str [ <LITERAL> ] = <LITERAL> ; } else if ( cnt [ <LITERAL> ] != <LITERAL> ) { str [ <LITERAL> ] = <LITERAL> ; str [ <LITERAL> ] = <LITERAL> ; } printf ( <LITERAL> , str ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , s + <LITERAL> ) ; cnt [ <LITERAL> ] = cnt [ <LITERAL> ] = cnt [ <LITERAL> ] = <LITERAL> ; len = strlen ( s + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { ++ cnt [ <LITERAL> ] ; } if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { ++ cnt [ <LITERAL> ] ; } if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { ++ cnt [ <LITERAL> ] ; } } if ( cnt [ <LITERAL> ] == <LITERAL> || cnt [ <LITERAL> ] == <LITERAL> || cnt [ <LITERAL> ] == <LITERAL> ) { if ( cnt [ <LITERAL> ] && cnt [ <LITERAL> ] ) { if ( cnt [ <LITERAL> ] == <LITERAL> ) { for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } } } else { for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } } } } else if ( cnt [ <LITERAL> ] && cnt [ <LITERAL> ] ) { if ( cnt [ <LITERAL> ] == <LITERAL> ) { for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } } } else { for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } } } } else if ( cnt [ <LITERAL> ] && cnt [ <LITERAL> ] ) { if ( cnt [ <LITERAL> ] == <LITERAL> ) { for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } } } else { for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( s [ i ] >= <LITERAL> && s [ i ] <= <LITERAL> ) { s [ i ] = <LITERAL> ; break ; } } } } else if ( cnt [ <LITERAL> ] ) { s [ <LITERAL> ] = <LITERAL> ; s [ <LITERAL> ] = <LITERAL> ; } else if ( cnt [ <LITERAL> ] ) { s [ <LITERAL> ] = <LITERAL> ; s [ <LITERAL> ] = <LITERAL> ; } else if ( cnt [ <LITERAL> ] ) { s [ <LITERAL> ] = <LITERAL> ; s [ <LITERAL> ] = <LITERAL> ; } } for ( int i = <LITERAL> ; i <= len ; ++ i ) { printf ( <LITERAL> , s [ i ] ) ; } printf ( <LITERAL> ) ; } } 
void init ( ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { flag [ i ] = <LITERAL> ; tot = <LITERAL> ; } return ; } 
bool check ( ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( ! flag [ i ] ) return false ; } return true ; } 
void change ( int pos , int c ) { if ( c == <LITERAL> ) { s [ pos ] = <LITERAL> ; } if ( c == <LITERAL> ) { s [ pos ] = <LITERAL> ; } if ( c == <LITERAL> ) s [ pos ] = <LITERAL> ; return ; } 
int judge ( char c ) { if ( isdigit ( c ) ) return <LITERAL> ; if ( islower ( c ) ) return <LITERAL> ; if ( isupper ( c ) ) return <LITERAL> ; } 
void solve ( ) { for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( isdigit ( s [ i ] ) ) flag [ <LITERAL> ] ++ ; if ( islower ( s [ i ] ) ) flag [ <LITERAL> ] ++ ; if ( isupper ( s [ i ] ) ) flag [ <LITERAL> ] ++ ; } for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( flag [ i ] ) tot ++ ; } if ( tot == <LITERAL> ) return ; if ( tot == <LITERAL> ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( ! flag [ i ] ) { for ( int j = <LITERAL> ; j <= n ; j ++ ) { if ( judge ( s [ j ] ) != i ) { flag [ judge ( s [ j ] ) ] -- ; flag [ i ] ++ ; if ( check ( ) ) { change ( j , i ) ; return ; } else { flag [ judge ( s [ j ] ) ] ++ ; flag [ i ] -- ; } } } } } } if ( tot = <LITERAL> ) { int posi , posj ; int fill , not1 , not2 ; not1 = - <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( flag [ i ] ) fill = i ; if ( ! flag [ i ] && not1 == - <LITERAL> ) not1 = i ; if ( ! flag [ i ] && not1 != - <LITERAL> ) not2 = i ; } int MIND = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= n ; j ++ ) { if ( i == j ) continue ; if ( judge ( s [ i ] ) != not1 && judge ( s [ j ] ) != not2 ) { flag [ judge ( s [ i ] ) ] -- ; flag [ not1 ] ++ ; flag [ judge ( s [ j ] ) ] -- ; flag [ not2 ] ++ ; if ( check ( ) ) { int dis = abs ( i - j ) ; if ( dis < MIND ) { MIND = dis ; posi = i ; posj = j ; } } flag [ judge ( s [ i ] ) ] ++ ; flag [ not1 ] -- ; flag [ judge ( s [ j ] ) ] ++ ; flag [ not2 ] -- ; } } } change ( posi , not1 ) ; change ( posj , not2 ) ; return ; } return ; } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { init ( ) ; scanf ( <LITERAL> , s + <LITERAL> ) ; n = strlen ( s + <LITERAL> ) ; solve ( ) ; printf ( <LITERAL> , s + <LITERAL> ) ; } return <LITERAL> ; } 
bool isdig ( char s ) { if ( s >= <LITERAL> && s <= <LITERAL> ) return <LITERAL> ; return <LITERAL> ; } 
bool isupp ( char s ) { if ( s >= <LITERAL> && s <= <LITERAL> ) return <LITERAL> ; return <LITERAL> ; } 
bool islow ( char s ) { if ( s >= <LITERAL> && s <= <LITERAL> ) return <LITERAL> ; return <LITERAL> ; } 
bool check ( char s , int type ) { if ( type == <LITERAL> ) return isdig ( s ) ; if ( type == <LITERAL> ) return isupp ( s ) ; if ( type == <LITERAL> ) return islow ( s ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , s + <LITERAL> ) ; int dig , upp , low ; dig = upp = low = <LITERAL> ; int len = strlen ( s + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( isdig ( s [ i ] ) ) ++ dig ; if ( isupp ( s [ i ] ) ) ++ upp ; if ( islow ( s [ i ] ) ) ++ low ; } } if ( dig && upp && low ) { printf ( <LITERAL> , s + <LITERAL> ) ; } else if ( dig && upp ) { int tmp = <LITERAL> ; if ( dig > <LITERAL> ) tmp = <LITERAL> ; if ( upp > <LITERAL> ) tmp = <LITERAL> ; for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( check ( s [ i ] , tmp ) ) { s [ i ] = <LITERAL> ; break ; } } printf ( <LITERAL> , s + <LITERAL> ) ; } else if ( dig && low ) { int tmp = <LITERAL> ; if ( dig > <LITERAL> ) tmp = <LITERAL> ; if ( low > <LITERAL> ) tmp = <LITERAL> ; for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( check ( s [ i ] , tmp ) ) { s [ i ] = <LITERAL> ; break ; } } printf ( <LITERAL> , s + <LITERAL> ) ; } else if ( upp && low ) { int tmp = <LITERAL> ; if ( upp > <LITERAL> ) tmp = <LITERAL> ; if ( low > <LITERAL> ) tmp = <LITERAL> ; for ( int i = <LITERAL> ; i <= len ; ++ i ) { if ( check ( s [ i ] , tmp ) ) { s [ i ] = <LITERAL> ; break ; } } printf ( <LITERAL> , s + <LITERAL> ) ; } else if ( upp ) { s [ <LITERAL> ] = <LITERAL> ; s [ <LITERAL> ] = <LITERAL> ; printf ( <LITERAL> , s + <LITERAL> ) ; } else if ( low ) { s [ <LITERAL> ] = <LITERAL> ; s [ <LITERAL> ] = <LITERAL> ; printf ( <LITERAL> , s + <LITERAL> ) ; } else if ( dig ) { s [ <LITERAL> ] = <LITERAL> ; s [ <LITERAL> ] = <LITERAL> ; printf ( <LITERAL> , s + <LITERAL> ) ; } } return <LITERAL> ; } 
void work ( ) { int a , b , c , d , x ; a = d = b = c = <LITERAL> ; scanf ( <LITERAL> , s ) ; for ( int i = <LITERAL> ; s [ i ] ; i ++ ) { if ( s [ i ] >= <LITERAL> ) c ++ ; else if ( s [ i ] >= <LITERAL> ) b ++ ; else a ++ ; } if ( a ) d ++ ; if ( b ) d ++ ; if ( c ) d ++ ; if ( d == <LITERAL> ) { puts ( s ) ; return ; } else if ( d == <LITERAL> ) { for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) { if ( ! a ) a ++ , s [ i ] = <LITERAL> ; else if ( ! b ) b ++ , s [ i ] = <LITERAL> ; else c ++ , s [ i ] = <LITERAL> ; } puts ( s ) ; return ; } for ( int i = <LITERAL> ; s [ i ] ; i ++ ) { if ( s [ i ] >= <LITERAL> ) x = c ; else if ( s [ i ] >= <LITERAL> ) x = b ; else x = a ; if ( x >= <LITERAL> ) { if ( ! a ) a ++ , s [ i ] = <LITERAL> ; else if ( ! b ) b ++ , s [ i ] = <LITERAL> ; else c ++ , s [ i ] = <LITERAL> ; break ; } } puts ( s ) ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) work ( ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; dp [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = dp [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; dp [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = dp [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; ++ i ) { for ( int j = <LITERAL> ; j <= k ; ++ j ) { ( dp [ i + <LITERAL> ] [ j ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j + <LITERAL> ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j + <LITERAL> ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j + <LITERAL> ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j + <LITERAL> ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j + <LITERAL> ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j + <LITERAL> ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j + <LITERAL> ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j + <LITERAL> ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; ( dp [ i + <LITERAL> ] [ j ] [ <LITERAL> ] += dp [ i ] [ j ] [ <LITERAL> ] ) %= mod ; } } for ( int i = <LITERAL> ; i < <LITERAL> ; ++ i ) { ans = ( ans + dp [ n ] [ k ] [ i ] ) % mod ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , k , ol = <LITERAL> ; scanf ( <LITERAL> , & n , & k ) ; dp [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; dp [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; dp [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; dp [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int kt = <LITERAL> ; kt <= k ; kt ++ ) { dp [ ne ] [ <LITERAL> ] [ kt ] = dp [ ol ] [ <LITERAL> ] [ kt ] + dp [ ol ] [ <LITERAL> ] [ kt ] + dp [ ol ] [ <LITERAL> ] [ kt ] + dp [ ol ] [ <LITERAL> ] [ kt - <LITERAL> ] ; dp [ ne ] [ <LITERAL> ] [ kt ] %= mod ; dp [ ne ] [ <LITERAL> ] [ kt ] = dp [ ol ] [ <LITERAL> ] [ kt - <LITERAL> ] + dp [ ol ] [ <LITERAL> ] [ kt ] + dp [ ol ] [ <LITERAL> ] [ kt - <LITERAL> ] ; kt > <LITERAL> && ( dp [ ne ] [ <LITERAL> ] [ kt ] += dp [ ol ] [ <LITERAL> ] [ kt - <LITERAL> ] ) ; dp [ ne ] [ <LITERAL> ] [ kt ] %= mod ; dp [ ne ] [ <LITERAL> ] [ kt ] = dp [ ol ] [ <LITERAL> ] [ kt - <LITERAL> ] + dp [ ol ] [ <LITERAL> ] [ kt ] + dp [ ol ] [ <LITERAL> ] [ kt - <LITERAL> ] ; kt > <LITERAL> && ( dp [ ne ] [ <LITERAL> ] [ kt ] += dp [ ol ] [ <LITERAL> ] [ kt - <LITERAL> ] ) ; dp [ ne ] [ <LITERAL> ] [ kt ] %= mod ; dp [ ne ] [ <LITERAL> ] [ kt ] = dp [ ol ] [ <LITERAL> ] [ kt - <LITERAL> ] + dp [ ol ] [ <LITERAL> ] [ kt ] + dp [ ol ] [ <LITERAL> ] [ kt ] + dp [ ol ] [ <LITERAL> ] [ kt ] ; dp [ ne ] [ <LITERAL> ] [ kt ] %= mod ; } ol = <LITERAL> - ol ; } printf ( <LITERAL> , ( dp [ ol ] [ <LITERAL> ] [ k ] + dp [ ol ] [ <LITERAL> ] [ k ] + dp [ ol ] [ <LITERAL> ] [ k ] + dp [ ol ] [ <LITERAL> ] [ k ] ) % mod ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
inline void add ( int & x , int y ) { x += y ; if ( x > mod ) x -= mod ; } 
void solve ( ) { n = read ( ) ; k = read ( ) ; f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { for ( int j = <LITERAL> ; j <= k ; j ++ ) { for ( int p = <LITERAL> ; p <= <LITERAL> ; p ++ ) { for ( int q = <LITERAL> ; q <= <LITERAL> ; q ++ ) { int m = p ^ q ; if ( m == <LITERAL> ) add ( f [ i ] [ j ] [ q ] , f [ i - <LITERAL> ] [ j ] [ p ] ) ; else if ( m == <LITERAL> || m == <LITERAL> ) { if ( q == <LITERAL> || q == <LITERAL> ) add ( f [ i ] [ j ] [ q ] , f [ i - <LITERAL> ] [ j ] [ p ] ) ; else add ( f [ i ] [ j ] [ q ] , f [ i - <LITERAL> ] [ j - <LITERAL> ] [ p ] ) ; } else { if ( q == <LITERAL> || q == <LITERAL> ) add ( f [ i ] [ j ] [ q ] , f [ i - <LITERAL> ] [ j - <LITERAL> ] [ p ] ) ; else if ( j > <LITERAL> ) add ( f [ i ] [ j ] [ q ] , f [ i - <LITERAL> ] [ j - <LITERAL> ] [ p ] ) ; } } } } } int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) add ( ans , f [ n ] [ k ] [ i ] ) ; printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = <LITERAL> ; j <= k ; j ++ ) { for ( int k = <LITERAL> ; k < <LITERAL> ; k ++ ) { for ( int l = <LITERAL> ; l < <LITERAL> ; l ++ ) { int w = w1 [ k ] [ l ] ; ( f [ i + <LITERAL> ] [ j + w ] [ l ] += f [ i ] [ j ] [ k ] ) %= mo ; } } } } int ans = <LITERAL> ; for ( int i = <LITERAL> ; i < <LITERAL> ; i ++ ) ( ans += f [ n ] [ k ] [ i ] ) %= mo ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; f [ <LITERAL> ] [ <LITERAL> ] [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) for ( int j = <LITERAL> ; j <= k ; j ++ ) { f [ i ] [ j ] [ <LITERAL> ] = ( ( f [ i - <LITERAL> ] [ j ] [ <LITERAL> ] + f [ i - <LITERAL> ] [ j ] [ <LITERAL> ] ) % MOD + f [ i - <LITERAL> ] [ j ] [ <LITERAL> ] ) % MOD ; f [ i ] [ j ] [ <LITERAL> ] = ( ( f [ i - <LITERAL> ] [ j ] [ <LITERAL> ] + f [ i - <LITERAL> ] [ j ] [ <LITERAL> ] ) % MOD + f [ i - <LITERAL> ] [ j ] [ <LITERAL> ] ) % MOD ; f [ i ] [ j ] [ <LITERAL> ] = f [ i - <LITERAL> ] [ j ] [ <LITERAL> ] ; f [ i ] [ j ] [ <LITERAL> ] = f [ i - <LITERAL> ] [ j ] [ <LITERAL> ] ; if ( j >= <LITERAL> ) { f [ i ] [ j ] [ <LITERAL> ] = ( f [ i ] [ j ] [ <LITERAL> ] + f [ i - <LITERAL> ] [ j - <LITERAL> ] [ <LITERAL> ] ) % MOD ; f [ i ] [ j ] [ <LITERAL> ] = ( f [ i ] [ j ] [ <LITERAL> ] + f [ i - <LITERAL> ] [ j - <LITERAL> ] [ <LITERAL> ] ) % MOD ; f [ i ] [ j ] [ <LITERAL> ] = ( ( f [ i ] [ j ] [ <LITERAL> ] + f [ i - <LITERAL> ] [ j - <LITERAL> ] [ <LITERAL> ] ) % MOD + f [ i - <LITERAL> ] [ j - <LITERAL> ] [ <LITERAL> ] ) % MOD ; f [ i ] [ j ] [ <LITERAL> ] = ( ( f [ i ] [ j ] [ <LITERAL> ] + f [ i - <LITERAL> ] [ j - <LITERAL> ] [ <LITERAL> ] ) % MOD + f [ i - <LITERAL> ] [ j - <LITERAL> ] [ <LITERAL> ] ) % MOD ; } if ( j >= <LITERAL> ) { f [ i ] [ j ] [ <LITERAL> ] = ( f [ i ] [ j ] [ <LITERAL> ] + f [ i - <LITERAL> ] [ j - <LITERAL> ] [ <LITERAL> ] ) % MOD ; f [ i ] [ j ] [ <LITERAL> ] = ( f [ i ] [ j ] [ <LITERAL> ] + f [ i - <LITERAL> ] [ j - <LITERAL> ] [ <LITERAL> ] ) % MOD ; } } printf ( <LITERAL> , ( ( f [ n ] [ k ] [ <LITERAL> ] + f [ n ] [ k ] [ <LITERAL> ] ) % MOD + ( f [ n ] [ k ] [ <LITERAL> ] + f [ n ] [ k ] [ <LITERAL> ] ) % MOD ) % MOD ) ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; a [ <LITERAL> ] = read ( ) ; int gd = a [ <LITERAL> ] , mx = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { a [ i ] = read ( ) ; gd = __gcd ( a [ i ] , gd ) ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) a [ i ] /= gd , mx = max ( mx , a [ i ] ) , cnt [ a [ i ] ] ++ ; int ans = n ; for ( int i = <LITERAL> ; i <= mx ; i ++ ) { if ( vis [ i ] ) continue ; int num = cnt [ i ] ; for ( int j = i + i ; j <= mx ; j += i ) { num += cnt [ j ] ; vis [ j ] = <LITERAL> ; } ans = min ( ans , n - num ) ; } printf ( <LITERAL> , ans == n ? - <LITERAL> : ans ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
void prime ( ) { int m = size + <LITERAL> ; for ( int i = <LITERAL> ; i < m ; i ++ ) { if ( pre [ i ] == <LITERAL> ) prim [ prime_n ++ ] = i ; for ( int j = <LITERAL> ; j < prime_n && i * prim [ j ] < m ; j ++ ) { pre [ prim [ j ] * i ] = i ; if ( i % prim [ j ] == <LITERAL> ) break ; } } } 
int gcd ( int a , int b ) { return b ? gcd ( b , a % b ) : a ; } 
int main ( ) { prime ( ) ; int n , g ; scanf ( <LITERAL> , & n , a ) ; g = a [ <LITERAL> ] ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , a + i ) ; g = gcd ( g , a [ i ] ) ; } for ( int i = <LITERAL> ; i < n ; i ++ ) { int x = a [ i ] / g , pre1 = <LITERAL> ; while ( pre [ x ] ) { if ( x / pre [ x ] != pre1 ) num [ pre1 = x / pre [ x ] ] ++ ; x = pre [ x ] ; } if ( x != pre1 ) num [ x ] ++ ; } int ans = <LITERAL> ; for ( int i = <LITERAL> ; i < prime_n ; i ++ ) ans = max ( ans , num [ prim [ i ] ] ) ; printf ( <LITERAL> , ( ans == <LITERAL> ) ? - <LITERAL> : n - ans ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & l , & r ) ; printf ( <LITERAL> ) ; for ( long long int i = l ; i <= r ; i += <LITERAL> ) { printf ( <LITERAL> , i , i + <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { long long l , r ; scanf ( <LITERAL> , & l , & r ) ; puts ( <LITERAL> ) ; for ( long long i = l ; i <= r ; i += <LITERAL> ) { printf ( <LITERAL> , i , i + <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { long long l , r ; cin >> l >> r ; cout << <LITERAL> << endl ; for ( long long i = l ; i <= r - <LITERAL> ; i += <LITERAL> ) { cout << i << <LITERAL> << i + <LITERAL> ; if ( i != r - <LITERAL> ) { cout << endl ; } } } 
int main ( ) { long long int l , r , i ; cin >> l >> r ; cout << <LITERAL> << endl ; for ( i = l ; i < r ; i += <LITERAL> ) cout << i << <LITERAL> << i + <LITERAL> << endl ; } 
int main ( ) { scanf ( <LITERAL> , & l , & r ) ; for ( long long i = l + <LITERAL> ; i <= r ; i += <LITERAL> ) s . insert ( i ) ; for ( long long i = l ; i <= r ; i += <LITERAL> ) { for ( set < long long > :: iterator it = s . begin ( ) ; it != s . end ( ) ; it ++ ) { long long x = * it ; if ( __gcd ( i , x ) == <LITERAL> ) { ansx [ ++ cnt ] = i ; ansy [ cnt ] = x ; s . erase ( it ) ; break ; } } } if ( s . size ( ) ) printf ( <LITERAL> ) ; else { printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i <= cnt ; i ++ ) printf ( <LITERAL> , ansx [ i ] , ansy [ i ] ) ; } return <LITERAL> ; } 
int main ( ) { long long l , r ; scanf ( <LITERAL> , & l , & r ) ; printf ( <LITERAL> ) ; for ( long long i = l ; i <= r ; i += <LITERAL> ) printf ( <LITERAL> , i , i + <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { long long l , r ; scanf ( <LITERAL> , & l , & r ) ; long long ans = l ; printf ( <LITERAL> ) ; for ( long long i = <LITERAL> ; i <= ( r - l + <LITERAL> ) / <LITERAL> ; i ++ , ans += <LITERAL> ) { printf ( <LITERAL> , ans + <LITERAL> , ans ) ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & l , & r ) ; printf ( <LITERAL> ) ; for ( LL i = l ; i <= r ; i += <LITERAL> ) printf ( <LITERAL> , i , i + <LITERAL> ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char c = getchar ( ) ; while ( c > <LITERAL> || c < <LITERAL> ) { if ( c == <LITERAL> ) f = - <LITERAL> ; c = getchar ( ) ; } while ( c <= <LITERAL> && c >= <LITERAL> ) x = ( x << <LITERAL> ) + ( x << <LITERAL> ) + ( c ^ <LITERAL> ) , c = getchar ( ) ; return x * f ; } 
inline void write ( int x ) { char c [ <LITERAL> ] ; int l = <LITERAL> ; while ( x ) c [ ++ l ] = x % <LITERAL> + <LITERAL> , x /= <LITERAL> ; while ( l ) putchar ( c [ l -- ] ) ; putchar ( <LITERAL> ) ; } 
int main ( ) { while ( ~ scanf ( <LITERAL> , & l , & r ) ) { cout << <LITERAL> << endl ; for ( ll i = l ; i <= r ; i += <LITERAL> ) { cout << i << <LITERAL> << i + <LITERAL> << endl ; } } return <LITERAL> ; } 
int main ( ) { cin >> l >> r ; cout << <LITERAL> << endl ; for ( long long i = l ; i <= r ; i += <LITERAL> ) cout << i << <LITERAL> << i + <LITERAL> << endl ; } 
int main ( ) { long long l , r ; scanf ( <LITERAL> , & l , & r ) ; printf ( <LITERAL> ) ; for ( long long i = l ; i <= r ; i = i + <LITERAL> ) { printf ( <LITERAL> , i , i + <LITERAL> ) ; } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { ll l , r ; cin >> l >> r ; puts ( <LITERAL> ) ; for ( ll i = l ; i <= r ; i += <LITERAL> ) printf ( <LITERAL> , i , i + <LITERAL> ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { long long l , r ; scanf ( <LITERAL> , & l , & r ) ; printf ( <LITERAL> ) ; for ( long long i = l ; i <= r ; i += <LITERAL> ) printf ( <LITERAL> , i , i + <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & L , & R ) ; int cnt = <LITERAL> ; printf ( <LITERAL> ) ; for ( long long i = L ; i <= R ; ++ i ) { ++ cnt ; if ( ! ( cnt & <LITERAL> ) ) printf ( <LITERAL> ) ; printf ( <LITERAL> , i ) ; if ( ! ( cnt & <LITERAL> ) ) printf ( <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { ios :: sync_with_stdio ( <LITERAL> ) ; cin >> r >> l ; cout << <LITERAL> ; for ( ll i = r ; i <= l ; i += <LITERAL> ) { cout << i << <LITERAL> << i + <LITERAL> << <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { long long l , r ; scanf ( <LITERAL> , & l , & r ) ; printf ( <LITERAL> ) ; for ( long long i = r ; i >= l + <LITERAL> ; i -= <LITERAL> ) { printf ( <LITERAL> , i , i - <LITERAL> ) ; } } 
int main ( ) { ll tot = <LITERAL> ; scanf ( <LITERAL> , & l , & r ) ; for ( ; tot < r - l + <LITERAL> ; tot ++ ) { if ( tot % <LITERAL> ) A [ totA ++ ] = l + tot ; else B [ totB ++ ] = l + tot ; } printf ( <LITERAL> ) ; for ( int i = <LITERAL> ; i < totA ; i ++ ) { printf ( <LITERAL> ) ; printf ( <LITERAL> , A [ i ] , B [ i ] ) ; } return <LITERAL> ; } 
int main ( ) { ll l , r , i ; cin >> l >> r ; i = l ; cout << <LITERAL> << endl ; while ( i < r ) { cout << i << <LITERAL> << i + <LITERAL> << endl ; i += <LITERAL> ; } } 
int main ( ) { long long l , r ; scanf ( <LITERAL> , & l , & r ) ; printf ( <LITERAL> ) ; for ( long long i = l ; i < r ; i += <LITERAL> ) { printf ( <LITERAL> , i , i + <LITERAL> ) ; } return <LITERAL> ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; int L , v , l , r ; for ( int i = <LITERAL> ; i < t ; i ++ ) { scanf ( <LITERAL> , & L , & v , & l , & r ) ; int total = L / v ; int p = r / v - ( l - <LITERAL> ) / v ; printf ( <LITERAL> , total - p ) ; } } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i < t ; i ++ ) { int L , v , l , r ; scanf ( <LITERAL> , & L , & v , & l , & r ) ; int part1 ; if ( l % v == <LITERAL> ) part1 = l / v - <LITERAL> ; else part1 = l / v ; int ans = L / v - ( r / v - part1 ) ; printf ( <LITERAL> , ans ) ; } } 
int main ( ) { int t , L , v , l , r ; int i , a [ <LITERAL> ] ; int pre ; int pro ; scanf ( <LITERAL> , & t ) ; for ( i = <LITERAL> ; i <= t ; i ++ ) { scanf ( <LITERAL> , & L , & v , & l , & r ) ; pre = ( ( l + v - <LITERAL> ) / v ) - <LITERAL> ; pro = L - ( r / v + <LITERAL> ) * v ; if ( pro >= <LITERAL> ) { pro = pro / v + <LITERAL> ; } else pro = <LITERAL> ; a [ i ] = pro + pre ; } for ( i = <LITERAL> ; i <= t ; i ++ ) printf ( <LITERAL> , a [ i ] ) ; } 
void work ( ) { int L , v , l , r ; scanf ( <LITERAL> , & L , & v , & l , & r ) ; printf ( <LITERAL> , L / v - r / v + ( l - <LITERAL> ) / v ) ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) work ( ) ; return <LITERAL> ; } 
int main ( ) { int t ; int l [ <LITERAL> ] , L [ <LITERAL> ] , r [ <LITERAL> ] , v [ <LITERAL> ] ; cin >> t ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { cin >> L [ i ] >> v [ i ] >> l [ i ] >> r [ i ] ; } for ( int i = <LITERAL> ; i <= t ; i ++ ) cout << ( L [ i ] / v [ i ] ) - ( r [ i ] / v [ i ] - ( l [ i ] - <LITERAL> ) / v [ i ] ) << endl ; } 
int main ( ) { int t , L , l , r , V , ans ; cin >> t ; while ( t -- ) { cin >> L >> V >> l >> r ; ans = L / V ; ; ans -= r / V - l / V ; ; if ( l % V == <LITERAL> ) { { ans -- ; } cout << ans << endl ; } return <LITERAL> ; } 
int main ( ) { int t , i , j ; scanf ( <LITERAL> , & t ) ; int L [ t ] , v [ t ] , l [ t ] , r [ t ] , x [ t ] , sum [ t ] = { <LITERAL> } ; for ( i = <LITERAL> ; i < t ; i ++ ) { scanf ( <LITERAL> , & L [ i ] , & v [ i ] , & l [ i ] , & r [ i ] ) ; x [ i ] = L [ i ] / v [ i ] ; if ( l [ i ] % v [ i ] == <LITERAL> ) sum [ i ] = x [ i ] - r [ i ] / v [ i ] + l [ i ] / v [ i ] - <LITERAL> ; else sum [ i ] = x [ i ] - r [ i ] / v [ i ] + l [ i ] / v [ i ] ; printf ( <LITERAL> , sum [ i ] ) ; } return <LITERAL> ; } 
int main ( ) { int t , Li , vi , li , ri , i , a ; scanf ( <LITERAL> , & t ) ; for ( i = t ; i != <LITERAL> ; i -- ) { scanf ( <LITERAL> , & Li , & vi , & li , & ri ) ; a = Li / vi ; a = a - ri / vi + li / vi ; if ( li % vi == <LITERAL> ) { a -- ; } printf ( <LITERAL> , a ) ; } return <LITERAL> ; } 
int main ( ) { int t , L , v , l , r , i ; cin >> t ; for ( i = <LITERAL> ; i < t ; i ++ ) { cin >> L >> v >> l >> r ; int ans = <LITERAL> ; ans += ( L / v ) - ( r / v ) + ( ( l - <LITERAL> ) / v ) ; cout << ans << endl ; } } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { int L , v , l , r ; cin >> L >> v >> l >> r ; cout << L / v - ( r / v - ( l - <LITERAL> ) / v ) << endl ; } return <LITERAL> ; } 
int main ( ) { int n , j = <LITERAL> ; int a , b ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { cin >> L [ i ] >> v [ i ] >> l [ i ] >> r [ i ] ; } while ( j < n ) { a = L [ j ] / v [ j ] ; if ( l [ j ] % v [ j ] == <LITERAL> ) { b = <LITERAL> + r [ j ] / v [ j ] - l [ j ] / v [ j ] ; } else b = r [ j ] / v [ j ] - l [ j ] / v [ j ] ; cout << a - b << endl ; j ++ ; } return <LITERAL> ; } 
int main ( ) { int t , over , L , R , V , ans ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , & over , & V , & L , & R ) ; ans = over / V ; ans -= R / V - L / V ; if ( L % V == <LITERAL> ) ans -- ; printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; int L , v , l , r ; int t = <LITERAL> ; while ( t < n ) { int count ; cin >> L >> v >> l >> r ; count = L / v ; int b = r / v - l / v ; if ( l % v == <LITERAL> ) { b = b + <LITERAL> ; } cout << count - b ; if ( t != n - <LITERAL> ) { cout << <LITERAL> ; } t ++ ; } } 
int main ( ) { long long t , L , v , l , r ; cin >> t ; long long ret = <LITERAL> ; while ( t -- ) { cin >> L >> v >> l >> r ; ret = L / v + ( l - <LITERAL> ) / v - r / v ; cout << ret << <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { int n , L , v , l , r , x , y , count ; scanf ( <LITERAL> , & n ) ; while ( n -- ) { scanf ( <LITERAL> , & L , & v , & l , & r ) ; x = ( l - <LITERAL> ) / v , y = r / v ; count = L / v ; count -= y - x ; printf ( <LITERAL> , count ) ; } } 
inline void solve ( ) { int lth , l , r , v ; cin >> lth >> v >> l >> r ; cout << lth / v - r / v + ( l - <LITERAL> ) / v << endl ; } 
int main ( ) { int n ; cin >> n ; for ( int i = <LITERAL> ; i < n ; i ++ ) { solve ( ) ; } return <LITERAL> ; } 
int main ( ) { cin >> T ; while ( T -- ) { cin >> L >> v >> l >> r ; int num = L / v - r / v + ( l - <LITERAL> ) / v ; cout << num << endl ; } return <LITERAL> ; } 
inline char gc ( ) { return A == B && ( B = ( A = ss ) + fread ( ss , <LITERAL> , <LITERAL> << <LITERAL> , stdin ) , A == B ) ? EOF : * A ++ ; } 
int main ( ) { read ( t ) ; while ( t -- ) { read ( L ) ; read ( v ) ; read ( l ) ; read ( r ) ; printf ( <LITERAL> , L / v - r / v + ( l - <LITERAL> ) / v ) ; } fwrite ( sr , <LITERAL> , C + <LITERAL> , stdout ) ; return <LITERAL> ; } 
int main ( ) { int t ; cin >> t ; for ( int i = <LITERAL> ; i < t ; i ++ ) { int L , v , l , r ; cin >> L >> v >> l >> r ; int count = L / v ; int left = ( l - <LITERAL> ) / v ; int right = r / v ; count -= ( right - left ) ; cout << count << endl ; } } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; v = read ( ) ; l = read ( ) ; r = read ( ) ; ans = n / v - r / v + ( l - <LITERAL> ) / v ; printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = read ( ) ; while ( T -- ) solve ( ) ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; while ( T -- ) { scanf ( <LITERAL> , & L , & v , & l , & r ) ; printf ( <LITERAL> , L / v - ( r / v - ( l - <LITERAL> ) / v ) ) ; } return <LITERAL> ; } 
int main ( ) { long long t , L , v , l , r ; cin >> t ; for ( int i = <LITERAL> ; i < t ; i ++ ) { cin >> L >> v >> l >> r ; cout << ( L / v ) - ( ( r / v ) - ( ( l - <LITERAL> ) / v ) ) << endl ; } return <LITERAL> ; } 
int howmany ( int a , int b , int v ) 
int main ( ) { int t ; scanf_s ( <LITERAL> , & t ) ; int * num = new int [ t ] ; for ( int i = <LITERAL> ; i <= t - <LITERAL> ; i ++ ) num [ i ] = <LITERAL> ; int times = t ; while ( t -- ) { int dest , v , l , r ; scanf_s ( <LITERAL> , & dest , & v , & l , & r ) ; num [ t ] += howmany ( <LITERAL> , l - <LITERAL> , v ) + howmany ( r + <LITERAL> , dest , v ) ; } for ( int i = times - <LITERAL> ; i >= <LITERAL> ; i -- ) printf ( <LITERAL> , num [ i ] ) ; return <LITERAL> ; } 
int howmany ( int a , int b , int v ) { if ( v == <LITERAL> ) return b - a + <LITERAL> ; if ( a % v == <LITERAL> ) a -- ; if ( b % v == <LITERAL> ) b ++ ; return int ( b / v ) - int ( a / v ) ; } 
int main ( ) { int t ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { int a , b , c , d ; scanf ( <LITERAL> , & a , & b , & c , & d ) ; printf ( <LITERAL> , a / b - d / b + ( c - <LITERAL> ) / b ) ; } return <LITERAL> ; } 
int main ( ) { int t , now , v , l , r ; scanf ( <LITERAL> , & t ) ; while ( t -- ) { scanf ( <LITERAL> , & now , & v , & l , & r ) ; int num = r / v - l / v ; if ( l % v == <LITERAL> ) num ++ ; printf ( <LITERAL> , now / v - num ) ; } } 
int main ( ) { int a ; cin >> a ; for ( int i = <LITERAL> ; i < a ; i ++ ) { int b [ <LITERAL> ] ; for ( int j = <LITERAL> ; j < <LITERAL> ; j ++ ) { cin >> b [ j ] ; } int c = <LITERAL> ; c += ( b [ <LITERAL> ] - <LITERAL> ) / b [ <LITERAL> ] ; int t = b [ <LITERAL> ] - b [ <LITERAL> ] % b [ <LITERAL> ] + b [ <LITERAL> ] ; if ( t <= b [ <LITERAL> ] ) { c += ( b [ <LITERAL> ] - t ) / b [ <LITERAL> ] + <LITERAL> ; } cout << c << endl ; } } 
int main ( ) { int T ; scanf ( <LITERAL> , & T ) ; while ( T -- ) { int len , v , l , r ; scanf ( <LITERAL> , & len , & v , & l , & r ) ; int ans1 = ( l - <LITERAL> ) / v ; int ans2 = len / v - r / v ; printf ( <LITERAL> , ans1 + ans2 ) ; char a = <LITERAL> ; int b = <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & T ) ; for ( int i = <LITERAL> ; i <= T ; i ++ ) { int L , v , l , r ; scanf ( <LITERAL> , & L , & v , & l , & r ) ; int times1 = L / v ; int a = r / v ; int b = l / v ; int c = a - b ; if ( l % v == <LITERAL> ) c ++ ; printf ( <LITERAL> , times1 - c ) ; } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int len , v , l , r ; scanf ( <LITERAL> , & len , & v , & l , & r ) ; int all = len / v ; int u1 = l / v , u2 = r / v ; int cha = u2 - u1 ; if ( l % v == <LITERAL> ) cha ++ ; ; printf ( <LITERAL> , all - cha ) ; } return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { scanf ( <LITERAL> , & len , & v , & beg , & fin ) ; ans = len / v - fin / v + ( beg - <LITERAL> ) / v ; printf ( <LITERAL> , ans ) ; } return <LITERAL> ; } 
signed main ( ) { { { int t ; cin >> t ; while ( t -- ) { int l , v , x , y ; cin >> l >> v >> x >> y ; cout << l / v - ( y / v - ( x - <LITERAL> ) / v ) << endl ; } return <LITERAL> ; } 
int main ( void ) { int n ; scanf ( <LITERAL> , & n ) ; int * num = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int road , dis , left , right ; scanf ( <LITERAL> , & road , & dis , & left , & right ) ; num [ i ] = road / dis ; num [ i ] -= right / dis - left / dis ; if ( left % dis == <LITERAL> ) num [ i ] -- ; } for ( int i = <LITERAL> ; i < n ; i ++ ) printf ( <LITERAL> , num [ i ] ) ; } 
int main ( ) { int t , L , v , l , r , ans [ <LITERAL> ] ; cin >> t ; for ( int i = <LITERAL> ; i < t ; i ++ ) { cin >> L >> v >> l >> r ; int max = L / v , out , a = l - l % v , b = r - r % v ; if ( ( l % v == <LITERAL> && r % v != <LITERAL> ) || ( l % v == <LITERAL> && r % v == <LITERAL> ) ) out = ( b - a ) / v + <LITERAL> ; else out = ( b - a ) / v ; ans [ i ] = max - out ; } for ( int i = <LITERAL> ; i < t ; i ++ ) { cout << ans [ i ] << endl ; } return <LITERAL> ; } 
int main ( ) { int t ; cin >> t ; while ( t -- ) { int L , v , l , r ; cin >> L >> v >> l >> r ; int a = L / v - ( r / v - l / v ) ; if ( l % v == <LITERAL> ) cout << a - <LITERAL> << endl ; else cout << a << endl ; } } 
int main ( ) { int n1 , n ; char c ; cin >> n1 ; int l = <LITERAL> , r = <LITERAL> ; while ( n1 -- ) { cin >> c >> n ; if ( c == <LITERAL> ) { imap [ n ] = l ; -- l ; } else if ( c == <LITERAL> ) { imap [ n ] = r ; ++ r ; } else if ( c == <LITERAL> ) { int tmp1 = r - imap [ n ] - <LITERAL> ; int tmp2 = imap [ n ] - l - <LITERAL> ; if ( tmp1 > tmp2 ) tmp1 = tmp2 ; cout << tmp1 << <LITERAL> ; } } return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , op ) ; if ( op [ <LITERAL> ] == <LITERAL> ) { int x = read ( ) , k = kind [ x ] ; printf ( <LITERAL> , min ( cnt [ k ] - pos [ x ] , cnt [ k ^ <LITERAL> ] + pos [ x ] - <LITERAL> ) ) ; } else { int x = read ( ) , k = ( op [ <LITERAL> ] == <LITERAL> ? <LITERAL> : <LITERAL> ) ; kind [ x ] = k ; pos [ x ] = ++ cnt [ k ] ; } } } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { int t , a ; char ch ; int l = <LITERAL> , r = <LITERAL> ; scanf ( <LITERAL> , & t ) ; bool first = <LITERAL> ; getchar ( ) ; while ( t -- ) { scanf ( <LITERAL> , & ch , & a ) ; ; if ( first ) { num [ l ] = a ; nowp [ a ] = l ; first = <LITERAL> ; getchar ( ) ; continue ; } if ( ch == <LITERAL> ) { l -- ; num [ l ] = a ; nowp [ a ] = l ; } else if ( ch == <LITERAL> ) { r ++ ; num [ r ] = a ; nowp [ a ] = r ; } else { { printf ( <LITERAL> , min ( r - nowp [ a ] , nowp [ a ] - l ) ) ; } getchar ( ) ; } return <LITERAL> ; } 
char get ( ) { char tmp = getchar ( ) ; while ( tmp != <LITERAL> && tmp != <LITERAL> && tmp != <LITERAL> ) { tmp = getchar ( ) ; } return tmp ; } 
int main ( ) { scanf ( <LITERAL> , & q ) ; for ( int i = <LITERAL> ; i <= q ; ++ i ) { arr [ i ] . opt = get ( ) ; scanf ( <LITERAL> , & arr [ i ] . id ) ; if ( place [ arr [ i ] . id ] == <LITERAL> ) { ++ cnt ; place [ arr [ i ] . id ] = cnt ; } arr [ i ] . id = place [ arr [ i ] . id ] ; } root . build ( <LITERAL> , <LITERAL> , q ) ; cnt = <LITERAL> ; for ( int i = <LITERAL> ; i <= q ; ++ i ) { if ( arr [ i ] . opt == <LITERAL> ) { ++ cnt ; if ( arr [ i ] . id != <LITERAL> ) { root . modify ( <LITERAL> , <LITERAL> , q , <LITERAL> , arr [ i ] . id - <LITERAL> , <LITERAL> ) ; } root . modify ( <LITERAL> , <LITERAL> , q , arr [ i ] . id , arr [ i ] . id , <LITERAL> ) ; } else if ( arr [ i ] . opt == <LITERAL> ) { ++ cnt ; root . modify ( <LITERAL> , <LITERAL> , q , arr [ i ] . id , arr [ i ] . id , cnt ) ; } else { int tmp = root . query ( <LITERAL> , <LITERAL> , q , arr [ i ] . id ) ; printf ( <LITERAL> , std :: min ( tmp - <LITERAL> , cnt - tmp ) ) ; } } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , s , & x ) ; if ( s [ <LITERAL> ] == <LITERAL> ) mp [ x ] = ++ cnt , head -- , f [ cnt ] = head + <LITERAL> ; else if ( s [ <LITERAL> ] == <LITERAL> ) mp [ x ] = ++ cnt , ++ tail , f [ cnt ] = tail ; else cout << min ( f [ mp [ x ] ] - head - <LITERAL> , tail - f [ mp [ x ] ] ) << endl ; } } 
int main ( ) { int t ; char op [ <LITERAL> ] ; int id ; scanf ( <LITERAL> , & t ) ; for ( int i = <LITERAL> ; i <= t ; i ++ ) { scanf ( <LITERAL> , op , & id ) ; switch ( op [ <LITERAL> ] ) { case <LITERAL> : cntl ++ ; tp [ id ] = cntl ; break ; case <LITERAL> : cntr ++ ; tp [ id ] = - cntr ; break ; case <LITERAL> : int dir = ( tp [ id ] > <LITERAL> ) ; printf ( <LITERAL> , min ( cntr + tp [ id ] - ( dir == <LITERAL> ) , cntl - tp [ id ] - ( dir == <LITERAL> ) ) ) ; break ; } } return <LITERAL> ; } 
int main ( ) { cin >> q ; int left = <LITERAL> , right = <LITERAL> - <LITERAL> ; while ( q -- ) { char opt ; int val ; cin >> opt >> val ; if ( opt == <LITERAL> ) { left -- ; pos [ val ] = left ; } else if ( opt == <LITERAL> ) { right ++ ; pos [ val ] = right ; } else if ( opt == <LITERAL> ) cout << min ( pos [ val ] - left , right - pos [ val ] ) << endl ; } return <LITERAL> ; } 
signed main ( ) { { { int t ; cin >> t ; int l = <LITERAL> , r = <LITERAL> ; while ( t -- ) { char opt ; int x ; cin >> opt >> x ; if ( opt == <LITERAL> ) { a [ x ] = -- l ; } if ( opt == <LITERAL> ) { a [ x ] = ++ r ; } if ( opt == <LITERAL> ) { cout << min ( r - a [ x ] , a [ x ] - l ) << endl ; } } return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { char ch = getchar ( ) ; while ( ! ( ch == <LITERAL> || ch == <LITERAL> || ch == <LITERAL> ) ) ch = getchar ( ) ; int x ; scanf ( <LITERAL> , & x ) ; if ( ch == <LITERAL> ) { a [ l ] = x ; idd [ x ] = l ; l -- ; } if ( ch == <LITERAL> ) { a [ r ] = x ; idd [ x ] = r ; r ++ ; } if ( ch == <LITERAL> ) { { printf ( <LITERAL> , min ( idd [ x ] - l - <LITERAL> , r - idd [ x ] - <LITERAL> ) ) ; } } return <LITERAL> ; } 
int main ( ) { int n , l = - <LITERAL> , r = <LITERAL> , id ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , str , & id ) ; switch ( str [ <LITERAL> ] ) { case <LITERAL> : place [ id ] = l -- ; break ; case <LITERAL> : place [ id ] = r ++ ; break ; case <LITERAL> : printf ( <LITERAL> , _min ( place [ id ] - l - <LITERAL> , r - place [ id ] - <LITERAL> ) ) ; } } return <LITERAL> ; } 
inline int lowbit ( int x ) { return x & ( - x ) ; } 
void add ( int x , int num ) { while ( x <= maxn ) { c [ x ] += num ; x += lowbit ( x ) ; } } 
int sum ( int x ) { int ans = <LITERAL> ; while ( x ) { ans += c [ x ] ; x -= lowbit ( x ) ; } return ans ; } 
int main ( ) { int q , l = <LITERAL> , r = <LITERAL> + <LITERAL> , w ; char op [ <LITERAL> ] ; scanf ( <LITERAL> , & q ) ; for ( int i = <LITERAL> ; i < q ; i ++ ) { scanf ( <LITERAL> , op , & w ) ; if ( op [ <LITERAL> ] == <LITERAL> ) add ( fp [ w ] = l -- , <LITERAL> ) ; else if ( op [ <LITERAL> ] == <LITERAL> ) add ( fp [ w ] = r ++ , <LITERAL> ) ; else { w = sum ( fp [ w ] ) ; printf ( <LITERAL> , min ( w - <LITERAL> , r - l - <LITERAL> - w ) ) ; } } return <LITERAL> ; } 
int main ( ) { string t , ans ; int n , k , i , m ; cin >> n >> k ; cin >> t ; int * next ; next = new int [ t . size ( ) + <LITERAL> ] ; next [ <LITERAL> ] = - <LITERAL> ; m = - <LITERAL> ; i = <LITERAL> ; while ( i < t . size ( ) ) { if ( m == - <LITERAL> || t [ i ] == t [ m ] ) { m ++ ; i ++ ; next [ i ] = m ; } else m = next [ m ] ; } ans += t ; while ( k > <LITERAL> ) { for ( i = next [ t . size ( ) ] ; i <= t . size ( ) - <LITERAL> ; i ++ ) { ans += t [ i ] ; } k -- ; } cout << ans << endl ; } 
int main ( ) { cin >> s >> n >> a ; int len = strlen ( a ) ; int subv = <LITERAL> ; for ( int i = len - <LITERAL> ; i > <LITERAL> ; i -- ) { for ( int j = <LITERAL> ; j < i ; j ++ ) { if ( a [ j ] != a [ len + j - i ] ) { break ; } if ( j == i - <LITERAL> ) subv = i ; } if ( subv ) break ; } cout << a ; for ( int i = <LITERAL> ; i < n ; i ++ ) { for ( int j = subv ; j < len ; j ++ ) { printf ( <LITERAL> , a [ j ] ) ; } } } return <LITERAL> ; } 
char * cpystr ( char * str , int pos , int length ) { int alength = strlen ( str ) ; int rlength = ( ( alength - pos ) >= length ? length : ( alength - pos ) ) + <LITERAL> ; char * tmp ; tmp = ( char * ) malloc ( rlength * sizeof ( char ) ) ; strncpy ( tmp , str + pos , rlength - <LITERAL> ) ; tmp [ rlength - <LITERAL> ] = <LITERAL> ; return tmp ; } 
int main ( ) { int n , k ; char str [ <LITERAL> ] ; scanf ( <LITERAL> , & n , & k ) ; scanf ( <LITERAL> , str ) ; int pos = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) if ( strcmp ( cpystr ( str , <LITERAL> , i ) , cpystr ( str , n - i , i ) ) == <LITERAL> ) pos = i ; printf ( <LITERAL> , str ) ; for ( int i = <LITERAL> ; i < k ; i ++ ) printf ( <LITERAL> , cpystr ( str , pos , n - pos ) ) ; return <LITERAL> ; } 
int main ( ) { int n , m ; string s ; cin >> n >> m >> s ; int temp ; for ( int i = <LITERAL> ; i < n ; i ++ ) if ( s . substr ( <LITERAL> , i ) == s . substr ( n - i , i ) ) temp = i ; for ( int i = <LITERAL> ; i < m ; i ++ ) cout << s . substr ( <LITERAL> , n - temp ) ; cout << s << endl ; } 
inline bool isSame ( char * a , char * b , int l ) { for ( int i = <LITERAL> ; i < l ; i ++ ) { if ( a [ i ] != b [ i ] ) { return false ; } } return true ; } 
int main ( ) { int l , k , offset = <LITERAL> ; scanf ( <LITERAL> , & l , & k , str ) ; for ( ; offset < l && ! isSame ( str , str + offset , l - offset ) ; offset ++ ) ; printf ( str ) ; for ( int i = <LITERAL> ; i < k ; i ++ ) { printf ( str + ( l - offset ) ) ; } return <LITERAL> ; } 
int main ( ) { string t , s ; cin >> n >> k >> t ; int i ; string tmp = t ; for ( i = <LITERAL> ; i <= t . size ( ) ; ++ i ) { tmp += t . substr ( t . size ( ) - i , i ) ; if ( tmp . find ( t , <LITERAL> ) != tmp . npos ) break ; tmp = t ; } cout << t ; string part = t . substr ( t . size ( ) - i , i ) ; for ( int i = <LITERAL> ; i < k - <LITERAL> ; ++ i ) { cout << part ; } return <LITERAL> ; } 
signed main ( ) { { { int n , k ; cin >> n >> k ; k -- ; string str ; cin >> str ; int j ; for ( int i = <LITERAL> ; i < n ; i ++ ) if ( str . substr ( <LITERAL> , i ) == str . substr ( n - i , i ) ) j = i ; while ( k -- ) { int sz = n - j ; for ( int i = <LITERAL> ; sz ; i ++ , sz -- ) putchar ( str [ i ] ) ; } cout << str << endl ; return <LITERAL> ; } 
bool check ( int num ) { for ( int j = <LITERAL> ; num + j <= n ; j ++ ) { if ( ch [ num + j ] != ch [ <LITERAL> + j ] ) return <LITERAL> ; } return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; scanf ( <LITERAL> , ch + <LITERAL> ) ; int ans = <LITERAL> ; bool find = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( check ( i ) ) { find = <LITERAL> ; for ( int j = n - i + <LITERAL> ; j <= n ; j ++ ) { ch2 [ j - ( n - i + <LITERAL> ) + <LITERAL> ] = ch [ j ] ; } } break ; } } printf ( <LITERAL> , ch + <LITERAL> ) ; for ( int i = <LITERAL> ; i < k ; i ++ ) { if ( find ) printf ( <LITERAL> , ch2 + <LITERAL> ) ; else printf ( <LITERAL> , ch + <LITERAL> ) ; } printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , k , fl ; scanf ( <LITERAL> , & n , & k , s ) ; printf ( <LITERAL> , s ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { fl = <LITERAL> ; for ( int j = <LITERAL> ; j + i < n ; j ++ ) if ( s [ j ] != s [ ( j + i ) % n ] ) { fl = <LITERAL> ; break ; } if ( fl ) { fl = i ; break ; } } for ( int i = <LITERAL> ; i < k ; i ++ ) printf ( <LITERAL> , s + n - fl ) ; return <LITERAL> ; } 
int main ( ) { int _ , t ; string ts ; cin >> _ >> t >> ts ; int msuf = <LITERAL> ; for ( int i = <LITERAL> ; i < ts . size ( ) ; i ++ ) { if ( ts . substr ( <LITERAL> , i ) == ts . substr ( ts . size ( ) - i , i ) ) { msuf = i ; } } string ans = ts ; t -- ; while ( t -- ) { ans += ts . substr ( msuf , ts . size ( ) - msuf ) ; } cout << ans << endl ; return <LITERAL> ; } 
bool judge ( int key ) { for ( int i = <LITERAL> ; i <= key ; ++ i ) { if ( s [ i ] != s [ n - key + i ] ) { return false ; } } return true ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k , s + <LITERAL> ) ; for ( int i = n - <LITERAL> ; i ; -- i ) { if ( judge ( i ) ) { ans = i ; break ; } } printf ( <LITERAL> , s + <LITERAL> ) ; for ( int i = <LITERAL> ; i < k ; ++ i ) { printf ( <LITERAL> , s + <LITERAL> + ans ) ; } return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & len , & t ) ; gets ( arr ) ; ans = arr ; for ( int i = <LITERAL> ; i <= len - <LITERAL> ; i ++ ) { if ( ! strncmp ( arr , arr + i , len - i ) ) { ans = arr + len - i ; break ; } } printf ( <LITERAL> , arr ) ; for ( int i = <LITERAL> ; i <= t - <LITERAL> ; i ++ ) printf ( <LITERAL> , ans ) ; putchar ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { cin >> n >> k ; scanf ( <LITERAL> , s ) ; int pos = <LITERAL> , ans = <LITERAL> ; while ( pos < n ) { bool flag = true ; for ( int i = <LITERAL> ; pos + i < n ; ++ i ) if ( s [ i ] != s [ pos + i ] ) { flag = false ; break ; } if ( ! flag ) ++ pos ; else { ans = n - pos ; break ; } } printf ( <LITERAL> , s ) ; for ( int i = <LITERAL> ; i < k ; ++ i ) for ( int j = ans ; j < n ; ++ j ) printf ( <LITERAL> , s [ j ] ) ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; k = read ( ) ; cin >> s ; bool flag = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) if ( s [ i - <LITERAL> ] != s [ i ] ) flag = <LITERAL> ; if ( flag ) { cout << s ; for ( int i = <LITERAL> ; i < k ; i ++ ) cout << s [ <LITERAL> ] ; cout << endl ; return ; } int len = <LITERAL> ; for ( int i = <LITERAL> ; i < n - <LITERAL> ; i ++ ) if ( s . substr ( <LITERAL> , i ) == s . substr ( n - i , n ) ) len = i ; cout << s ; s = s . substr ( len , n ) ; for ( int i = <LITERAL> ; i < k ; i ++ ) cout << s ; cout << endl ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { scanf ( <LITERAL> , & n , & k ) ; scanf ( <LITERAL> , s + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) str [ i ] = s [ i ] ; int cnt = <LITERAL> ; int now = <LITERAL> ; int len = n ; while ( cnt < k ) { int t = <LITERAL> ; now ++ ; while ( now <= len && t <= n && str [ now ] == s [ t ] ) now ++ , t ++ ; if ( now <= len ) { now = now - t + <LITERAL> ; continue ; } for ( int i = t ; i <= n ; i ++ ) str [ now ] = s [ i ] , now ++ , len ++ ; now = len - n + <LITERAL> ; cnt ++ ; } printf ( <LITERAL> , str + <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { int n , k ; scanf ( <LITERAL> , & n , & k ) ; cin >> a ; int maxL = <LITERAL> ; bool flag = true ; ; for ( int i = <LITERAL> ; i < n ; i ++ ) { flag = true ; for ( int j = <LITERAL> ; j < i ; j ++ ) { if ( a [ j ] != a [ n - i + j ] ) { flag = false ; break ; } } if ( flag ) maxL = i ; } ans = a ; for ( int i = <LITERAL> ; i < k - <LITERAL> ; i ++ ) { for ( int j = maxL ; j < n ; j ++ ) { ans += a [ j ] ; } } cout << ans ; return <LITERAL> ; } 
void get_n ( ) { for ( int j = <LITERAL> ; j < len ; j ++ ) { int k = n [ j ] ; while ( k && st [ k ] != st [ j ] ) k = n [ k ] ; if ( st [ k ] == st [ j ] ) n [ j + <LITERAL> ] = ++ k ; } } 
int main ( ) { scanf ( <LITERAL> , & len , & k ) ; scanf ( <LITERAL> , st ) ; get_n ( ) ; printf ( <LITERAL> , st ) ; ; for ( int i = <LITERAL> ; i < k ; i ++ ) for ( int j = n [ len ] ; j < len ; j ++ ) printf ( <LITERAL> , st [ j ] ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & num [ i ] ) ; int maxnum = <LITERAL> ; for ( int i = <LITERAL> ; i <= <LITERAL> ; i ++ ) len [ i ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( num [ i ] <= num [ i - <LITERAL> ] << <LITERAL> ) { len [ i ] = len [ i - <LITERAL> ] + <LITERAL> ; maxnum = max ( maxnum , len [ i ] ) ; } } printf ( <LITERAL> , maxnum ) ; return <LITERAL> ; } 
signed main ( ) { { { int n ; cin >> n ; int x , y ; cin >> y ; int ans = <LITERAL> ; int l = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ , y = x ) { cin >> x ; ( y * <LITERAL> >= x ) ? l ++ : ( ans = max ( ans , l ) , l = <LITERAL> ) ; } cout << max ( ans , l ) << endl ; return <LITERAL> ; } 
int main ( ) { ios :: sync_with_stdio ( <LITERAL> ) ; int t ; int ans = <LITERAL> , tans = <LITERAL> , lst = <LITERAL> ; cin >> t ; while ( t -- ) { int tt ; cin >> tt ; if ( tans == <LITERAL> || tt <= lst * <LITERAL> ) { tans ++ ; } else { tans = <LITERAL> ; } lst = tt ; ans = max ( ans , tans ) ; } cout << ans << endl ; return <LITERAL> ; } 
int main ( ) { read ( n ) ; read ( a [ <LITERAL> ] ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { read ( a [ i ] ) ; pos = a [ i ] <= <LITERAL> * a [ i - <LITERAL> ] ? pos + <LITERAL> : <LITERAL> ; ans = max ( pos , ans ) ; } printf ( <LITERAL> , ans ) ; fwrite ( sr , <LITERAL> , C + <LITERAL> , stdout ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & test [ i ] ) ; ans = <LITERAL> , now = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( test [ i ] <= <LITERAL> * test [ i - <LITERAL> ] ) now ++ ; else { ans = max ( ans , now ) ; now = <LITERAL> ; } } ans = max ( ans , now ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , ans = <LITERAL> , now = <LITERAL> , x , pre = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & x ) ; if ( x > pre * <LITERAL> ) ans = max ( ans , now ) , now = <LITERAL> ; else now ++ ; pre = x ; } printf ( <LITERAL> , max ( ans , now ) ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; int start = <LITERAL> ; int k = <LITERAL> ; int ans = <LITERAL> ; bool halt = true ; while ( halt ) { int upper = upper_bound ( a , a + n , a [ k ] * <LITERAL> ) - a ; upper -- ; if ( k == upper ) { ans = max ( ans , k - start + <LITERAL> ) ; start = ++ k ; } else k = upper ; if ( k >= n ) halt = false ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; int sum = <LITERAL> , ans = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) if ( a [ i ] * <LITERAL> >= a [ i + <LITERAL> ] ) sum ++ ; else { ans = max ( ans , sum ) ; sum = <LITERAL> ; } printf ( <LITERAL> , max ( sum , ans ) ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) a [ i ] = read ( ) ; int ans = <LITERAL> , r = <LITERAL> ; for ( int l = <LITERAL> ; l <= n ; l ++ ) { r = max ( r , l ) ; while ( r < n && a [ r + <LITERAL> ] <= <LITERAL> * a [ r ] ) r ++ ; ans = max ( ans , r - l + <LITERAL> ) ; } printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; while ( n -- ) { scanf ( <LITERAL> , & a ) ; if ( a <= ( cur << <LITERAL> ) ) { ++ tmp ; } else { tmp = <LITERAL> ; } ans = std :: max ( ans , tmp ) ; cur = a ; ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n ; int ans = <LITERAL> ; cin >> n ; for ( int i = <LITERAL> ; i < n ; ++ i ) cin >> nums [ i ] ; int lastnum , tmp = <LITERAL> ; int j ; for ( int i = <LITERAL> ; i < n - ans ; ) { lastnum = nums [ i ] ; for ( j = i + <LITERAL> ; j < n ; ++ j ) { if ( nums [ j ] <= <LITERAL> * lastnum ) { ++ tmp ; lastnum = nums [ j ] ; } else break ; } if ( tmp > ans ) ans = tmp ; tmp = <LITERAL> ; if ( i == j ) ++ i ; else i = j ; } cout << ans ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; int count = <LITERAL> , max = <LITERAL> , tempfirst = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) { int temp ; cin >> temp ; if ( temp <= <LITERAL> * tempfirst ) count ++ ; else { if ( count > max ) max = count ; count = <LITERAL> ; } tempfirst = temp ; } if ( count > max ) max = count ; cout << max ; } 
int main ( ) { cin >> n ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { cin >> x ; if ( ! y ) { ++ num ; y = x ; continue ; } if ( x > y * <LITERAL> ) num = <LITERAL> ; else ++ num ; y = x ; ans = max ( ans , num ) ; } printf ( <LITERAL> , ans ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; f [ <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i ] <= a [ i - <LITERAL> ] * <LITERAL> ) f [ i ] = f [ i - <LITERAL> ] + <LITERAL> ; else f [ i ] = <LITERAL> ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) ans = max ( ans , f [ i ] ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , i , ans ; int * a , * num ; cin >> n ; a = new int [ n + <LITERAL> ] ; num = new int [ n + <LITERAL> ] ; for ( i = <LITERAL> ; i < n ; i ++ ) { cin >> a [ i ] ; } int upper ; ans = <LITERAL> ; num [ <LITERAL> ] = <LITERAL> ; upper = a [ <LITERAL> ] * <LITERAL> ; for ( i = <LITERAL> ; i < n ; i ++ ) { if ( a [ i ] <= upper ) { num [ i ] = num [ i - <LITERAL> ] + <LITERAL> ; upper = a [ i ] * <LITERAL> ; } else { num [ i ] = <LITERAL> ; upper = a [ i ] * <LITERAL> ; } } for ( i = <LITERAL> ; i < n ; i ++ ) { if ( num [ i ] > ans ) ans = num [ i ] ; } cout << ans << endl ; } 
int main ( ) { int a [ <LITERAL> ] ; int n ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) scanf ( <LITERAL> , & a [ i ] ) ; int f1 = <LITERAL> ; int b = <LITERAL> ; int f2 = a [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { if ( a [ i ] <= ( f2 << <LITERAL> ) ) { f1 ++ ; } else { b = max ( b , f1 ) ; f1 = <LITERAL> ; } f2 = a [ i ] ; } b = max ( b , f1 ) ; cout << b << endl ; return <LITERAL> ; } 
int main ( ) { int n , ans = <LITERAL> , tans = <LITERAL> , tp , t = <LITERAL> ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { tp = t ; scanf ( <LITERAL> , & t ) ; if ( t > ( tp << <LITERAL> ) ) { ans < tans && ( ans = tans ) ; tans = <LITERAL> ; } else { tans ++ ; } } ans < tans && ( ans = tans ) ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { ios :: sync_with_stdio ( <LITERAL> ) ; int n ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> segs [ i ] . first >> segs [ i ] . second ; } pref [ <LITERAL> ] = segs [ <LITERAL> ] ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { pref [ i ] . first = max ( pref [ i - <LITERAL> ] . first , segs [ i ] . first ) ; pref [ i ] . second = min ( pref [ i - <LITERAL> ] . second , segs [ i ] . second ) ; } suff [ n ] = segs [ n ] ; for ( int i = n - <LITERAL> ; i >= <LITERAL> ; i -- ) { suff [ i ] . first = max ( suff [ i + <LITERAL> ] . first , segs [ i ] . first ) ; suff [ i ] . second = min ( suff [ i + <LITERAL> ] . second , segs [ i ] . second ) ; } int ans = <LITERAL> ; ans = max ( ans , pref [ n - <LITERAL> ] . second - pref [ n - <LITERAL> ] . first ) ; ans = max ( ans , suff [ <LITERAL> ] . second - suff [ <LITERAL> ] . first ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { ans = max ( ans , min ( pref [ i - <LITERAL> ] . second , suff [ i + <LITERAL> ] . second ) - max ( pref [ i - <LITERAL> ] . first , suff [ i + <LITERAL> ] . first ) ) ; } cout << ans << endl ; return <LITERAL> ; } 
int main ( ) { int n , ans = <LITERAL> ; scanf ( <LITERAL> , & n ) ; r1 [ <LITERAL> ] = <LITERAL> ; r2 [ n + <LITERAL> ] = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , l1 + i , r1 + i ) , l2 [ i ] = l1 [ i ] , r2 [ i ] = r1 [ i ] ; l1 [ i ] = max ( l1 [ i - <LITERAL> ] , l1 [ i ] ) , r1 [ i ] = min ( r1 [ i - <LITERAL> ] , r1 [ i ] ) ; } for ( int i = n ; i ; i -- ) { l2 [ i ] = max ( l2 [ i + <LITERAL> ] , l2 [ i ] ) , r2 [ i ] = min ( r2 [ i + <LITERAL> ] , r2 [ i ] ) ; ans = max ( ans , min ( r2 [ i + <LITERAL> ] , r1 [ i - <LITERAL> ] ) - max ( l2 [ i + <LITERAL> ] , l1 [ i - <LITERAL> ] ) ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
signed main ( ) { { { int n ; cin >> n ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; l . push ( a [ i ] ) ; r . push ( b [ i ] ) ; } int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int x = l . top ( ) ; if ( x == a [ i ] ) { int c = x ; l . pop ( ) ; x = l . top ( ) ; l . push ( c ) ; } int y = r . top ( ) ; if ( y == b [ i ] ) { int c = y ; r . pop ( ) ; y = r . top ( ) ; r . push ( c ) ; } ans = max ( ans , y - x ) ; } cout << ans << endl ; return <LITERAL> ; } 
int main ( ) { int n ; cin >> n ; ll lbig = <LITERAL> , lbignum , rsml = <LITERAL> , rsmlnum ; for ( int i = <LITERAL> ; i < n ; ++ i ) { cin >> xpoint [ i ] >> ypoint [ i ] ; if ( xpoint [ i ] > lbig ) { lbig = xpoint [ i ] ; lbignum = i ; } if ( ypoint [ i ] < rsml ) { rsml = ypoint [ i ] ; rsmlnum = i ; } } ll l = <LITERAL> , r = <LITERAL> , dlans , drans ; for ( int i = <LITERAL> ; i < n ; ++ i ) { if ( i != lbignum && xpoint [ i ] > l ) l = xpoint [ i ] ; if ( i != lbignum && ypoint [ i ] < r ) r = ypoint [ i ] ; } if ( l > r ) dlans = <LITERAL> ; else dlans = r - l ; if ( lbignum == rsmlnum ) { cout << dlans ; return <LITERAL> ; } l = <LITERAL> , r = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; ++ i ) { if ( i != rsmlnum && xpoint [ i ] > l ) l = xpoint [ i ] ; if ( i != rsmlnum && ypoint [ i ] < r ) r = ypoint [ i ] ; } if ( l > r ) drans = <LITERAL> ; else drans = r - l ; if ( dlans < drans ) dlans = drans ; cout << dlans ; return <LITERAL> ; } 
int main ( ) { int l = - <LITERAL> , l2 = - <LITERAL> , r = <LITERAL> , r2 = <LITERAL> , n , tl , tr ; bool flag = false ; scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & tl , & tr ) ; if ( tl > l ) { l2 = l ; l = tl ; } else if ( tl > l2 ) { l2 = tl ; } if ( tr < r ) { r2 = r ; r = tr ; } else if ( tr < r2 ) { r2 = tr ; } if ( l == tl && r == tr ) { flag = true ; } else if ( l == tl || r == tr ) { flag = false ; } } int ans = flag ? r2 - l2 : _max ( r - l2 , r2 - l ) ; printf ( <LITERAL> , _max ( ans , <LITERAL> ) ) ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; clr ( lt , <LITERAL> ) ; clr ( rt , <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) l [ i ] = read ( ) , r [ i ] = read ( ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) ls [ i ] = max ( ls [ i - <LITERAL> ] , l [ i ] ) , lt [ i ] = min ( lt [ i - <LITERAL> ] , r [ i ] ) ; for ( int i = n ; i >= <LITERAL> ; i -- ) rs [ i ] = max ( rs [ i + <LITERAL> ] , l [ i ] ) , rt [ i ] = min ( rt [ i + <LITERAL> ] , r [ i ] ) ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int L = max ( ls [ i - <LITERAL> ] , rs [ i + <LITERAL> ] ) , R = min ( lt [ i - <LITERAL> ] , rt [ i + <LITERAL> ] ) ; ans = max ( ans , max ( <LITERAL> , R - L ) ) ; } printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & seg [ i ] . l , & seg [ i ] . r ) ; left [ i ] = seg [ i ] . l ; right [ i ] = seg [ i ] . r ; } sort ( left + <LITERAL> , left + n + <LITERAL> ) ; sort ( right + <LITERAL> , right + n + <LITERAL> ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int ls = left [ n ] , rs = right [ <LITERAL> ] ; if ( seg [ i ] . l == ls ) ls = left [ n - <LITERAL> ] ; if ( seg [ i ] . r == rs ) rs = right [ <LITERAL> ] ; ans = max ( ans , rs - ls ) ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
void renew1 ( int nowl ) { if ( nowl >= l1 ) { l2 = l1 ; l1 = nowl ; } else if ( nowl >= l2 ) { l2 = nowl ; } } 
void renew2 ( int nowr ) { if ( nowr <= r1 ) { r2 = r1 ; r1 = nowr ; } else if ( nowr <= r2 ) { r2 = nowr ; } } 
int main ( ) { scanf ( <LITERAL> , & n ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] , & b [ i ] ) ; renew1 ( a [ i ] ) ; renew2 ( b [ i ] ) ; } int maxlen = - <LITERAL> ; ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( a [ i ] == l1 ) { if ( b [ i ] == r1 ) maxlen = max ( maxlen , r2 - l2 ) ; else maxlen = max ( maxlen , r1 - l2 ) ; } else if ( b [ i ] == r1 ) { maxlen = max ( maxlen , r2 - l1 ) ; } } if ( maxlen >= <LITERAL> ) printf ( <LITERAL> , maxlen ) ; else printf ( <LITERAL> ) ; return <LITERAL> ; } 
int main ( ) { scanf ( <LITERAL> , & n , & r ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; if ( a [ i ] ) b [ ++ cnt ] . l = i - r + <LITERAL> , b [ cnt ] . r = i + r - <LITERAL> ; } int last = <LITERAL> , now = <LITERAL> , ans = <LITERAL> ; bool flag = false ; while ( now <= n ) { bool f = false ; while ( last <= cnt && b [ last ] . l <= now ) last ++ , f = true ; last -- ; if ( ! f || now > b [ last ] . r || last > cnt ) { flag = true ; break ; } now = b [ last ] . r + <LITERAL> ; ans ++ ; } if ( flag ) return printf ( <LITERAL> ) , <LITERAL> ; printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { set < int > st ; int n , r , ans = <LITERAL> , mr ; cin >> n >> r ; mr = n + <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int t ; cin >> t ; if ( t ) st . insert ( i + r - <LITERAL> ) ; } while ( mr > <LITERAL> ) { auto t = st . lower_bound ( mr - <LITERAL> ) ; if ( t == st . end ( ) ) { puts ( <LITERAL> ) ; return <LITERAL> ; } if ( * t == mr + <LITERAL> * r - <LITERAL> ) { puts ( <LITERAL> ) ; return <LITERAL> ; } mr = * t - <LITERAL> * r + <LITERAL> ; ans ++ ; } cout << ans << endl ; return <LITERAL> ; } 
void add ( int x ) { for ( int i = max ( x - r + <LITERAL> , <LITERAL> ) ; i <= min ( x + r - <LITERAL> , n ) ; i ++ ) { b [ i ] = <LITERAL> ; } } 
int main ( ) { scanf ( <LITERAL> , & n , & r ) ; int sum = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) if ( ! b [ i ] ) { for ( int j = min ( i + r - <LITERAL> , n ) ; j >= max ( i - r + <LITERAL> , <LITERAL> ) ; j -- ) if ( a [ j ] ) { add ( j ) ; sum ++ ; break ; } if ( ! b [ i ] ) { printf ( <LITERAL> ) ; return <LITERAL> ; } } printf ( <LITERAL> , sum ) ; return <LITERAL> ; } 
int main ( ) { cin >> n >> r ; for ( int i = <LITERAL> ; i <= n ; ++ i ) cin >> a [ i ] ; int pos = r , lpos = - <LITERAL> ; while ( lpos + r - <LITERAL> < n && pos > lpos && pos > <LITERAL> ) { if ( a [ pos ] ) lpos = pos , pos = pos + <LITERAL> * r - <LITERAL> , ++ num ; else -- pos ; } if ( pos == lpos || pos == <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> , num ) ; } 
inline char gc ( ) { return A == B && ( B = ( A = ss ) + fread ( ss , <LITERAL> , <LITERAL> << <LITERAL> , stdin ) , A == B ) ? EOF : * A ++ ; } 
int main ( ) { read ( n ) ; read ( r ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) read ( a [ i ] ) ; for ( int i = <LITERAL> ; i <= n ; i = pos + r ) { pos = min ( i + r - <LITERAL> , n ) ; while ( pos >= i - r + <LITERAL> && ! a [ pos ] ) pos -- ; if ( pos < i - r + <LITERAL> || pos < <LITERAL> ) { puts ( <LITERAL> ) ; return <LITERAL> ; } ++ cnt ; } printf ( <LITERAL> , cnt ) ; fwrite ( sr , <LITERAL> , C + <LITERAL> , stdout ) ; return <LITERAL> ; } 
int main ( ) { int n , r , ans = <LITERAL> ; scanf ( <LITERAL> , & n , & r ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , a + i ) ; f [ i ] = <LITERAL> ; if ( a [ i ] ) for ( int j = max ( <LITERAL> , i - r * <LITERAL> + <LITERAL> ) ; j < i ; j ++ ) { if ( j || ( i <= r ) ) f [ i ] = min ( f [ i ] , f [ j ] + <LITERAL> ) ; } } for ( int i = max ( <LITERAL> , n - r + <LITERAL> ) ; i <= n ; i ++ ) ans = min ( ans , f [ i ] ) ; printf ( <LITERAL> , ans == <LITERAL> ? - <LITERAL> : ans ) ; return <LITERAL> ; } 
int main ( ) { int n , r , i , j ; bool * heater ; cin >> n >> r ; heater = new bool [ n + <LITERAL> ] ; for ( i = <LITERAL> ; i < n ; i ++ ) { cin >> heater [ i ] ; } int ans = <LITERAL> ; for ( i = <LITERAL> ; i < n ; i ++ ) { bool flag = false ; for ( j = i + r - <LITERAL> ; j >= i - r + <LITERAL> ; j -- ) { if ( j >= n ) { j = n ; continue ; } if ( j < <LITERAL> ) break ; if ( heater [ j ] == <LITERAL> ) { ans ++ ; i = j + r - <LITERAL> ; flag = true ; break ; } } if ( flag == false ) { ans = - <LITERAL> ; break ; } } cout << ans << endl ; } 
int main ( ) { cin >> n >> r ; int ret = <LITERAL> ; for ( int i = <LITERAL> ; i < n ; ++ i ) { cin >> heater [ i ] ; if ( heater [ i ] ) { ++ ret ; for ( int j = i - r + <LITERAL> ; j <= i + r - <LITERAL> ; ++ j ) { if ( j < n && j >= <LITERAL> ) ++ room [ j ] ; } } } bool flag = true ; for ( int i = <LITERAL> ; i < n ; ++ i ) { if ( ! room [ i ] ) { cout << <LITERAL> ; return <LITERAL> ; } for ( int j = i - r + <LITERAL> ; j <= i + r - <LITERAL> ; ++ j ) { if ( ( j < n && j >= <LITERAL> ) && room [ j ] <= <LITERAL> ) { flag = false ; break ; } } if ( flag ) { -- ret ; for ( int j = i - r + <LITERAL> ; j <= i + r - <LITERAL> ; ++ j ) { if ( ( j < n && j >= <LITERAL> ) ) { -- room [ j ] ; } } } flag = true ; } cout << ret ; return <LITERAL> ; } 
signed main ( ) { { { int n , r ; cin >> n >> r ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) cin >> a [ i ] ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { int flag = <LITERAL> ; for ( int j = <LITERAL> ; j <= n ; j ++ ) { if ( choose [ j ] && ( j - r + <LITERAL> <= i && j + r - <LITERAL> >= i ) ) { flag = <LITERAL> ; break ; } } if ( flag ) continue ; int pos = - <LITERAL> ; for ( int j = <LITERAL> ; j <= n ; j ++ ) { if ( a [ j ] && ( j - r + <LITERAL> <= i && j + r - <LITERAL> >= i ) ) { pos = j ; } } if ( pos == - <LITERAL> ) { puts ( <LITERAL> ) ; return <LITERAL> ; } choose [ pos ] = <LITERAL> ; ans ++ ; } cout << ans << endl ; return <LITERAL> ; } 
int search ( int key ) { int left = <LITERAL> , right = vec . size ( ) - <LITERAL> , tmp = - <LITERAL> ; while ( left <= right ) { int mid = ( left + right ) >> <LITERAL> ; if ( vec [ mid ] . left <= key ) { tmp = mid ; left = mid + <LITERAL> ; } else { right = mid - <LITERAL> ; } } return tmp ; } 
int main ( ) { scanf ( <LITERAL> , & n , & r ) ; for ( int i = <LITERAL> ; i <= n ; ++ i ) { scanf ( <LITERAL> , & a ) ; if ( a == <LITERAL> ) { vec . push_back ( node ( std :: max ( i - r + <LITERAL> , <LITERAL> ) , std :: min ( i + r - <LITERAL> , n ) ) ) ; } } cptmp = - <LITERAL> ; cur = <LITERAL> ; while ( cur <= n ) { int tmp = search ( cur ) ; if ( tmp != - <LITERAL> && tmp != cptmp ) { ++ ans ; cur = vec [ tmp ] . right + <LITERAL> ; } else { ans = - <LITERAL> ; break ; } cptmp = tmp ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( void ) { scanf ( <LITERAL> , & n , & r ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; now = <LITERAL> , ans = <LITERAL> , last = <LITERAL> ; while ( now < n ) { f_flag = <LITERAL> ; for ( int i = now + r ; i >= last + <LITERAL> ; i -- ) { if ( a [ i ] ) { last = i ; now = i + r - <LITERAL> ; ans ++ ; f_flag = <LITERAL> ; break ; } } if ( ! f_flag ) { printf ( <LITERAL> ) ; return <LITERAL> ; } } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , r , f = - <LITERAL> , toop , t , cnt = <LITERAL> , scf = - <LITERAL> ; scanf ( <LITERAL> , & n , & r ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) { scanf ( <LITERAL> , & t ) ; arr [ i ] = t ; } while ( f < n - <LITERAL> ) { toop = - <LITERAL> ; for ( int i = _min ( n - <LITERAL> , f + r ) ; i > f - r + <LITERAL> && i > scf ; i -- ) { if ( arr [ i ] ) { toop = i ; break ; } } scf = _min ( n - <LITERAL> , f + r ) ; if ( toop == - <LITERAL> ) { printf ( <LITERAL> ) ; return <LITERAL> ; } else { f = toop + r - <LITERAL> ; cnt ++ ; } } printf ( <LITERAL> , cnt ) ; return <LITERAL> ; } 
int main ( ) { int n , r ; scanf ( <LITERAL> , & n , & r ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) scanf ( <LITERAL> , & heat [ i ] ) ; bool find = <LITERAL> ; for ( int i = <LITERAL> ; i <= r ; i ++ ) { if ( heat [ i ] ) { find = <LITERAL> ; break ; } } if ( ! find ) { printf ( <LITERAL> ) ; return <LITERAL> ; } int minnum = <LITERAL> ; for ( int k = <LITERAL> ; k <= r ; k ++ ) { if ( heat [ k ] ) { { int tot = <LITERAL> ; int unit = k ; while ( unit + r - <LITERAL> < n ) ) { bool check = <LITERAL> ; ; for ( int j = <LITERAL> * r - <LITERAL> ; j >= <LITERAL> ; j -- ) { if ( unit + j <= n && heat [ unit + j ] ) { check = <LITERAL> ; unit += j ; tot ++ ; break ; } } if ( ! check ) break ; } if ( unit + r - <LITERAL> >= n ) minnum = min ( minnum , tot ) ; } } if ( minnum == <LITERAL> ) printf ( <LITERAL> ) ; else printf ( <LITERAL> , minnum ) ; return <LITERAL> ; } 
int main ( ) { int n , r ; scanf ( <LITERAL> , & n , & r ) ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { scanf ( <LITERAL> , & a [ i ] ) ; } int k = r ; int cur = <LITERAL> ; int ans = <LITERAL> ; bool halt = true ; bool flag ; while ( halt ) { flag = false ; for ( int i = k ; i >= k - <LITERAL> * r + <LITERAL> && i >= <LITERAL> ; i -- ) { if ( a [ i ] == <LITERAL> ) { ans ++ ; cur = i ; k = i + <LITERAL> * r - <LITERAL> ; if ( cur + r - <LITERAL> >= n ) halt = false ; flag = true ; break ; } } if ( ! flag ) { printf ( <LITERAL> ) ; break ; } } if ( flag ) printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
int main ( ) { int n , r , ans = <LITERAL> , t = <LITERAL> ; scanf ( <LITERAL> , & n , & r ) ; for ( int i = <LITERAL> ; i < n ; i ++ ) scanf ( <LITERAL> , & a [ i ] ) ; while ( t < n ) { int idx = - <LITERAL> ; for ( int i = <LITERAL> ; i < n ; i ++ ) if ( a [ i ] ) if ( i - r + <LITERAL> <= t && i + r - <LITERAL> >= t ) idx = i ; if ( idx == - <LITERAL> ) { puts ( <LITERAL> ) ; return <LITERAL> ; } ans ++ ; t = idx + r ; } printf ( <LITERAL> , ans ) ; return <LITERAL> ; } 
inline int read ( ) { int x = <LITERAL> , f = <LITERAL> ; char ch = getchar ( ) ; while ( ch < <LITERAL> || ch > <LITERAL> ) { if ( ch == <LITERAL> ) f = - <LITERAL> ; ch = getchar ( ) ; } while ( ch >= <LITERAL> && ch <= <LITERAL> ) { x = x * <LITERAL> + ch - <LITERAL> , ch = getchar ( ) ; } return x * f ; } 
void solve ( ) { n = read ( ) ; r = read ( ) ; int ans = <LITERAL> ; for ( int i = <LITERAL> ; i <= n ; i ++ ) { a [ i ] = read ( ) ; } for ( int i = <LITERAL> ; i <= n ; i ++ ) { if ( vis [ i ] ) continue ; ans ++ ; int pos = <LITERAL> ; for ( int j = i + r - <LITERAL> ; j >= i - r + <LITERAL> ; j -- ) if ( a [ j ] ) { pos = j ; break ; } if ( ! pos ) { puts ( <LITERAL> ) ; return ; } for ( int j = min ( n , pos + r - <LITERAL> ) ; j >= max ( <LITERAL> , pos - r + <LITERAL> ) ; j -- ) vis [ j ] = <LITERAL> ; } printf ( <LITERAL> , ans ) ; } 
int main ( ) { int T = <LITERAL> ; while ( T -- ) solve ( ) ; } 
